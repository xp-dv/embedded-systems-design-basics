
lab5_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ae4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003c6c  08003c6c  00004c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ca4  08003ca4  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ca4  08003ca4  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ca4  08003ca4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ca4  08003ca4  00004ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ca8  08003ca8  00004ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003cac  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000000f4  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000100  20000100  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cefe  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019d8  00000000  00000000  00011f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb8  00000000  00000000  00013918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000938  00000000  00000000  000144d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a7f3  00000000  00000000  00014e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ea34  00000000  00000000  0002f5fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0c49  00000000  00000000  0003e02f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000dec78  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003160  00000000  00000000  000decbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  000e1e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003c54 	.word	0x08003c54

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003c54 	.word	0x08003c54

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fabd 	bl	800074c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f835 	bl	8000240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f963 	bl	80004a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001da:	f000 f931 	bl	8000440 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80001de:	f000 f883 	bl	80002e8 <MX_TIM1_Init>
   * Tick Period = 1 / Tick Frequency = 1 us
   * Signal Period (T) = Tick Period * (Max Timer Count + 1) = 1 us * 20000 = 20 ms
   * Signal Frequency (f) = 1 / T = 50 Hz
   * Pulse Width = (CCR Value / Max Timer Count) * Signal Period
   */
  uint32_t duty_cycle_register = 0; // With timer period of 1 us, CCR register value = pulse width in us
 80001e2:	2300      	movs	r3, #0
 80001e4:	607b      	str	r3, [r7, #4]

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80001e6:	2100      	movs	r1, #0
 80001e8:	4813      	ldr	r0, [pc, #76]	@ (8000238 <main+0x70>)
 80001ea:	f002 f9cd 	bl	8002588 <HAL_TIM_PWM_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // Coarse step 0% duty cycle to 100%
    while (duty_cycle_register < SERVO_COUNTER_PERIOD) {
 80001ee:	e008      	b.n	8000202 <main+0x3a>
      TIM1->CCR1 = duty_cycle_register;
 80001f0:	4a12      	ldr	r2, [pc, #72]	@ (800023c <main+0x74>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	6353      	str	r3, [r2, #52]	@ 0x34
      duty_cycle_register += SERVO_COARSE_STEP;
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	3350      	adds	r3, #80	@ 0x50
 80001fa:	607b      	str	r3, [r7, #4]
      HAL_Delay(SERVO_COARSE_STEP_DELAY);
 80001fc:	2008      	movs	r0, #8
 80001fe:	f000 fb0b 	bl	8000818 <HAL_Delay>
    while (duty_cycle_register < SERVO_COUNTER_PERIOD) {
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f644 621e 	movw	r2, #19998	@ 0x4e1e
 8000208:	4293      	cmp	r3, r2
 800020a:	d9f1      	bls.n	80001f0 <main+0x28>
    }

    // Coarse step 100% duty cycle to 0%
    while (duty_cycle_register > 0) {
 800020c:	e008      	b.n	8000220 <main+0x58>
      TIM1->CCR1 = duty_cycle_register;
 800020e:	4a0b      	ldr	r2, [pc, #44]	@ (800023c <main+0x74>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	6353      	str	r3, [r2, #52]	@ 0x34
      duty_cycle_register -= SERVO_COARSE_STEP;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	3b50      	subs	r3, #80	@ 0x50
 8000218:	607b      	str	r3, [r7, #4]
      HAL_Delay(SERVO_COARSE_STEP_DELAY);
 800021a:	2008      	movs	r0, #8
 800021c:	f000 fafc 	bl	8000818 <HAL_Delay>
    while (duty_cycle_register > 0) {
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	2b00      	cmp	r3, #0
 8000224:	d1f3      	bne.n	800020e <main+0x46>
    }

    // Use interpolation from datasheet to move servo to -80°
    TIM1->CCR1 = 1056; // 1500us + (-80° - 0°) * (1000us - 1500us) / (-90° - 0°) = 1055.5556
 8000226:	4b05      	ldr	r3, [pc, #20]	@ (800023c <main+0x74>)
 8000228:	f44f 6284 	mov.w	r2, #1056	@ 0x420
 800022c:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_Delay(SERVO_HOLD_DELAY);
 800022e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000232:	f000 faf1 	bl	8000818 <HAL_Delay>
    while (duty_cycle_register < SERVO_COUNTER_PERIOD) {
 8000236:	e7e4      	b.n	8000202 <main+0x3a>
 8000238:	20000028 	.word	0x20000028
 800023c:	40012c00 	.word	0x40012c00

08000240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b096      	sub	sp, #88	@ 0x58
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800024a:	2228      	movs	r2, #40	@ 0x28
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f003 fcd3 	bl	8003bfa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	f107 031c 	add.w	r3, r7, #28
 8000258:	2200      	movs	r2, #0
 800025a:	601a      	str	r2, [r3, #0]
 800025c:	605a      	str	r2, [r3, #4]
 800025e:	609a      	str	r2, [r3, #8]
 8000260:	60da      	str	r2, [r3, #12]
 8000262:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
 8000270:	611a      	str	r2, [r3, #16]
 8000272:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000274:	2302      	movs	r3, #2
 8000276:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000278:	2301      	movs	r3, #1
 800027a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027c:	2310      	movs	r3, #16
 800027e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000280:	2300      	movs	r3, #0
 8000282:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000284:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000288:	4618      	mov	r0, r3
 800028a:	f000 fd41 	bl	8000d10 <HAL_RCC_OscConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000294:	f000 f928 	bl	80004e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000298:	230f      	movs	r3, #15
 800029a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800029c:	2300      	movs	r3, #0
 800029e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ac:	f107 031c 	add.w	r3, r7, #28
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f001 fd6a 	bl	8001d8c <HAL_RCC_ClockConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002be:	f000 f913 	bl	80004e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80002c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002c6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80002c8:	2300      	movs	r3, #0
 80002ca:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	4618      	mov	r0, r3
 80002d0:	f001 ff7c 	bl	80021cc <HAL_RCCEx_PeriphCLKConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80002da:	f000 f905 	bl	80004e8 <Error_Handler>
  }
}
 80002de:	bf00      	nop
 80002e0:	3758      	adds	r7, #88	@ 0x58
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b09a      	sub	sp, #104	@ 0x68
 80002ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002fc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	605a      	str	r2, [r3, #4]
 8000306:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000308:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	605a      	str	r2, [r3, #4]
 8000312:	609a      	str	r2, [r3, #8]
 8000314:	60da      	str	r2, [r3, #12]
 8000316:	611a      	str	r2, [r3, #16]
 8000318:	615a      	str	r2, [r3, #20]
 800031a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	222c      	movs	r2, #44	@ 0x2c
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f003 fc69 	bl	8003bfa <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000328:	4b43      	ldr	r3, [pc, #268]	@ (8000438 <MX_TIM1_Init+0x150>)
 800032a:	4a44      	ldr	r2, [pc, #272]	@ (800043c <MX_TIM1_Init+0x154>)
 800032c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8 - 1;
 800032e:	4b42      	ldr	r3, [pc, #264]	@ (8000438 <MX_TIM1_Init+0x150>)
 8000330:	2207      	movs	r2, #7
 8000332:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000334:	4b40      	ldr	r3, [pc, #256]	@ (8000438 <MX_TIM1_Init+0x150>)
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = SERVO_COUNTER_PERIOD;
 800033a:	4b3f      	ldr	r3, [pc, #252]	@ (8000438 <MX_TIM1_Init+0x150>)
 800033c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000340:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000342:	4b3d      	ldr	r3, [pc, #244]	@ (8000438 <MX_TIM1_Init+0x150>)
 8000344:	2200      	movs	r2, #0
 8000346:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000348:	4b3b      	ldr	r3, [pc, #236]	@ (8000438 <MX_TIM1_Init+0x150>)
 800034a:	2200      	movs	r2, #0
 800034c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800034e:	4b3a      	ldr	r3, [pc, #232]	@ (8000438 <MX_TIM1_Init+0x150>)
 8000350:	2280      	movs	r2, #128	@ 0x80
 8000352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000354:	4838      	ldr	r0, [pc, #224]	@ (8000438 <MX_TIM1_Init+0x150>)
 8000356:	f002 f85f 	bl	8002418 <HAL_TIM_Base_Init>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000360:	f000 f8c2 	bl	80004e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000364:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000368:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800036a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800036e:	4619      	mov	r1, r3
 8000370:	4831      	ldr	r0, [pc, #196]	@ (8000438 <MX_TIM1_Init+0x150>)
 8000372:	f002 fb09 	bl	8002988 <HAL_TIM_ConfigClockSource>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800037c:	f000 f8b4 	bl	80004e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000380:	482d      	ldr	r0, [pc, #180]	@ (8000438 <MX_TIM1_Init+0x150>)
 8000382:	f002 f8a0 	bl	80024c6 <HAL_TIM_PWM_Init>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800038c:	f000 f8ac 	bl	80004e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000390:	2300      	movs	r3, #0
 8000392:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000394:	2300      	movs	r3, #0
 8000396:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000398:	2300      	movs	r3, #0
 800039a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800039c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80003a0:	4619      	mov	r1, r3
 80003a2:	4825      	ldr	r0, [pc, #148]	@ (8000438 <MX_TIM1_Init+0x150>)
 80003a4:	f002 ffa4 	bl	80032f0 <HAL_TIMEx_MasterConfigSynchronization>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80003ae:	f000 f89b 	bl	80004e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003b2:	2360      	movs	r3, #96	@ 0x60
 80003b4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80003b6:	2300      	movs	r3, #0
 80003b8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003ba:	2300      	movs	r3, #0
 80003bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003be:	2300      	movs	r3, #0
 80003c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003c2:	2300      	movs	r3, #0
 80003c4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003c6:	2300      	movs	r3, #0
 80003c8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003ca:	2300      	movs	r3, #0
 80003cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003ce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80003d2:	2200      	movs	r2, #0
 80003d4:	4619      	mov	r1, r3
 80003d6:	4818      	ldr	r0, [pc, #96]	@ (8000438 <MX_TIM1_Init+0x150>)
 80003d8:	f002 f9c2 	bl	8002760 <HAL_TIM_PWM_ConfigChannel>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80003e2:	f000 f881 	bl	80004e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003e6:	2300      	movs	r3, #0
 80003e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003ea:	2300      	movs	r3, #0
 80003ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003ee:	2300      	movs	r3, #0
 80003f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003f2:	2300      	movs	r3, #0
 80003f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003f6:	2300      	movs	r3, #0
 80003f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000400:	2300      	movs	r3, #0
 8000402:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000404:	2300      	movs	r3, #0
 8000406:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000408:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800040c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800040e:	2300      	movs	r3, #0
 8000410:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000412:	2300      	movs	r3, #0
 8000414:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	4619      	mov	r1, r3
 800041a:	4807      	ldr	r0, [pc, #28]	@ (8000438 <MX_TIM1_Init+0x150>)
 800041c:	f002 ffd6 	bl	80033cc <HAL_TIMEx_ConfigBreakDeadTime>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000426:	f000 f85f 	bl	80004e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800042a:	4803      	ldr	r0, [pc, #12]	@ (8000438 <MX_TIM1_Init+0x150>)
 800042c:	f000 f8a6 	bl	800057c <HAL_TIM_MspPostInit>

}
 8000430:	bf00      	nop
 8000432:	3768      	adds	r7, #104	@ 0x68
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	20000028 	.word	0x20000028
 800043c:	40012c00 	.word	0x40012c00

08000440 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000444:	4b14      	ldr	r3, [pc, #80]	@ (8000498 <MX_USART2_UART_Init+0x58>)
 8000446:	4a15      	ldr	r2, [pc, #84]	@ (800049c <MX_USART2_UART_Init+0x5c>)
 8000448:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800044a:	4b13      	ldr	r3, [pc, #76]	@ (8000498 <MX_USART2_UART_Init+0x58>)
 800044c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000450:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000452:	4b11      	ldr	r3, [pc, #68]	@ (8000498 <MX_USART2_UART_Init+0x58>)
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000458:	4b0f      	ldr	r3, [pc, #60]	@ (8000498 <MX_USART2_UART_Init+0x58>)
 800045a:	2200      	movs	r2, #0
 800045c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800045e:	4b0e      	ldr	r3, [pc, #56]	@ (8000498 <MX_USART2_UART_Init+0x58>)
 8000460:	2200      	movs	r2, #0
 8000462:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000464:	4b0c      	ldr	r3, [pc, #48]	@ (8000498 <MX_USART2_UART_Init+0x58>)
 8000466:	220c      	movs	r2, #12
 8000468:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800046a:	4b0b      	ldr	r3, [pc, #44]	@ (8000498 <MX_USART2_UART_Init+0x58>)
 800046c:	2200      	movs	r2, #0
 800046e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000470:	4b09      	ldr	r3, [pc, #36]	@ (8000498 <MX_USART2_UART_Init+0x58>)
 8000472:	2200      	movs	r2, #0
 8000474:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000476:	4b08      	ldr	r3, [pc, #32]	@ (8000498 <MX_USART2_UART_Init+0x58>)
 8000478:	2200      	movs	r2, #0
 800047a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800047c:	4b06      	ldr	r3, [pc, #24]	@ (8000498 <MX_USART2_UART_Init+0x58>)
 800047e:	2200      	movs	r2, #0
 8000480:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000482:	4805      	ldr	r0, [pc, #20]	@ (8000498 <MX_USART2_UART_Init+0x58>)
 8000484:	f003 f81a 	bl	80034bc <HAL_UART_Init>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800048e:	f000 f82b 	bl	80004e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	20000074 	.word	0x20000074
 800049c:	40004400 	.word	0x40004400

080004a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004a6:	4b0f      	ldr	r3, [pc, #60]	@ (80004e4 <MX_GPIO_Init+0x44>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a0e      	ldr	r2, [pc, #56]	@ (80004e4 <MX_GPIO_Init+0x44>)
 80004ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004b0:	6153      	str	r3, [r2, #20]
 80004b2:	4b0c      	ldr	r3, [pc, #48]	@ (80004e4 <MX_GPIO_Init+0x44>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004be:	4b09      	ldr	r3, [pc, #36]	@ (80004e4 <MX_GPIO_Init+0x44>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a08      	ldr	r2, [pc, #32]	@ (80004e4 <MX_GPIO_Init+0x44>)
 80004c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004c8:	6153      	str	r3, [r2, #20]
 80004ca:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <MX_GPIO_Init+0x44>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004d2:	603b      	str	r3, [r7, #0]
 80004d4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	40021000 	.word	0x40021000

080004e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ec:	b672      	cpsid	i
}
 80004ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f0:	bf00      	nop
 80004f2:	e7fd      	b.n	80004f0 <Error_Handler+0x8>

080004f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000538 <HAL_MspInit+0x44>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000538 <HAL_MspInit+0x44>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	6193      	str	r3, [r2, #24]
 8000506:	4b0c      	ldr	r3, [pc, #48]	@ (8000538 <HAL_MspInit+0x44>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000512:	4b09      	ldr	r3, [pc, #36]	@ (8000538 <HAL_MspInit+0x44>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	4a08      	ldr	r2, [pc, #32]	@ (8000538 <HAL_MspInit+0x44>)
 8000518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800051c:	61d3      	str	r3, [r2, #28]
 800051e:	4b06      	ldr	r3, [pc, #24]	@ (8000538 <HAL_MspInit+0x44>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	40021000 	.word	0x40021000

0800053c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a0a      	ldr	r2, [pc, #40]	@ (8000574 <HAL_TIM_Base_MspInit+0x38>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d10b      	bne.n	8000566 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800054e:	4b0a      	ldr	r3, [pc, #40]	@ (8000578 <HAL_TIM_Base_MspInit+0x3c>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	4a09      	ldr	r2, [pc, #36]	@ (8000578 <HAL_TIM_Base_MspInit+0x3c>)
 8000554:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000558:	6193      	str	r3, [r2, #24]
 800055a:	4b07      	ldr	r3, [pc, #28]	@ (8000578 <HAL_TIM_Base_MspInit+0x3c>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000566:	bf00      	nop
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	40012c00 	.word	0x40012c00
 8000578:	40021000 	.word	0x40021000

0800057c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a12      	ldr	r2, [pc, #72]	@ (80005e4 <HAL_TIM_MspPostInit+0x68>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d11d      	bne.n	80005da <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	4b12      	ldr	r3, [pc, #72]	@ (80005e8 <HAL_TIM_MspPostInit+0x6c>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a11      	ldr	r2, [pc, #68]	@ (80005e8 <HAL_TIM_MspPostInit+0x6c>)
 80005a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005a8:	6153      	str	r3, [r2, #20]
 80005aa:	4b0f      	ldr	r3, [pc, #60]	@ (80005e8 <HAL_TIM_MspPostInit+0x6c>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = SERVO_Pin;
 80005b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005bc:	2302      	movs	r3, #2
 80005be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80005c8:	2306      	movs	r3, #6
 80005ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	4619      	mov	r1, r3
 80005d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d6:	f000 fa29 	bl	8000a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80005da:	bf00      	nop
 80005dc:	3720      	adds	r7, #32
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40012c00 	.word	0x40012c00
 80005e8:	40021000 	.word	0x40021000

080005ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	@ 0x28
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a18      	ldr	r2, [pc, #96]	@ (800066c <HAL_UART_MspInit+0x80>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d129      	bne.n	8000662 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800060e:	4b18      	ldr	r3, [pc, #96]	@ (8000670 <HAL_UART_MspInit+0x84>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	4a17      	ldr	r2, [pc, #92]	@ (8000670 <HAL_UART_MspInit+0x84>)
 8000614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000618:	61d3      	str	r3, [r2, #28]
 800061a:	4b15      	ldr	r3, [pc, #84]	@ (8000670 <HAL_UART_MspInit+0x84>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000622:	613b      	str	r3, [r7, #16]
 8000624:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <HAL_UART_MspInit+0x84>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	4a11      	ldr	r2, [pc, #68]	@ (8000670 <HAL_UART_MspInit+0x84>)
 800062c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000630:	6153      	str	r3, [r2, #20]
 8000632:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <HAL_UART_MspInit+0x84>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800063e:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000644:	2302      	movs	r3, #2
 8000646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800064c:	2303      	movs	r3, #3
 800064e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000650:	2307      	movs	r3, #7
 8000652:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4619      	mov	r1, r3
 800065a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065e:	f000 f9e5 	bl	8000a2c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000662:	bf00      	nop
 8000664:	3728      	adds	r7, #40	@ 0x28
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40004400 	.word	0x40004400
 8000670:	40021000 	.word	0x40021000

08000674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000678:	bf00      	nop
 800067a:	e7fd      	b.n	8000678 <NMI_Handler+0x4>

0800067c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000680:	bf00      	nop
 8000682:	e7fd      	b.n	8000680 <HardFault_Handler+0x4>

08000684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <MemManage_Handler+0x4>

0800068c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000690:	bf00      	nop
 8000692:	e7fd      	b.n	8000690 <BusFault_Handler+0x4>

08000694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <UsageFault_Handler+0x4>

0800069c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr

080006aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ca:	f000 f885 	bl	80007d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <SystemInit+0x20>)
 80006da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006de:	4a05      	ldr	r2, [pc, #20]	@ (80006f4 <SystemInit+0x20>)
 80006e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000730 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006fc:	f7ff ffea 	bl	80006d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000700:	480c      	ldr	r0, [pc, #48]	@ (8000734 <LoopForever+0x6>)
  ldr r1, =_edata
 8000702:	490d      	ldr	r1, [pc, #52]	@ (8000738 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000704:	4a0d      	ldr	r2, [pc, #52]	@ (800073c <LoopForever+0xe>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000708:	e002      	b.n	8000710 <LoopCopyDataInit>

0800070a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800070a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800070c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070e:	3304      	adds	r3, #4

08000710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000714:	d3f9      	bcc.n	800070a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000716:	4a0a      	ldr	r2, [pc, #40]	@ (8000740 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000718:	4c0a      	ldr	r4, [pc, #40]	@ (8000744 <LoopForever+0x16>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800071c:	e001      	b.n	8000722 <LoopFillZerobss>

0800071e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000720:	3204      	adds	r2, #4

08000722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000724:	d3fb      	bcc.n	800071e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000726:	f003 fa71 	bl	8003c0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800072a:	f7ff fd4d 	bl	80001c8 <main>

0800072e <LoopForever>:

LoopForever:
    b LoopForever
 800072e:	e7fe      	b.n	800072e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000730:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000738:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800073c:	08003cac 	.word	0x08003cac
  ldr r2, =_sbss
 8000740:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000744:	20000100 	.word	0x20000100

08000748 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000748:	e7fe      	b.n	8000748 <ADC1_2_IRQHandler>
	...

0800074c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000750:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <HAL_Init+0x28>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a07      	ldr	r2, [pc, #28]	@ (8000774 <HAL_Init+0x28>)
 8000756:	f043 0310 	orr.w	r3, r3, #16
 800075a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800075c:	2003      	movs	r0, #3
 800075e:	f000 f931 	bl	80009c4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000762:	2000      	movs	r0, #0
 8000764:	f000 f808 	bl	8000778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000768:	f7ff fec4 	bl	80004f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800076c:	2300      	movs	r3, #0
}
 800076e:	4618      	mov	r0, r3
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40022000 	.word	0x40022000

08000778 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000780:	4b12      	ldr	r3, [pc, #72]	@ (80007cc <HAL_InitTick+0x54>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <HAL_InitTick+0x58>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	4619      	mov	r1, r3
 800078a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800078e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000792:	fbb2 f3f3 	udiv	r3, r2, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f000 f93b 	bl	8000a12 <HAL_SYSTICK_Config>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007a2:	2301      	movs	r3, #1
 80007a4:	e00e      	b.n	80007c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2b0f      	cmp	r3, #15
 80007aa:	d80a      	bhi.n	80007c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ac:	2200      	movs	r2, #0
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	f04f 30ff 	mov.w	r0, #4294967295
 80007b4:	f000 f911 	bl	80009da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007b8:	4a06      	ldr	r2, [pc, #24]	@ (80007d4 <HAL_InitTick+0x5c>)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007be:	2300      	movs	r3, #0
 80007c0:	e000      	b.n	80007c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000000 	.word	0x20000000
 80007d0:	20000008 	.word	0x20000008
 80007d4:	20000004 	.word	0x20000004

080007d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <HAL_IncTick+0x20>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <HAL_IncTick+0x24>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4413      	add	r3, r2
 80007e8:	4a04      	ldr	r2, [pc, #16]	@ (80007fc <HAL_IncTick+0x24>)
 80007ea:	6013      	str	r3, [r2, #0]
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	20000008 	.word	0x20000008
 80007fc:	200000fc 	.word	0x200000fc

08000800 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  return uwTick;  
 8000804:	4b03      	ldr	r3, [pc, #12]	@ (8000814 <HAL_GetTick+0x14>)
 8000806:	681b      	ldr	r3, [r3, #0]
}
 8000808:	4618      	mov	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	200000fc 	.word	0x200000fc

08000818 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000820:	f7ff ffee 	bl	8000800 <HAL_GetTick>
 8000824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000830:	d005      	beq.n	800083e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000832:	4b0a      	ldr	r3, [pc, #40]	@ (800085c <HAL_Delay+0x44>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	461a      	mov	r2, r3
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	4413      	add	r3, r2
 800083c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800083e:	bf00      	nop
 8000840:	f7ff ffde 	bl	8000800 <HAL_GetTick>
 8000844:	4602      	mov	r2, r0
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	429a      	cmp	r2, r3
 800084e:	d8f7      	bhi.n	8000840 <HAL_Delay+0x28>
  {
  }
}
 8000850:	bf00      	nop
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000008 	.word	0x20000008

08000860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f003 0307 	and.w	r3, r3, #7
 800086e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000870:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000876:	68ba      	ldr	r2, [r7, #8]
 8000878:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800087c:	4013      	ands	r3, r2
 800087e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000888:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800088c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000892:	4a04      	ldr	r2, [pc, #16]	@ (80008a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	60d3      	str	r3, [r2, #12]
}
 8000898:	bf00      	nop
 800089a:	3714      	adds	r7, #20
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008ac:	4b04      	ldr	r3, [pc, #16]	@ (80008c0 <__NVIC_GetPriorityGrouping+0x18>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	0a1b      	lsrs	r3, r3, #8
 80008b2:	f003 0307 	and.w	r3, r3, #7
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	6039      	str	r1, [r7, #0]
 80008ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db0a      	blt.n	80008ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	490c      	ldr	r1, [pc, #48]	@ (8000910 <__NVIC_SetPriority+0x4c>)
 80008de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e2:	0112      	lsls	r2, r2, #4
 80008e4:	b2d2      	uxtb	r2, r2
 80008e6:	440b      	add	r3, r1
 80008e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008ec:	e00a      	b.n	8000904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4908      	ldr	r1, [pc, #32]	@ (8000914 <__NVIC_SetPriority+0x50>)
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	f003 030f 	and.w	r3, r3, #15
 80008fa:	3b04      	subs	r3, #4
 80008fc:	0112      	lsls	r2, r2, #4
 80008fe:	b2d2      	uxtb	r2, r2
 8000900:	440b      	add	r3, r1
 8000902:	761a      	strb	r2, [r3, #24]
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	e000e100 	.word	0xe000e100
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000918:	b480      	push	{r7}
 800091a:	b089      	sub	sp, #36	@ 0x24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	f1c3 0307 	rsb	r3, r3, #7
 8000932:	2b04      	cmp	r3, #4
 8000934:	bf28      	it	cs
 8000936:	2304      	movcs	r3, #4
 8000938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3304      	adds	r3, #4
 800093e:	2b06      	cmp	r3, #6
 8000940:	d902      	bls.n	8000948 <NVIC_EncodePriority+0x30>
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	3b03      	subs	r3, #3
 8000946:	e000      	b.n	800094a <NVIC_EncodePriority+0x32>
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800094c:	f04f 32ff 	mov.w	r2, #4294967295
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	43da      	mvns	r2, r3
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	401a      	ands	r2, r3
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000960:	f04f 31ff 	mov.w	r1, #4294967295
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	fa01 f303 	lsl.w	r3, r1, r3
 800096a:	43d9      	mvns	r1, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000970:	4313      	orrs	r3, r2
         );
}
 8000972:	4618      	mov	r0, r3
 8000974:	3724      	adds	r7, #36	@ 0x24
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
	...

08000980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3b01      	subs	r3, #1
 800098c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000990:	d301      	bcc.n	8000996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000992:	2301      	movs	r3, #1
 8000994:	e00f      	b.n	80009b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000996:	4a0a      	ldr	r2, [pc, #40]	@ (80009c0 <SysTick_Config+0x40>)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3b01      	subs	r3, #1
 800099c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800099e:	210f      	movs	r1, #15
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	f7ff ff8e 	bl	80008c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a8:	4b05      	ldr	r3, [pc, #20]	@ (80009c0 <SysTick_Config+0x40>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ae:	4b04      	ldr	r3, [pc, #16]	@ (80009c0 <SysTick_Config+0x40>)
 80009b0:	2207      	movs	r2, #7
 80009b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	e000e010 	.word	0xe000e010

080009c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f7ff ff47 	bl	8000860 <__NVIC_SetPriorityGrouping>
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b086      	sub	sp, #24
 80009de:	af00      	add	r7, sp, #0
 80009e0:	4603      	mov	r3, r0
 80009e2:	60b9      	str	r1, [r7, #8]
 80009e4:	607a      	str	r2, [r7, #4]
 80009e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009ec:	f7ff ff5c 	bl	80008a8 <__NVIC_GetPriorityGrouping>
 80009f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	68b9      	ldr	r1, [r7, #8]
 80009f6:	6978      	ldr	r0, [r7, #20]
 80009f8:	f7ff ff8e 	bl	8000918 <NVIC_EncodePriority>
 80009fc:	4602      	mov	r2, r0
 80009fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a02:	4611      	mov	r1, r2
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ff5d 	bl	80008c4 <__NVIC_SetPriority>
}
 8000a0a:	bf00      	nop
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f7ff ffb0 	bl	8000980 <SysTick_Config>
 8000a20:	4603      	mov	r3, r0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b087      	sub	sp, #28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a3a:	e14e      	b.n	8000cda <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	2101      	movs	r1, #1
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	fa01 f303 	lsl.w	r3, r1, r3
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f000 8140 	beq.w	8000cd4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f003 0303 	and.w	r3, r3, #3
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d005      	beq.n	8000a6c <HAL_GPIO_Init+0x40>
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f003 0303 	and.w	r3, r3, #3
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d130      	bne.n	8000ace <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	2203      	movs	r2, #3
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	68da      	ldr	r2, [r3, #12]
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	091b      	lsrs	r3, r3, #4
 8000ab8:	f003 0201 	and.w	r2, r3, #1
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f003 0303 	and.w	r3, r3, #3
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	d017      	beq.n	8000b0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43db      	mvns	r3, r3
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	4013      	ands	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	689a      	ldr	r2, [r3, #8]
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f003 0303 	and.w	r3, r3, #3
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d123      	bne.n	8000b5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	08da      	lsrs	r2, r3, #3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	3208      	adds	r2, #8
 8000b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	220f      	movs	r2, #15
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	43db      	mvns	r3, r3
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	691a      	ldr	r2, [r3, #16]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	f003 0307 	and.w	r3, r3, #7
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	08da      	lsrs	r2, r3, #3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3208      	adds	r2, #8
 8000b58:	6939      	ldr	r1, [r7, #16]
 8000b5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	2203      	movs	r2, #3
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4013      	ands	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f003 0203 	and.w	r2, r3, #3
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	f000 809a 	beq.w	8000cd4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba0:	4b55      	ldr	r3, [pc, #340]	@ (8000cf8 <HAL_GPIO_Init+0x2cc>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	4a54      	ldr	r2, [pc, #336]	@ (8000cf8 <HAL_GPIO_Init+0x2cc>)
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	6193      	str	r3, [r2, #24]
 8000bac:	4b52      	ldr	r3, [pc, #328]	@ (8000cf8 <HAL_GPIO_Init+0x2cc>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bb8:	4a50      	ldr	r2, [pc, #320]	@ (8000cfc <HAL_GPIO_Init+0x2d0>)
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	089b      	lsrs	r3, r3, #2
 8000bbe:	3302      	adds	r3, #2
 8000bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	f003 0303 	and.w	r3, r3, #3
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	220f      	movs	r2, #15
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000be2:	d013      	beq.n	8000c0c <HAL_GPIO_Init+0x1e0>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a46      	ldr	r2, [pc, #280]	@ (8000d00 <HAL_GPIO_Init+0x2d4>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d00d      	beq.n	8000c08 <HAL_GPIO_Init+0x1dc>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a45      	ldr	r2, [pc, #276]	@ (8000d04 <HAL_GPIO_Init+0x2d8>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d007      	beq.n	8000c04 <HAL_GPIO_Init+0x1d8>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a44      	ldr	r2, [pc, #272]	@ (8000d08 <HAL_GPIO_Init+0x2dc>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d101      	bne.n	8000c00 <HAL_GPIO_Init+0x1d4>
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	e006      	b.n	8000c0e <HAL_GPIO_Init+0x1e2>
 8000c00:	2305      	movs	r3, #5
 8000c02:	e004      	b.n	8000c0e <HAL_GPIO_Init+0x1e2>
 8000c04:	2302      	movs	r3, #2
 8000c06:	e002      	b.n	8000c0e <HAL_GPIO_Init+0x1e2>
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e000      	b.n	8000c0e <HAL_GPIO_Init+0x1e2>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	697a      	ldr	r2, [r7, #20]
 8000c10:	f002 0203 	and.w	r2, r2, #3
 8000c14:	0092      	lsls	r2, r2, #2
 8000c16:	4093      	lsls	r3, r2
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c1e:	4937      	ldr	r1, [pc, #220]	@ (8000cfc <HAL_GPIO_Init+0x2d0>)
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	089b      	lsrs	r3, r3, #2
 8000c24:	3302      	adds	r3, #2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c2c:	4b37      	ldr	r3, [pc, #220]	@ (8000d0c <HAL_GPIO_Init+0x2e0>)
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	43db      	mvns	r3, r3
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d003      	beq.n	8000c50 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c50:	4a2e      	ldr	r2, [pc, #184]	@ (8000d0c <HAL_GPIO_Init+0x2e0>)
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c56:	4b2d      	ldr	r3, [pc, #180]	@ (8000d0c <HAL_GPIO_Init+0x2e0>)
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	4013      	ands	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d003      	beq.n	8000c7a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c7a:	4a24      	ldr	r2, [pc, #144]	@ (8000d0c <HAL_GPIO_Init+0x2e0>)
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c80:	4b22      	ldr	r3, [pc, #136]	@ (8000d0c <HAL_GPIO_Init+0x2e0>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d003      	beq.n	8000ca4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ca4:	4a19      	ldr	r2, [pc, #100]	@ (8000d0c <HAL_GPIO_Init+0x2e0>)
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000caa:	4b18      	ldr	r3, [pc, #96]	@ (8000d0c <HAL_GPIO_Init+0x2e0>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cce:	4a0f      	ldr	r2, [pc, #60]	@ (8000d0c <HAL_GPIO_Init+0x2e0>)
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f47f aea9 	bne.w	8000a3c <HAL_GPIO_Init+0x10>
  }
}
 8000cea:	bf00      	nop
 8000cec:	bf00      	nop
 8000cee:	371c      	adds	r7, #28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40010000 	.word	0x40010000
 8000d00:	48000400 	.word	0x48000400
 8000d04:	48000800 	.word	0x48000800
 8000d08:	48000c00 	.word	0x48000c00
 8000d0c:	40010400 	.word	0x40010400

08000d10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d1c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d20:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d102      	bne.n	8000d36 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	f001 b823 	b.w	8001d7c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f000 817d 	beq.w	8001046 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d4c:	4bbc      	ldr	r3, [pc, #752]	@ (8001040 <HAL_RCC_OscConfig+0x330>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 030c 	and.w	r3, r3, #12
 8000d54:	2b04      	cmp	r3, #4
 8000d56:	d00c      	beq.n	8000d72 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d58:	4bb9      	ldr	r3, [pc, #740]	@ (8001040 <HAL_RCC_OscConfig+0x330>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 030c 	and.w	r3, r3, #12
 8000d60:	2b08      	cmp	r3, #8
 8000d62:	d15c      	bne.n	8000e1e <HAL_RCC_OscConfig+0x10e>
 8000d64:	4bb6      	ldr	r3, [pc, #728]	@ (8001040 <HAL_RCC_OscConfig+0x330>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d70:	d155      	bne.n	8000e1e <HAL_RCC_OscConfig+0x10e>
 8000d72:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d76:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d7a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000d7e:	fa93 f3a3 	rbit	r3, r3
 8000d82:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d86:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d8a:	fab3 f383 	clz	r3, r3
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	095b      	lsrs	r3, r3, #5
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d102      	bne.n	8000da4 <HAL_RCC_OscConfig+0x94>
 8000d9e:	4ba8      	ldr	r3, [pc, #672]	@ (8001040 <HAL_RCC_OscConfig+0x330>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	e015      	b.n	8000dd0 <HAL_RCC_OscConfig+0xc0>
 8000da4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000da8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dac:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000db0:	fa93 f3a3 	rbit	r3, r3
 8000db4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000db8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dbc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000dc0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000dc4:	fa93 f3a3 	rbit	r3, r3
 8000dc8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000dcc:	4b9c      	ldr	r3, [pc, #624]	@ (8001040 <HAL_RCC_OscConfig+0x330>)
 8000dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dd0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000dd4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000dd8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000ddc:	fa92 f2a2 	rbit	r2, r2
 8000de0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000de4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000de8:	fab2 f282 	clz	r2, r2
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	f042 0220 	orr.w	r2, r2, #32
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	f002 021f 	and.w	r2, r2, #31
 8000df8:	2101      	movs	r1, #1
 8000dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfe:	4013      	ands	r3, r2
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f000 811f 	beq.w	8001044 <HAL_RCC_OscConfig+0x334>
 8000e06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f040 8116 	bne.w	8001044 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	f000 bfaf 	b.w	8001d7c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e2e:	d106      	bne.n	8000e3e <HAL_RCC_OscConfig+0x12e>
 8000e30:	4b83      	ldr	r3, [pc, #524]	@ (8001040 <HAL_RCC_OscConfig+0x330>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a82      	ldr	r2, [pc, #520]	@ (8001040 <HAL_RCC_OscConfig+0x330>)
 8000e36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e3a:	6013      	str	r3, [r2, #0]
 8000e3c:	e036      	b.n	8000eac <HAL_RCC_OscConfig+0x19c>
 8000e3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d10c      	bne.n	8000e68 <HAL_RCC_OscConfig+0x158>
 8000e4e:	4b7c      	ldr	r3, [pc, #496]	@ (8001040 <HAL_RCC_OscConfig+0x330>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a7b      	ldr	r2, [pc, #492]	@ (8001040 <HAL_RCC_OscConfig+0x330>)
 8000e54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	4b79      	ldr	r3, [pc, #484]	@ (8001040 <HAL_RCC_OscConfig+0x330>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a78      	ldr	r2, [pc, #480]	@ (8001040 <HAL_RCC_OscConfig+0x330>)
 8000e60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	e021      	b.n	8000eac <HAL_RCC_OscConfig+0x19c>
 8000e68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e78:	d10c      	bne.n	8000e94 <HAL_RCC_OscConfig+0x184>
 8000e7a:	4b71      	ldr	r3, [pc, #452]	@ (8001040 <HAL_RCC_OscConfig+0x330>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a70      	ldr	r2, [pc, #448]	@ (8001040 <HAL_RCC_OscConfig+0x330>)
 8000e80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e84:	6013      	str	r3, [r2, #0]
 8000e86:	4b6e      	ldr	r3, [pc, #440]	@ (8001040 <HAL_RCC_OscConfig+0x330>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a6d      	ldr	r2, [pc, #436]	@ (8001040 <HAL_RCC_OscConfig+0x330>)
 8000e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e90:	6013      	str	r3, [r2, #0]
 8000e92:	e00b      	b.n	8000eac <HAL_RCC_OscConfig+0x19c>
 8000e94:	4b6a      	ldr	r3, [pc, #424]	@ (8001040 <HAL_RCC_OscConfig+0x330>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a69      	ldr	r2, [pc, #420]	@ (8001040 <HAL_RCC_OscConfig+0x330>)
 8000e9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	4b67      	ldr	r3, [pc, #412]	@ (8001040 <HAL_RCC_OscConfig+0x330>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a66      	ldr	r2, [pc, #408]	@ (8001040 <HAL_RCC_OscConfig+0x330>)
 8000ea6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eaa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000eac:	4b64      	ldr	r3, [pc, #400]	@ (8001040 <HAL_RCC_OscConfig+0x330>)
 8000eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eb0:	f023 020f 	bic.w	r2, r3, #15
 8000eb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000eb8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	495f      	ldr	r1, [pc, #380]	@ (8001040 <HAL_RCC_OscConfig+0x330>)
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ec6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000eca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d059      	beq.n	8000f8a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed6:	f7ff fc93 	bl	8000800 <HAL_GetTick>
 8000eda:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ede:	e00a      	b.n	8000ef6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ee0:	f7ff fc8e 	bl	8000800 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	2b64      	cmp	r3, #100	@ 0x64
 8000eee:	d902      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	f000 bf43 	b.w	8001d7c <HAL_RCC_OscConfig+0x106c>
 8000ef6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000efa:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000f02:	fa93 f3a3 	rbit	r3, r3
 8000f06:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8000f0a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f0e:	fab3 f383 	clz	r3, r3
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	095b      	lsrs	r3, r3, #5
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d102      	bne.n	8000f28 <HAL_RCC_OscConfig+0x218>
 8000f22:	4b47      	ldr	r3, [pc, #284]	@ (8001040 <HAL_RCC_OscConfig+0x330>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	e015      	b.n	8000f54 <HAL_RCC_OscConfig+0x244>
 8000f28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f2c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f30:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000f34:	fa93 f3a3 	rbit	r3, r3
 8000f38:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000f3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f40:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000f44:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000f48:	fa93 f3a3 	rbit	r3, r3
 8000f4c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000f50:	4b3b      	ldr	r3, [pc, #236]	@ (8001040 <HAL_RCC_OscConfig+0x330>)
 8000f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f54:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f58:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8000f5c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000f60:	fa92 f2a2 	rbit	r2, r2
 8000f64:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8000f68:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8000f6c:	fab2 f282 	clz	r2, r2
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	f042 0220 	orr.w	r2, r2, #32
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	f002 021f 	and.w	r2, r2, #31
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f82:	4013      	ands	r3, r2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0ab      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x1d0>
 8000f88:	e05d      	b.n	8001046 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8a:	f7ff fc39 	bl	8000800 <HAL_GetTick>
 8000f8e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f92:	e00a      	b.n	8000faa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f94:	f7ff fc34 	bl	8000800 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b64      	cmp	r3, #100	@ 0x64
 8000fa2:	d902      	bls.n	8000faa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	f000 bee9 	b.w	8001d7c <HAL_RCC_OscConfig+0x106c>
 8000faa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fae:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000fb6:	fa93 f3a3 	rbit	r3, r3
 8000fba:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8000fbe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fc2:	fab3 f383 	clz	r3, r3
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	095b      	lsrs	r3, r3, #5
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d102      	bne.n	8000fdc <HAL_RCC_OscConfig+0x2cc>
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001040 <HAL_RCC_OscConfig+0x330>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	e015      	b.n	8001008 <HAL_RCC_OscConfig+0x2f8>
 8000fdc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fe0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000fe8:	fa93 f3a3 	rbit	r3, r3
 8000fec:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000ff0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ff4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000ff8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8000ffc:	fa93 f3a3 	rbit	r3, r3
 8001000:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001004:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <HAL_RCC_OscConfig+0x330>)
 8001006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001008:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800100c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001010:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001014:	fa92 f2a2 	rbit	r2, r2
 8001018:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800101c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001020:	fab2 f282 	clz	r2, r2
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	f042 0220 	orr.w	r2, r2, #32
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	f002 021f 	and.w	r2, r2, #31
 8001030:	2101      	movs	r1, #1
 8001032:	fa01 f202 	lsl.w	r2, r1, r2
 8001036:	4013      	ands	r3, r2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1ab      	bne.n	8000f94 <HAL_RCC_OscConfig+0x284>
 800103c:	e003      	b.n	8001046 <HAL_RCC_OscConfig+0x336>
 800103e:	bf00      	nop
 8001040:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001046:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800104a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 817d 	beq.w	8001356 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800105c:	4ba6      	ldr	r3, [pc, #664]	@ (80012f8 <HAL_RCC_OscConfig+0x5e8>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 030c 	and.w	r3, r3, #12
 8001064:	2b00      	cmp	r3, #0
 8001066:	d00b      	beq.n	8001080 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001068:	4ba3      	ldr	r3, [pc, #652]	@ (80012f8 <HAL_RCC_OscConfig+0x5e8>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 030c 	and.w	r3, r3, #12
 8001070:	2b08      	cmp	r3, #8
 8001072:	d172      	bne.n	800115a <HAL_RCC_OscConfig+0x44a>
 8001074:	4ba0      	ldr	r3, [pc, #640]	@ (80012f8 <HAL_RCC_OscConfig+0x5e8>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d16c      	bne.n	800115a <HAL_RCC_OscConfig+0x44a>
 8001080:	2302      	movs	r3, #2
 8001082:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001086:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800108a:	fa93 f3a3 	rbit	r3, r3
 800108e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001092:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001096:	fab3 f383 	clz	r3, r3
 800109a:	b2db      	uxtb	r3, r3
 800109c:	095b      	lsrs	r3, r3, #5
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d102      	bne.n	80010b0 <HAL_RCC_OscConfig+0x3a0>
 80010aa:	4b93      	ldr	r3, [pc, #588]	@ (80012f8 <HAL_RCC_OscConfig+0x5e8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	e013      	b.n	80010d8 <HAL_RCC_OscConfig+0x3c8>
 80010b0:	2302      	movs	r3, #2
 80010b2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80010ba:	fa93 f3a3 	rbit	r3, r3
 80010be:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80010c2:	2302      	movs	r3, #2
 80010c4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80010c8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80010cc:	fa93 f3a3 	rbit	r3, r3
 80010d0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80010d4:	4b88      	ldr	r3, [pc, #544]	@ (80012f8 <HAL_RCC_OscConfig+0x5e8>)
 80010d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d8:	2202      	movs	r2, #2
 80010da:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80010de:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80010e2:	fa92 f2a2 	rbit	r2, r2
 80010e6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80010ea:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80010ee:	fab2 f282 	clz	r2, r2
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	f042 0220 	orr.w	r2, r2, #32
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	f002 021f 	and.w	r2, r2, #31
 80010fe:	2101      	movs	r1, #1
 8001100:	fa01 f202 	lsl.w	r2, r1, r2
 8001104:	4013      	ands	r3, r2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00a      	beq.n	8001120 <HAL_RCC_OscConfig+0x410>
 800110a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800110e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d002      	beq.n	8001120 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	f000 be2e 	b.w	8001d7c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001120:	4b75      	ldr	r3, [pc, #468]	@ (80012f8 <HAL_RCC_OscConfig+0x5e8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800112c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	21f8      	movs	r1, #248	@ 0xf8
 8001136:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800113e:	fa91 f1a1 	rbit	r1, r1
 8001142:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001146:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800114a:	fab1 f181 	clz	r1, r1
 800114e:	b2c9      	uxtb	r1, r1
 8001150:	408b      	lsls	r3, r1
 8001152:	4969      	ldr	r1, [pc, #420]	@ (80012f8 <HAL_RCC_OscConfig+0x5e8>)
 8001154:	4313      	orrs	r3, r2
 8001156:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001158:	e0fd      	b.n	8001356 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800115a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800115e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	2b00      	cmp	r3, #0
 8001168:	f000 8088 	beq.w	800127c <HAL_RCC_OscConfig+0x56c>
 800116c:	2301      	movs	r3, #1
 800116e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001172:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001176:	fa93 f3a3 	rbit	r3, r3
 800117a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800117e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001182:	fab3 f383 	clz	r3, r3
 8001186:	b2db      	uxtb	r3, r3
 8001188:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800118c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	461a      	mov	r2, r3
 8001194:	2301      	movs	r3, #1
 8001196:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001198:	f7ff fb32 	bl	8000800 <HAL_GetTick>
 800119c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a0:	e00a      	b.n	80011b8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011a2:	f7ff fb2d 	bl	8000800 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d902      	bls.n	80011b8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	f000 bde2 	b.w	8001d7c <HAL_RCC_OscConfig+0x106c>
 80011b8:	2302      	movs	r3, #2
 80011ba:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011be:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80011c2:	fa93 f3a3 	rbit	r3, r3
 80011c6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80011ca:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ce:	fab3 f383 	clz	r3, r3
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	095b      	lsrs	r3, r3, #5
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d102      	bne.n	80011e8 <HAL_RCC_OscConfig+0x4d8>
 80011e2:	4b45      	ldr	r3, [pc, #276]	@ (80012f8 <HAL_RCC_OscConfig+0x5e8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	e013      	b.n	8001210 <HAL_RCC_OscConfig+0x500>
 80011e8:	2302      	movs	r3, #2
 80011ea:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ee:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80011f2:	fa93 f3a3 	rbit	r3, r3
 80011f6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80011fa:	2302      	movs	r3, #2
 80011fc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001200:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001204:	fa93 f3a3 	rbit	r3, r3
 8001208:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800120c:	4b3a      	ldr	r3, [pc, #232]	@ (80012f8 <HAL_RCC_OscConfig+0x5e8>)
 800120e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001210:	2202      	movs	r2, #2
 8001212:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001216:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800121a:	fa92 f2a2 	rbit	r2, r2
 800121e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001222:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001226:	fab2 f282 	clz	r2, r2
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	f042 0220 	orr.w	r2, r2, #32
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	f002 021f 	and.w	r2, r2, #31
 8001236:	2101      	movs	r1, #1
 8001238:	fa01 f202 	lsl.w	r2, r1, r2
 800123c:	4013      	ands	r3, r2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0af      	beq.n	80011a2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001242:	4b2d      	ldr	r3, [pc, #180]	@ (80012f8 <HAL_RCC_OscConfig+0x5e8>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800124a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800124e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	21f8      	movs	r1, #248	@ 0xf8
 8001258:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001260:	fa91 f1a1 	rbit	r1, r1
 8001264:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001268:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800126c:	fab1 f181 	clz	r1, r1
 8001270:	b2c9      	uxtb	r1, r1
 8001272:	408b      	lsls	r3, r1
 8001274:	4920      	ldr	r1, [pc, #128]	@ (80012f8 <HAL_RCC_OscConfig+0x5e8>)
 8001276:	4313      	orrs	r3, r2
 8001278:	600b      	str	r3, [r1, #0]
 800127a:	e06c      	b.n	8001356 <HAL_RCC_OscConfig+0x646>
 800127c:	2301      	movs	r3, #1
 800127e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001282:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001286:	fa93 f3a3 	rbit	r3, r3
 800128a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800128e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001292:	fab3 f383 	clz	r3, r3
 8001296:	b2db      	uxtb	r3, r3
 8001298:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800129c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	461a      	mov	r2, r3
 80012a4:	2300      	movs	r3, #0
 80012a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7ff faaa 	bl	8000800 <HAL_GetTick>
 80012ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b0:	e00a      	b.n	80012c8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b2:	f7ff faa5 	bl	8000800 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d902      	bls.n	80012c8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	f000 bd5a 	b.w	8001d7c <HAL_RCC_OscConfig+0x106c>
 80012c8:	2302      	movs	r3, #2
 80012ca:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80012d2:	fa93 f3a3 	rbit	r3, r3
 80012d6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80012da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012de:	fab3 f383 	clz	r3, r3
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	095b      	lsrs	r3, r3, #5
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d104      	bne.n	80012fc <HAL_RCC_OscConfig+0x5ec>
 80012f2:	4b01      	ldr	r3, [pc, #4]	@ (80012f8 <HAL_RCC_OscConfig+0x5e8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	e015      	b.n	8001324 <HAL_RCC_OscConfig+0x614>
 80012f8:	40021000 	.word	0x40021000
 80012fc:	2302      	movs	r3, #2
 80012fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001302:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001306:	fa93 f3a3 	rbit	r3, r3
 800130a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800130e:	2302      	movs	r3, #2
 8001310:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001314:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001318:	fa93 f3a3 	rbit	r3, r3
 800131c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001320:	4bc8      	ldr	r3, [pc, #800]	@ (8001644 <HAL_RCC_OscConfig+0x934>)
 8001322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001324:	2202      	movs	r2, #2
 8001326:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800132a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800132e:	fa92 f2a2 	rbit	r2, r2
 8001332:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001336:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800133a:	fab2 f282 	clz	r2, r2
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	f042 0220 	orr.w	r2, r2, #32
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	f002 021f 	and.w	r2, r2, #31
 800134a:	2101      	movs	r1, #1
 800134c:	fa01 f202 	lsl.w	r2, r1, r2
 8001350:	4013      	ands	r3, r2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1ad      	bne.n	80012b2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001356:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800135a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0308 	and.w	r3, r3, #8
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 8110 	beq.w	800158c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800136c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001370:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d079      	beq.n	8001470 <HAL_RCC_OscConfig+0x760>
 800137c:	2301      	movs	r3, #1
 800137e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001382:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001386:	fa93 f3a3 	rbit	r3, r3
 800138a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800138e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001392:	fab3 f383 	clz	r3, r3
 8001396:	b2db      	uxtb	r3, r3
 8001398:	461a      	mov	r2, r3
 800139a:	4bab      	ldr	r3, [pc, #684]	@ (8001648 <HAL_RCC_OscConfig+0x938>)
 800139c:	4413      	add	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	461a      	mov	r2, r3
 80013a2:	2301      	movs	r3, #1
 80013a4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a6:	f7ff fa2b 	bl	8000800 <HAL_GetTick>
 80013aa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ae:	e00a      	b.n	80013c6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b0:	f7ff fa26 	bl	8000800 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d902      	bls.n	80013c6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	f000 bcdb 	b.w	8001d7c <HAL_RCC_OscConfig+0x106c>
 80013c6:	2302      	movs	r3, #2
 80013c8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80013d0:	fa93 f3a3 	rbit	r3, r3
 80013d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80013d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013dc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80013e0:	2202      	movs	r2, #2
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013e8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	fa93 f2a3 	rbit	r2, r3
 80013f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001400:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001404:	2202      	movs	r2, #2
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800140c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	fa93 f2a3 	rbit	r2, r3
 8001416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800141a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800141e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001420:	4b88      	ldr	r3, [pc, #544]	@ (8001644 <HAL_RCC_OscConfig+0x934>)
 8001422:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001424:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001428:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800142c:	2102      	movs	r1, #2
 800142e:	6019      	str	r1, [r3, #0]
 8001430:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001434:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	fa93 f1a3 	rbit	r1, r3
 800143e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001442:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001446:	6019      	str	r1, [r3, #0]
  return result;
 8001448:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800144c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	fab3 f383 	clz	r3, r3
 8001456:	b2db      	uxtb	r3, r3
 8001458:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800145c:	b2db      	uxtb	r3, r3
 800145e:	f003 031f 	and.w	r3, r3, #31
 8001462:	2101      	movs	r1, #1
 8001464:	fa01 f303 	lsl.w	r3, r1, r3
 8001468:	4013      	ands	r3, r2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0a0      	beq.n	80013b0 <HAL_RCC_OscConfig+0x6a0>
 800146e:	e08d      	b.n	800158c <HAL_RCC_OscConfig+0x87c>
 8001470:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001474:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001478:	2201      	movs	r2, #1
 800147a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001480:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	fa93 f2a3 	rbit	r2, r3
 800148a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800148e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001492:	601a      	str	r2, [r3, #0]
  return result;
 8001494:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001498:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800149c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800149e:	fab3 f383 	clz	r3, r3
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b68      	ldr	r3, [pc, #416]	@ (8001648 <HAL_RCC_OscConfig+0x938>)
 80014a8:	4413      	add	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	461a      	mov	r2, r3
 80014ae:	2300      	movs	r3, #0
 80014b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b2:	f7ff f9a5 	bl	8000800 <HAL_GetTick>
 80014b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ba:	e00a      	b.n	80014d2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014bc:	f7ff f9a0 	bl	8000800 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d902      	bls.n	80014d2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	f000 bc55 	b.w	8001d7c <HAL_RCC_OscConfig+0x106c>
 80014d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014d6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014da:	2202      	movs	r2, #2
 80014dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014e2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	fa93 f2a3 	rbit	r2, r3
 80014ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014f0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014fa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80014fe:	2202      	movs	r2, #2
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001506:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	fa93 f2a3 	rbit	r2, r3
 8001510:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001514:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800151e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001522:	2202      	movs	r2, #2
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800152a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	fa93 f2a3 	rbit	r2, r3
 8001534:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001538:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800153c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800153e:	4b41      	ldr	r3, [pc, #260]	@ (8001644 <HAL_RCC_OscConfig+0x934>)
 8001540:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001546:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800154a:	2102      	movs	r1, #2
 800154c:	6019      	str	r1, [r3, #0]
 800154e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001552:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	fa93 f1a3 	rbit	r1, r3
 800155c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001560:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001564:	6019      	str	r1, [r3, #0]
  return result;
 8001566:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800156a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	fab3 f383 	clz	r3, r3
 8001574:	b2db      	uxtb	r3, r3
 8001576:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800157a:	b2db      	uxtb	r3, r3
 800157c:	f003 031f 	and.w	r3, r3, #31
 8001580:	2101      	movs	r1, #1
 8001582:	fa01 f303 	lsl.w	r3, r1, r3
 8001586:	4013      	ands	r3, r2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d197      	bne.n	80014bc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800158c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001590:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 81a1 	beq.w	80018e4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015a8:	4b26      	ldr	r3, [pc, #152]	@ (8001644 <HAL_RCC_OscConfig+0x934>)
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d116      	bne.n	80015e2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015b4:	4b23      	ldr	r3, [pc, #140]	@ (8001644 <HAL_RCC_OscConfig+0x934>)
 80015b6:	69db      	ldr	r3, [r3, #28]
 80015b8:	4a22      	ldr	r2, [pc, #136]	@ (8001644 <HAL_RCC_OscConfig+0x934>)
 80015ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015be:	61d3      	str	r3, [r2, #28]
 80015c0:	4b20      	ldr	r3, [pc, #128]	@ (8001644 <HAL_RCC_OscConfig+0x934>)
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80015c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015cc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015d6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80015da:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80015dc:	2301      	movs	r3, #1
 80015de:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e2:	4b1a      	ldr	r3, [pc, #104]	@ (800164c <HAL_RCC_OscConfig+0x93c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d11a      	bne.n	8001624 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ee:	4b17      	ldr	r3, [pc, #92]	@ (800164c <HAL_RCC_OscConfig+0x93c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a16      	ldr	r2, [pc, #88]	@ (800164c <HAL_RCC_OscConfig+0x93c>)
 80015f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015fa:	f7ff f901 	bl	8000800 <HAL_GetTick>
 80015fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001602:	e009      	b.n	8001618 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001604:	f7ff f8fc 	bl	8000800 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b64      	cmp	r3, #100	@ 0x64
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e3b1      	b.n	8001d7c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001618:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <HAL_RCC_OscConfig+0x93c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0ef      	beq.n	8001604 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001628:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d10d      	bne.n	8001650 <HAL_RCC_OscConfig+0x940>
 8001634:	4b03      	ldr	r3, [pc, #12]	@ (8001644 <HAL_RCC_OscConfig+0x934>)
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4a02      	ldr	r2, [pc, #8]	@ (8001644 <HAL_RCC_OscConfig+0x934>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6213      	str	r3, [r2, #32]
 8001640:	e03c      	b.n	80016bc <HAL_RCC_OscConfig+0x9ac>
 8001642:	bf00      	nop
 8001644:	40021000 	.word	0x40021000
 8001648:	10908120 	.word	0x10908120
 800164c:	40007000 	.word	0x40007000
 8001650:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001654:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d10c      	bne.n	800167a <HAL_RCC_OscConfig+0x96a>
 8001660:	4bc1      	ldr	r3, [pc, #772]	@ (8001968 <HAL_RCC_OscConfig+0xc58>)
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	4ac0      	ldr	r2, [pc, #768]	@ (8001968 <HAL_RCC_OscConfig+0xc58>)
 8001666:	f023 0301 	bic.w	r3, r3, #1
 800166a:	6213      	str	r3, [r2, #32]
 800166c:	4bbe      	ldr	r3, [pc, #760]	@ (8001968 <HAL_RCC_OscConfig+0xc58>)
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	4abd      	ldr	r2, [pc, #756]	@ (8001968 <HAL_RCC_OscConfig+0xc58>)
 8001672:	f023 0304 	bic.w	r3, r3, #4
 8001676:	6213      	str	r3, [r2, #32]
 8001678:	e020      	b.n	80016bc <HAL_RCC_OscConfig+0x9ac>
 800167a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800167e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	2b05      	cmp	r3, #5
 8001688:	d10c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x994>
 800168a:	4bb7      	ldr	r3, [pc, #732]	@ (8001968 <HAL_RCC_OscConfig+0xc58>)
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	4ab6      	ldr	r2, [pc, #728]	@ (8001968 <HAL_RCC_OscConfig+0xc58>)
 8001690:	f043 0304 	orr.w	r3, r3, #4
 8001694:	6213      	str	r3, [r2, #32]
 8001696:	4bb4      	ldr	r3, [pc, #720]	@ (8001968 <HAL_RCC_OscConfig+0xc58>)
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	4ab3      	ldr	r2, [pc, #716]	@ (8001968 <HAL_RCC_OscConfig+0xc58>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6213      	str	r3, [r2, #32]
 80016a2:	e00b      	b.n	80016bc <HAL_RCC_OscConfig+0x9ac>
 80016a4:	4bb0      	ldr	r3, [pc, #704]	@ (8001968 <HAL_RCC_OscConfig+0xc58>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	4aaf      	ldr	r2, [pc, #700]	@ (8001968 <HAL_RCC_OscConfig+0xc58>)
 80016aa:	f023 0301 	bic.w	r3, r3, #1
 80016ae:	6213      	str	r3, [r2, #32]
 80016b0:	4bad      	ldr	r3, [pc, #692]	@ (8001968 <HAL_RCC_OscConfig+0xc58>)
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	4aac      	ldr	r2, [pc, #688]	@ (8001968 <HAL_RCC_OscConfig+0xc58>)
 80016b6:	f023 0304 	bic.w	r3, r3, #4
 80016ba:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 8081 	beq.w	80017d0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ce:	f7ff f897 	bl	8000800 <HAL_GetTick>
 80016d2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d6:	e00b      	b.n	80016f0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d8:	f7ff f892 	bl	8000800 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e345      	b.n	8001d7c <HAL_RCC_OscConfig+0x106c>
 80016f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016f4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80016f8:	2202      	movs	r2, #2
 80016fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001700:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	fa93 f2a3 	rbit	r2, r3
 800170a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800170e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001718:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800171c:	2202      	movs	r2, #2
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001724:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	fa93 f2a3 	rbit	r2, r3
 800172e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001732:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001736:	601a      	str	r2, [r3, #0]
  return result;
 8001738:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800173c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001740:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001742:	fab3 f383 	clz	r3, r3
 8001746:	b2db      	uxtb	r3, r3
 8001748:	095b      	lsrs	r3, r3, #5
 800174a:	b2db      	uxtb	r3, r3
 800174c:	f043 0302 	orr.w	r3, r3, #2
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d102      	bne.n	800175c <HAL_RCC_OscConfig+0xa4c>
 8001756:	4b84      	ldr	r3, [pc, #528]	@ (8001968 <HAL_RCC_OscConfig+0xc58>)
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	e013      	b.n	8001784 <HAL_RCC_OscConfig+0xa74>
 800175c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001760:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001764:	2202      	movs	r2, #2
 8001766:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800176c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	fa93 f2a3 	rbit	r2, r3
 8001776:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800177a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	4b79      	ldr	r3, [pc, #484]	@ (8001968 <HAL_RCC_OscConfig+0xc58>)
 8001782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001784:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001788:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800178c:	2102      	movs	r1, #2
 800178e:	6011      	str	r1, [r2, #0]
 8001790:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001794:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001798:	6812      	ldr	r2, [r2, #0]
 800179a:	fa92 f1a2 	rbit	r1, r2
 800179e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80017a2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80017a6:	6011      	str	r1, [r2, #0]
  return result;
 80017a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80017ac:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80017b0:	6812      	ldr	r2, [r2, #0]
 80017b2:	fab2 f282 	clz	r2, r2
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	f002 021f 	and.w	r2, r2, #31
 80017c2:	2101      	movs	r1, #1
 80017c4:	fa01 f202 	lsl.w	r2, r1, r2
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d084      	beq.n	80016d8 <HAL_RCC_OscConfig+0x9c8>
 80017ce:	e07f      	b.n	80018d0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d0:	f7ff f816 	bl	8000800 <HAL_GetTick>
 80017d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d8:	e00b      	b.n	80017f2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017da:	f7ff f811 	bl	8000800 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e2c4      	b.n	8001d7c <HAL_RCC_OscConfig+0x106c>
 80017f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017f6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80017fa:	2202      	movs	r2, #2
 80017fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001802:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	fa93 f2a3 	rbit	r2, r3
 800180c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001810:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800181a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800181e:	2202      	movs	r2, #2
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001826:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	fa93 f2a3 	rbit	r2, r3
 8001830:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001834:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001838:	601a      	str	r2, [r3, #0]
  return result;
 800183a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800183e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001842:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001844:	fab3 f383 	clz	r3, r3
 8001848:	b2db      	uxtb	r3, r3
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	b2db      	uxtb	r3, r3
 800184e:	f043 0302 	orr.w	r3, r3, #2
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d102      	bne.n	800185e <HAL_RCC_OscConfig+0xb4e>
 8001858:	4b43      	ldr	r3, [pc, #268]	@ (8001968 <HAL_RCC_OscConfig+0xc58>)
 800185a:	6a1b      	ldr	r3, [r3, #32]
 800185c:	e013      	b.n	8001886 <HAL_RCC_OscConfig+0xb76>
 800185e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001862:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001866:	2202      	movs	r2, #2
 8001868:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800186e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	fa93 f2a3 	rbit	r2, r3
 8001878:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800187c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	4b39      	ldr	r3, [pc, #228]	@ (8001968 <HAL_RCC_OscConfig+0xc58>)
 8001884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001886:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800188a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800188e:	2102      	movs	r1, #2
 8001890:	6011      	str	r1, [r2, #0]
 8001892:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001896:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	fa92 f1a2 	rbit	r1, r2
 80018a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018a4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80018a8:	6011      	str	r1, [r2, #0]
  return result;
 80018aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018ae:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	fab2 f282 	clz	r2, r2
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	f002 021f 	and.w	r2, r2, #31
 80018c4:	2101      	movs	r1, #1
 80018c6:	fa01 f202 	lsl.w	r2, r1, r2
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d184      	bne.n	80017da <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018d0:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d105      	bne.n	80018e4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d8:	4b23      	ldr	r3, [pc, #140]	@ (8001968 <HAL_RCC_OscConfig+0xc58>)
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	4a22      	ldr	r2, [pc, #136]	@ (8001968 <HAL_RCC_OscConfig+0xc58>)
 80018de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018e2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 8242 	beq.w	8001d7a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001968 <HAL_RCC_OscConfig+0xc58>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	2b08      	cmp	r3, #8
 8001900:	f000 8213 	beq.w	8001d2a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001904:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001908:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	2b02      	cmp	r3, #2
 8001912:	f040 8162 	bne.w	8001bda <HAL_RCC_OscConfig+0xeca>
 8001916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800191a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800191e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001922:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001928:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	fa93 f2a3 	rbit	r2, r3
 8001932:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001936:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800193a:	601a      	str	r2, [r3, #0]
  return result;
 800193c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001940:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001944:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001946:	fab3 f383 	clz	r3, r3
 800194a:	b2db      	uxtb	r3, r3
 800194c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001950:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	461a      	mov	r2, r3
 8001958:	2300      	movs	r3, #0
 800195a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7fe ff50 	bl	8000800 <HAL_GetTick>
 8001960:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001964:	e00c      	b.n	8001980 <HAL_RCC_OscConfig+0xc70>
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800196c:	f7fe ff48 	bl	8000800 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e1fd      	b.n	8001d7c <HAL_RCC_OscConfig+0x106c>
 8001980:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001984:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001988:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800198c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001992:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	fa93 f2a3 	rbit	r2, r3
 800199c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019a0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80019a4:	601a      	str	r2, [r3, #0]
  return result;
 80019a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019aa:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80019ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b0:	fab3 f383 	clz	r3, r3
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	095b      	lsrs	r3, r3, #5
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d102      	bne.n	80019ca <HAL_RCC_OscConfig+0xcba>
 80019c4:	4bb0      	ldr	r3, [pc, #704]	@ (8001c88 <HAL_RCC_OscConfig+0xf78>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	e027      	b.n	8001a1a <HAL_RCC_OscConfig+0xd0a>
 80019ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ce:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80019d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019dc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	fa93 f2a3 	rbit	r2, r3
 80019e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ea:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80019f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a02:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	fa93 f2a3 	rbit	r2, r3
 8001a0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a10:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	4b9c      	ldr	r3, [pc, #624]	@ (8001c88 <HAL_RCC_OscConfig+0xf78>)
 8001a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a1e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001a22:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001a26:	6011      	str	r1, [r2, #0]
 8001a28:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a2c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001a30:	6812      	ldr	r2, [r2, #0]
 8001a32:	fa92 f1a2 	rbit	r1, r2
 8001a36:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a3a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001a3e:	6011      	str	r1, [r2, #0]
  return result;
 8001a40:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a44:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	fab2 f282 	clz	r2, r2
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	f042 0220 	orr.w	r2, r2, #32
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	f002 021f 	and.w	r2, r2, #31
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a60:	4013      	ands	r3, r2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d182      	bne.n	800196c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a66:	4b88      	ldr	r3, [pc, #544]	@ (8001c88 <HAL_RCC_OscConfig+0xf78>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001a7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	430b      	orrs	r3, r1
 8001a88:	497f      	ldr	r1, [pc, #508]	@ (8001c88 <HAL_RCC_OscConfig+0xf78>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	604b      	str	r3, [r1, #4]
 8001a8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a92:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001a96:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	fa93 f2a3 	rbit	r2, r3
 8001aaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aae:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001ab2:	601a      	str	r2, [r3, #0]
  return result;
 8001ab4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001abc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001abe:	fab3 f383 	clz	r3, r3
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ac8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	461a      	mov	r2, r3
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7fe fe94 	bl	8000800 <HAL_GetTick>
 8001ad8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001adc:	e009      	b.n	8001af2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ade:	f7fe fe8f 	bl	8000800 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e144      	b.n	8001d7c <HAL_RCC_OscConfig+0x106c>
 8001af2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001afa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001afe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b04:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	fa93 f2a3 	rbit	r2, r3
 8001b0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b12:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b16:	601a      	str	r2, [r3, #0]
  return result;
 8001b18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b1c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b20:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b22:	fab3 f383 	clz	r3, r3
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	095b      	lsrs	r3, r3, #5
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d102      	bne.n	8001b3c <HAL_RCC_OscConfig+0xe2c>
 8001b36:	4b54      	ldr	r3, [pc, #336]	@ (8001c88 <HAL_RCC_OscConfig+0xf78>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	e027      	b.n	8001b8c <HAL_RCC_OscConfig+0xe7c>
 8001b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b40:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001b44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b4e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	fa93 f2a3 	rbit	r2, r3
 8001b58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b5c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b66:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001b6a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b74:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	fa93 f2a3 	rbit	r2, r3
 8001b7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b82:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	4b3f      	ldr	r3, [pc, #252]	@ (8001c88 <HAL_RCC_OscConfig+0xf78>)
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b90:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001b94:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001b98:	6011      	str	r1, [r2, #0]
 8001b9a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b9e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	fa92 f1a2 	rbit	r1, r2
 8001ba8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bac:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001bb0:	6011      	str	r1, [r2, #0]
  return result;
 8001bb2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bb6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001bba:	6812      	ldr	r2, [r2, #0]
 8001bbc:	fab2 f282 	clz	r2, r2
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	f042 0220 	orr.w	r2, r2, #32
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	f002 021f 	and.w	r2, r2, #31
 8001bcc:	2101      	movs	r1, #1
 8001bce:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d082      	beq.n	8001ade <HAL_RCC_OscConfig+0xdce>
 8001bd8:	e0cf      	b.n	8001d7a <HAL_RCC_OscConfig+0x106a>
 8001bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bde:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001be2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001be6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bec:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	fa93 f2a3 	rbit	r2, r3
 8001bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bfa:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001bfe:	601a      	str	r2, [r3, #0]
  return result;
 8001c00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c04:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001c08:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0a:	fab3 f383 	clz	r3, r3
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c14:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7fe fdee 	bl	8000800 <HAL_GetTick>
 8001c24:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c28:	e009      	b.n	8001c3e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c2a:	f7fe fde9 	bl	8000800 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e09e      	b.n	8001d7c <HAL_RCC_OscConfig+0x106c>
 8001c3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c42:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c46:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c50:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	fa93 f2a3 	rbit	r2, r3
 8001c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c5e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001c62:	601a      	str	r2, [r3, #0]
  return result;
 8001c64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c68:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001c6c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c6e:	fab3 f383 	clz	r3, r3
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	095b      	lsrs	r3, r3, #5
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d104      	bne.n	8001c8c <HAL_RCC_OscConfig+0xf7c>
 8001c82:	4b01      	ldr	r3, [pc, #4]	@ (8001c88 <HAL_RCC_OscConfig+0xf78>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	e029      	b.n	8001cdc <HAL_RCC_OscConfig+0xfcc>
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c90:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001c94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c9e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	fa93 f2a3 	rbit	r2, r3
 8001ca8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cac:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001cba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	fa93 f2a3 	rbit	r2, r3
 8001cce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d88 <HAL_RCC_OscConfig+0x1078>)
 8001cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cdc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ce0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001ce4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001ce8:	6011      	str	r1, [r2, #0]
 8001cea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cee:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	fa92 f1a2 	rbit	r1, r2
 8001cf8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cfc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001d00:	6011      	str	r1, [r2, #0]
  return result;
 8001d02:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d06:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	fab2 f282 	clz	r2, r2
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	f042 0220 	orr.w	r2, r2, #32
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	f002 021f 	and.w	r2, r2, #31
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d22:	4013      	ands	r3, r2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d180      	bne.n	8001c2a <HAL_RCC_OscConfig+0xf1a>
 8001d28:	e027      	b.n	8001d7a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d101      	bne.n	8001d3e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e01e      	b.n	8001d7c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d3e:	4b12      	ldr	r3, [pc, #72]	@ (8001d88 <HAL_RCC_OscConfig+0x1078>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d46:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001d4a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d10b      	bne.n	8001d76 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d5e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001d62:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d001      	beq.n	8001d7a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40021000 	.word	0x40021000

08001d8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b09e      	sub	sp, #120	@ 0x78
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e162      	b.n	800206a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001da4:	4b90      	ldr	r3, [pc, #576]	@ (8001fe8 <HAL_RCC_ClockConfig+0x25c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d910      	bls.n	8001dd4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db2:	4b8d      	ldr	r3, [pc, #564]	@ (8001fe8 <HAL_RCC_ClockConfig+0x25c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 0207 	bic.w	r2, r3, #7
 8001dba:	498b      	ldr	r1, [pc, #556]	@ (8001fe8 <HAL_RCC_ClockConfig+0x25c>)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc2:	4b89      	ldr	r3, [pc, #548]	@ (8001fe8 <HAL_RCC_ClockConfig+0x25c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d001      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e14a      	b.n	800206a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de0:	4b82      	ldr	r3, [pc, #520]	@ (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	497f      	ldr	r1, [pc, #508]	@ (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 80dc 	beq.w	8001fb8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d13c      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xf6>
 8001e08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e0c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e10:	fa93 f3a3 	rbit	r3, r3
 8001e14:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001e16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e18:	fab3 f383 	clz	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d102      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xa6>
 8001e2c:	4b6f      	ldr	r3, [pc, #444]	@ (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	e00f      	b.n	8001e52 <HAL_RCC_ClockConfig+0xc6>
 8001e32:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e36:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e3a:	fa93 f3a3 	rbit	r3, r3
 8001e3e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e40:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e44:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e48:	fa93 f3a3 	rbit	r3, r3
 8001e4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e4e:	4b67      	ldr	r3, [pc, #412]	@ (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e52:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e56:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001e58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e5a:	fa92 f2a2 	rbit	r2, r2
 8001e5e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001e60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001e62:	fab2 f282 	clz	r2, r2
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	f042 0220 	orr.w	r2, r2, #32
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	f002 021f 	and.w	r2, r2, #31
 8001e72:	2101      	movs	r1, #1
 8001e74:	fa01 f202 	lsl.w	r2, r1, r2
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d17b      	bne.n	8001f76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0f3      	b.n	800206a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d13c      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x178>
 8001e8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e8e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001e98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9a:	fab3 f383 	clz	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	095b      	lsrs	r3, r3, #5
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d102      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x128>
 8001eae:	4b4f      	ldr	r3, [pc, #316]	@ (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	e00f      	b.n	8001ed4 <HAL_RCC_ClockConfig+0x148>
 8001eb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001eb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ebc:	fa93 f3a3 	rbit	r3, r3
 8001ec0:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ec2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ec6:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ec8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ed0:	4b46      	ldr	r3, [pc, #280]	@ (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ed8:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001eda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001edc:	fa92 f2a2 	rbit	r2, r2
 8001ee0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001ee2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ee4:	fab2 f282 	clz	r2, r2
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	f042 0220 	orr.w	r2, r2, #32
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	f002 021f 	and.w	r2, r2, #31
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d13a      	bne.n	8001f76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0b2      	b.n	800206a <HAL_RCC_ClockConfig+0x2de>
 8001f04:	2302      	movs	r3, #2
 8001f06:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f12:	fab3 f383 	clz	r3, r3
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	095b      	lsrs	r3, r3, #5
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d102      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x1a0>
 8001f26:	4b31      	ldr	r3, [pc, #196]	@ (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	e00d      	b.n	8001f48 <HAL_RCC_ClockConfig+0x1bc>
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f32:	fa93 f3a3 	rbit	r3, r3
 8001f36:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f38:	2302      	movs	r3, #2
 8001f3a:	623b      	str	r3, [r7, #32]
 8001f3c:	6a3b      	ldr	r3, [r7, #32]
 8001f3e:	fa93 f3a3 	rbit	r3, r3
 8001f42:	61fb      	str	r3, [r7, #28]
 8001f44:	4b29      	ldr	r3, [pc, #164]	@ (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f48:	2202      	movs	r2, #2
 8001f4a:	61ba      	str	r2, [r7, #24]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	fa92 f2a2 	rbit	r2, r2
 8001f52:	617a      	str	r2, [r7, #20]
  return result;
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	fab2 f282 	clz	r2, r2
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	f042 0220 	orr.w	r2, r2, #32
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	f002 021f 	and.w	r2, r2, #31
 8001f66:	2101      	movs	r1, #1
 8001f68:	fa01 f202 	lsl.w	r2, r1, r2
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e079      	b.n	800206a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f76:	4b1d      	ldr	r3, [pc, #116]	@ (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f023 0203 	bic.w	r2, r3, #3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	491a      	ldr	r1, [pc, #104]	@ (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f88:	f7fe fc3a 	bl	8000800 <HAL_GetTick>
 8001f8c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8e:	e00a      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f90:	f7fe fc36 	bl	8000800 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e061      	b.n	800206a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa6:	4b11      	ldr	r3, [pc, #68]	@ (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 020c 	and.w	r2, r3, #12
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d1eb      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe8 <HAL_RCC_ClockConfig+0x25c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d214      	bcs.n	8001ff0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc6:	4b08      	ldr	r3, [pc, #32]	@ (8001fe8 <HAL_RCC_ClockConfig+0x25c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 0207 	bic.w	r2, r3, #7
 8001fce:	4906      	ldr	r1, [pc, #24]	@ (8001fe8 <HAL_RCC_ClockConfig+0x25c>)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd6:	4b04      	ldr	r3, [pc, #16]	@ (8001fe8 <HAL_RCC_ClockConfig+0x25c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e040      	b.n	800206a <HAL_RCC_ClockConfig+0x2de>
 8001fe8:	40022000 	.word	0x40022000
 8001fec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d008      	beq.n	800200e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8002074 <HAL_RCC_ClockConfig+0x2e8>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	491a      	ldr	r1, [pc, #104]	@ (8002074 <HAL_RCC_ClockConfig+0x2e8>)
 800200a:	4313      	orrs	r3, r2
 800200c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d009      	beq.n	800202e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800201a:	4b16      	ldr	r3, [pc, #88]	@ (8002074 <HAL_RCC_ClockConfig+0x2e8>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	4912      	ldr	r1, [pc, #72]	@ (8002074 <HAL_RCC_ClockConfig+0x2e8>)
 800202a:	4313      	orrs	r3, r2
 800202c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800202e:	f000 f829 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 8002032:	4601      	mov	r1, r0
 8002034:	4b0f      	ldr	r3, [pc, #60]	@ (8002074 <HAL_RCC_ClockConfig+0x2e8>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800203c:	22f0      	movs	r2, #240	@ 0xf0
 800203e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	fa92 f2a2 	rbit	r2, r2
 8002046:	60fa      	str	r2, [r7, #12]
  return result;
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	fab2 f282 	clz	r2, r2
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	40d3      	lsrs	r3, r2
 8002052:	4a09      	ldr	r2, [pc, #36]	@ (8002078 <HAL_RCC_ClockConfig+0x2ec>)
 8002054:	5cd3      	ldrb	r3, [r2, r3]
 8002056:	fa21 f303 	lsr.w	r3, r1, r3
 800205a:	4a08      	ldr	r2, [pc, #32]	@ (800207c <HAL_RCC_ClockConfig+0x2f0>)
 800205c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800205e:	4b08      	ldr	r3, [pc, #32]	@ (8002080 <HAL_RCC_ClockConfig+0x2f4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fb88 	bl	8000778 <HAL_InitTick>
  
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3778      	adds	r7, #120	@ 0x78
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000
 8002078:	08003c6c 	.word	0x08003c6c
 800207c:	20000000 	.word	0x20000000
 8002080:	20000004 	.word	0x20000004

08002084 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002084:	b480      	push	{r7}
 8002086:	b087      	sub	sp, #28
 8002088:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	2300      	movs	r3, #0
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	2300      	movs	r3, #0
 8002098:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800209e:	4b1e      	ldr	r3, [pc, #120]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x94>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d002      	beq.n	80020b4 <HAL_RCC_GetSysClockFreq+0x30>
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d003      	beq.n	80020ba <HAL_RCC_GetSysClockFreq+0x36>
 80020b2:	e026      	b.n	8002102 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020b4:	4b19      	ldr	r3, [pc, #100]	@ (800211c <HAL_RCC_GetSysClockFreq+0x98>)
 80020b6:	613b      	str	r3, [r7, #16]
      break;
 80020b8:	e026      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	0c9b      	lsrs	r3, r3, #18
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	4a17      	ldr	r2, [pc, #92]	@ (8002120 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020c4:	5cd3      	ldrb	r3, [r2, r3]
 80020c6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80020c8:	4b13      	ldr	r3, [pc, #76]	@ (8002118 <HAL_RCC_GetSysClockFreq+0x94>)
 80020ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	4a14      	ldr	r2, [pc, #80]	@ (8002124 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020d2:	5cd3      	ldrb	r3, [r2, r3]
 80020d4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d008      	beq.n	80020f2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020e0:	4a0e      	ldr	r2, [pc, #56]	@ (800211c <HAL_RCC_GetSysClockFreq+0x98>)
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	fb02 f303 	mul.w	r3, r2, r3
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	e004      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002128 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020f6:	fb02 f303 	mul.w	r3, r2, r3
 80020fa:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	613b      	str	r3, [r7, #16]
      break;
 8002100:	e002      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002102:	4b06      	ldr	r3, [pc, #24]	@ (800211c <HAL_RCC_GetSysClockFreq+0x98>)
 8002104:	613b      	str	r3, [r7, #16]
      break;
 8002106:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002108:	693b      	ldr	r3, [r7, #16]
}
 800210a:	4618      	mov	r0, r3
 800210c:	371c      	adds	r7, #28
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	007a1200 	.word	0x007a1200
 8002120:	08003c84 	.word	0x08003c84
 8002124:	08003c94 	.word	0x08003c94
 8002128:	003d0900 	.word	0x003d0900

0800212c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002130:	4b03      	ldr	r3, [pc, #12]	@ (8002140 <HAL_RCC_GetHCLKFreq+0x14>)
 8002132:	681b      	ldr	r3, [r3, #0]
}
 8002134:	4618      	mov	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20000000 	.word	0x20000000

08002144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800214a:	f7ff ffef 	bl	800212c <HAL_RCC_GetHCLKFreq>
 800214e:	4601      	mov	r1, r0
 8002150:	4b0b      	ldr	r3, [pc, #44]	@ (8002180 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002158:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800215c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	fa92 f2a2 	rbit	r2, r2
 8002164:	603a      	str	r2, [r7, #0]
  return result;
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	fab2 f282 	clz	r2, r2
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	40d3      	lsrs	r3, r2
 8002170:	4a04      	ldr	r2, [pc, #16]	@ (8002184 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002172:	5cd3      	ldrb	r3, [r2, r3]
 8002174:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40021000 	.word	0x40021000
 8002184:	08003c7c 	.word	0x08003c7c

08002188 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800218e:	f7ff ffcd 	bl	800212c <HAL_RCC_GetHCLKFreq>
 8002192:	4601      	mov	r1, r0
 8002194:	4b0b      	ldr	r3, [pc, #44]	@ (80021c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800219c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80021a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	fa92 f2a2 	rbit	r2, r2
 80021a8:	603a      	str	r2, [r7, #0]
  return result;
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	fab2 f282 	clz	r2, r2
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	40d3      	lsrs	r3, r2
 80021b4:	4a04      	ldr	r2, [pc, #16]	@ (80021c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80021b6:	5cd3      	ldrb	r3, [r2, r3]
 80021b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021bc:	4618      	mov	r0, r3
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40021000 	.word	0x40021000
 80021c8:	08003c7c 	.word	0x08003c7c

080021cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b092      	sub	sp, #72	@ 0x48
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80021d8:	2300      	movs	r3, #0
 80021da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80021dc:	2300      	movs	r3, #0
 80021de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 80cd 	beq.w	800238a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f0:	4b86      	ldr	r3, [pc, #536]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10e      	bne.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021fc:	4b83      	ldr	r3, [pc, #524]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	4a82      	ldr	r2, [pc, #520]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002202:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002206:	61d3      	str	r3, [r2, #28]
 8002208:	4b80      	ldr	r3, [pc, #512]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002214:	2301      	movs	r3, #1
 8002216:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221a:	4b7d      	ldr	r3, [pc, #500]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002222:	2b00      	cmp	r3, #0
 8002224:	d118      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002226:	4b7a      	ldr	r3, [pc, #488]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a79      	ldr	r2, [pc, #484]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800222c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002230:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002232:	f7fe fae5 	bl	8000800 <HAL_GetTick>
 8002236:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002238:	e008      	b.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800223a:	f7fe fae1 	bl	8000800 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b64      	cmp	r3, #100	@ 0x64
 8002246:	d901      	bls.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e0db      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224c:	4b70      	ldr	r3, [pc, #448]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f0      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002258:	4b6c      	ldr	r3, [pc, #432]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002260:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002264:	2b00      	cmp	r3, #0
 8002266:	d07d      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002270:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002272:	429a      	cmp	r2, r3
 8002274:	d076      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002276:	4b65      	ldr	r3, [pc, #404]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800227e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002280:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002284:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002288:	fa93 f3a3 	rbit	r3, r3
 800228c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800228e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002290:	fab3 f383 	clz	r3, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	461a      	mov	r2, r3
 8002298:	4b5e      	ldr	r3, [pc, #376]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800229a:	4413      	add	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	461a      	mov	r2, r3
 80022a0:	2301      	movs	r3, #1
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80022b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022b4:	fab3 f383 	clz	r3, r3
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	461a      	mov	r2, r3
 80022bc:	4b55      	ldr	r3, [pc, #340]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80022be:	4413      	add	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	461a      	mov	r2, r3
 80022c4:	2300      	movs	r3, #0
 80022c6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022c8:	4a50      	ldr	r2, [pc, #320]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80022ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022cc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d045      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7fe fa92 	bl	8000800 <HAL_GetTick>
 80022dc:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022de:	e00a      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e0:	f7fe fa8e 	bl	8000800 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e086      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80022f6:	2302      	movs	r3, #2
 80022f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022fc:	fa93 f3a3 	rbit	r3, r3
 8002300:	627b      	str	r3, [r7, #36]	@ 0x24
 8002302:	2302      	movs	r3, #2
 8002304:	623b      	str	r3, [r7, #32]
 8002306:	6a3b      	ldr	r3, [r7, #32]
 8002308:	fa93 f3a3 	rbit	r3, r3
 800230c:	61fb      	str	r3, [r7, #28]
  return result;
 800230e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002310:	fab3 f383 	clz	r3, r3
 8002314:	b2db      	uxtb	r3, r3
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	b2db      	uxtb	r3, r3
 800231a:	f043 0302 	orr.w	r3, r3, #2
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d102      	bne.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002324:	4b39      	ldr	r3, [pc, #228]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	e007      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800232a:	2302      	movs	r3, #2
 800232c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	fa93 f3a3 	rbit	r3, r3
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	4b35      	ldr	r3, [pc, #212]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233a:	2202      	movs	r2, #2
 800233c:	613a      	str	r2, [r7, #16]
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	fa92 f2a2 	rbit	r2, r2
 8002344:	60fa      	str	r2, [r7, #12]
  return result;
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	fab2 f282 	clz	r2, r2
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	f002 021f 	and.w	r2, r2, #31
 8002358:	2101      	movs	r1, #1
 800235a:	fa01 f202 	lsl.w	r2, r1, r2
 800235e:	4013      	ands	r3, r2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0bd      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002364:	4b29      	ldr	r3, [pc, #164]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	4926      	ldr	r1, [pc, #152]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002372:	4313      	orrs	r3, r2
 8002374:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002376:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800237a:	2b01      	cmp	r3, #1
 800237c:	d105      	bne.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800237e:	4b23      	ldr	r3, [pc, #140]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	4a22      	ldr	r2, [pc, #136]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002384:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002388:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d008      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002396:	4b1d      	ldr	r3, [pc, #116]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	f023 0203 	bic.w	r2, r3, #3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	491a      	ldr	r1, [pc, #104]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0320 	and.w	r3, r3, #32
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023b4:	4b15      	ldr	r3, [pc, #84]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b8:	f023 0210 	bic.w	r2, r3, #16
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4912      	ldr	r1, [pc, #72]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d008      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80023d2:	4b0e      	ldr	r3, [pc, #56]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d6:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	490b      	ldr	r1, [pc, #44]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d008      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80023f0:	4b06      	ldr	r3, [pc, #24]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	4903      	ldr	r1, [pc, #12]	@ (800240c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3748      	adds	r7, #72	@ 0x48
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40021000 	.word	0x40021000
 8002410:	40007000 	.word	0x40007000
 8002414:	10908100 	.word	0x10908100

08002418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e049      	b.n	80024be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d106      	bne.n	8002444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7fe f87c 	bl	800053c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3304      	adds	r3, #4
 8002454:	4619      	mov	r1, r3
 8002456:	4610      	mov	r0, r2
 8002458:	f000 fb60 	bl	8002b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e049      	b.n	800256c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d106      	bne.n	80024f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f841 	bl	8002574 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2202      	movs	r2, #2
 80024f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3304      	adds	r3, #4
 8002502:	4619      	mov	r1, r3
 8002504:	4610      	mov	r0, r2
 8002506:	f000 fb09 	bl	8002b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d109      	bne.n	80025ac <HAL_TIM_PWM_Start+0x24>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	bf14      	ite	ne
 80025a4:	2301      	movne	r3, #1
 80025a6:	2300      	moveq	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	e03c      	b.n	8002626 <HAL_TIM_PWM_Start+0x9e>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d109      	bne.n	80025c6 <HAL_TIM_PWM_Start+0x3e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	bf14      	ite	ne
 80025be:	2301      	movne	r3, #1
 80025c0:	2300      	moveq	r3, #0
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	e02f      	b.n	8002626 <HAL_TIM_PWM_Start+0x9e>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d109      	bne.n	80025e0 <HAL_TIM_PWM_Start+0x58>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	bf14      	ite	ne
 80025d8:	2301      	movne	r3, #1
 80025da:	2300      	moveq	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	e022      	b.n	8002626 <HAL_TIM_PWM_Start+0x9e>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2b0c      	cmp	r3, #12
 80025e4:	d109      	bne.n	80025fa <HAL_TIM_PWM_Start+0x72>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	bf14      	ite	ne
 80025f2:	2301      	movne	r3, #1
 80025f4:	2300      	moveq	r3, #0
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	e015      	b.n	8002626 <HAL_TIM_PWM_Start+0x9e>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b10      	cmp	r3, #16
 80025fe:	d109      	bne.n	8002614 <HAL_TIM_PWM_Start+0x8c>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b01      	cmp	r3, #1
 800260a:	bf14      	ite	ne
 800260c:	2301      	movne	r3, #1
 800260e:	2300      	moveq	r3, #0
 8002610:	b2db      	uxtb	r3, r3
 8002612:	e008      	b.n	8002626 <HAL_TIM_PWM_Start+0x9e>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b01      	cmp	r3, #1
 800261e:	bf14      	ite	ne
 8002620:	2301      	movne	r3, #1
 8002622:	2300      	moveq	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e088      	b.n	8002740 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d104      	bne.n	800263e <HAL_TIM_PWM_Start+0xb6>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2202      	movs	r2, #2
 8002638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800263c:	e023      	b.n	8002686 <HAL_TIM_PWM_Start+0xfe>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	2b04      	cmp	r3, #4
 8002642:	d104      	bne.n	800264e <HAL_TIM_PWM_Start+0xc6>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800264c:	e01b      	b.n	8002686 <HAL_TIM_PWM_Start+0xfe>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2b08      	cmp	r3, #8
 8002652:	d104      	bne.n	800265e <HAL_TIM_PWM_Start+0xd6>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800265c:	e013      	b.n	8002686 <HAL_TIM_PWM_Start+0xfe>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b0c      	cmp	r3, #12
 8002662:	d104      	bne.n	800266e <HAL_TIM_PWM_Start+0xe6>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800266c:	e00b      	b.n	8002686 <HAL_TIM_PWM_Start+0xfe>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b10      	cmp	r3, #16
 8002672:	d104      	bne.n	800267e <HAL_TIM_PWM_Start+0xf6>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2202      	movs	r2, #2
 8002678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800267c:	e003      	b.n	8002686 <HAL_TIM_PWM_Start+0xfe>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2202      	movs	r2, #2
 8002682:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2201      	movs	r2, #1
 800268c:	6839      	ldr	r1, [r7, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f000 fe08 	bl	80032a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a2b      	ldr	r2, [pc, #172]	@ (8002748 <HAL_TIM_PWM_Start+0x1c0>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00e      	beq.n	80026bc <HAL_TIM_PWM_Start+0x134>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a2a      	ldr	r2, [pc, #168]	@ (800274c <HAL_TIM_PWM_Start+0x1c4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d009      	beq.n	80026bc <HAL_TIM_PWM_Start+0x134>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a28      	ldr	r2, [pc, #160]	@ (8002750 <HAL_TIM_PWM_Start+0x1c8>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d004      	beq.n	80026bc <HAL_TIM_PWM_Start+0x134>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a27      	ldr	r2, [pc, #156]	@ (8002754 <HAL_TIM_PWM_Start+0x1cc>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d101      	bne.n	80026c0 <HAL_TIM_PWM_Start+0x138>
 80026bc:	2301      	movs	r3, #1
 80026be:	e000      	b.n	80026c2 <HAL_TIM_PWM_Start+0x13a>
 80026c0:	2300      	movs	r3, #0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d007      	beq.n	80026d6 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a1b      	ldr	r2, [pc, #108]	@ (8002748 <HAL_TIM_PWM_Start+0x1c0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d00e      	beq.n	80026fe <HAL_TIM_PWM_Start+0x176>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026e8:	d009      	beq.n	80026fe <HAL_TIM_PWM_Start+0x176>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a1a      	ldr	r2, [pc, #104]	@ (8002758 <HAL_TIM_PWM_Start+0x1d0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d004      	beq.n	80026fe <HAL_TIM_PWM_Start+0x176>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a14      	ldr	r2, [pc, #80]	@ (800274c <HAL_TIM_PWM_Start+0x1c4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d115      	bne.n	800272a <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	4b15      	ldr	r3, [pc, #84]	@ (800275c <HAL_TIM_PWM_Start+0x1d4>)
 8002706:	4013      	ands	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b06      	cmp	r3, #6
 800270e:	d015      	beq.n	800273c <HAL_TIM_PWM_Start+0x1b4>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002716:	d011      	beq.n	800273c <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0201 	orr.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002728:	e008      	b.n	800273c <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f042 0201 	orr.w	r2, r2, #1
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	e000      	b.n	800273e <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800273c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40012c00 	.word	0x40012c00
 800274c:	40014000 	.word	0x40014000
 8002750:	40014400 	.word	0x40014400
 8002754:	40014800 	.word	0x40014800
 8002758:	40000400 	.word	0x40000400
 800275c:	00010007 	.word	0x00010007

08002760 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800277a:	2302      	movs	r3, #2
 800277c:	e0ff      	b.n	800297e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b14      	cmp	r3, #20
 800278a:	f200 80f0 	bhi.w	800296e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800278e:	a201      	add	r2, pc, #4	@ (adr r2, 8002794 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002794:	080027e9 	.word	0x080027e9
 8002798:	0800296f 	.word	0x0800296f
 800279c:	0800296f 	.word	0x0800296f
 80027a0:	0800296f 	.word	0x0800296f
 80027a4:	08002829 	.word	0x08002829
 80027a8:	0800296f 	.word	0x0800296f
 80027ac:	0800296f 	.word	0x0800296f
 80027b0:	0800296f 	.word	0x0800296f
 80027b4:	0800286b 	.word	0x0800286b
 80027b8:	0800296f 	.word	0x0800296f
 80027bc:	0800296f 	.word	0x0800296f
 80027c0:	0800296f 	.word	0x0800296f
 80027c4:	080028ab 	.word	0x080028ab
 80027c8:	0800296f 	.word	0x0800296f
 80027cc:	0800296f 	.word	0x0800296f
 80027d0:	0800296f 	.word	0x0800296f
 80027d4:	080028ed 	.word	0x080028ed
 80027d8:	0800296f 	.word	0x0800296f
 80027dc:	0800296f 	.word	0x0800296f
 80027e0:	0800296f 	.word	0x0800296f
 80027e4:	0800292d 	.word	0x0800292d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68b9      	ldr	r1, [r7, #8]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 fa18 	bl	8002c24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699a      	ldr	r2, [r3, #24]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0208 	orr.w	r2, r2, #8
 8002802:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	699a      	ldr	r2, [r3, #24]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0204 	bic.w	r2, r2, #4
 8002812:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6999      	ldr	r1, [r3, #24]
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	691a      	ldr	r2, [r3, #16]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	619a      	str	r2, [r3, #24]
      break;
 8002826:	e0a5      	b.n	8002974 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68b9      	ldr	r1, [r7, #8]
 800282e:	4618      	mov	r0, r3
 8002830:	f000 fa7e 	bl	8002d30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699a      	ldr	r2, [r3, #24]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002842:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699a      	ldr	r2, [r3, #24]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6999      	ldr	r1, [r3, #24]
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	021a      	lsls	r2, r3, #8
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	619a      	str	r2, [r3, #24]
      break;
 8002868:	e084      	b.n	8002974 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68b9      	ldr	r1, [r7, #8]
 8002870:	4618      	mov	r0, r3
 8002872:	f000 fadd 	bl	8002e30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	69da      	ldr	r2, [r3, #28]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0208 	orr.w	r2, r2, #8
 8002884:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	69da      	ldr	r2, [r3, #28]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0204 	bic.w	r2, r2, #4
 8002894:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	69d9      	ldr	r1, [r3, #28]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	61da      	str	r2, [r3, #28]
      break;
 80028a8:	e064      	b.n	8002974 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68b9      	ldr	r1, [r7, #8]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 fb3b 	bl	8002f2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	69da      	ldr	r2, [r3, #28]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	69da      	ldr	r2, [r3, #28]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	69d9      	ldr	r1, [r3, #28]
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	021a      	lsls	r2, r3, #8
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	61da      	str	r2, [r3, #28]
      break;
 80028ea:	e043      	b.n	8002974 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68b9      	ldr	r1, [r7, #8]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 fb7e 	bl	8002ff4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0208 	orr.w	r2, r2, #8
 8002906:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0204 	bic.w	r2, r2, #4
 8002916:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	691a      	ldr	r2, [r3, #16]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800292a:	e023      	b.n	8002974 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fbbc 	bl	80030b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002946:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002956:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	021a      	lsls	r2, r3, #8
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800296c:	e002      	b.n	8002974 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	75fb      	strb	r3, [r7, #23]
      break;
 8002972:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800297c:	7dfb      	ldrb	r3, [r7, #23]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop

08002988 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002992:	2300      	movs	r3, #0
 8002994:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800299c:	2b01      	cmp	r3, #1
 800299e:	d101      	bne.n	80029a4 <HAL_TIM_ConfigClockSource+0x1c>
 80029a0:	2302      	movs	r3, #2
 80029a2:	e0b6      	b.n	8002b12 <HAL_TIM_ConfigClockSource+0x18a>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80029c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029e0:	d03e      	beq.n	8002a60 <HAL_TIM_ConfigClockSource+0xd8>
 80029e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029e6:	f200 8087 	bhi.w	8002af8 <HAL_TIM_ConfigClockSource+0x170>
 80029ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029ee:	f000 8086 	beq.w	8002afe <HAL_TIM_ConfigClockSource+0x176>
 80029f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029f6:	d87f      	bhi.n	8002af8 <HAL_TIM_ConfigClockSource+0x170>
 80029f8:	2b70      	cmp	r3, #112	@ 0x70
 80029fa:	d01a      	beq.n	8002a32 <HAL_TIM_ConfigClockSource+0xaa>
 80029fc:	2b70      	cmp	r3, #112	@ 0x70
 80029fe:	d87b      	bhi.n	8002af8 <HAL_TIM_ConfigClockSource+0x170>
 8002a00:	2b60      	cmp	r3, #96	@ 0x60
 8002a02:	d050      	beq.n	8002aa6 <HAL_TIM_ConfigClockSource+0x11e>
 8002a04:	2b60      	cmp	r3, #96	@ 0x60
 8002a06:	d877      	bhi.n	8002af8 <HAL_TIM_ConfigClockSource+0x170>
 8002a08:	2b50      	cmp	r3, #80	@ 0x50
 8002a0a:	d03c      	beq.n	8002a86 <HAL_TIM_ConfigClockSource+0xfe>
 8002a0c:	2b50      	cmp	r3, #80	@ 0x50
 8002a0e:	d873      	bhi.n	8002af8 <HAL_TIM_ConfigClockSource+0x170>
 8002a10:	2b40      	cmp	r3, #64	@ 0x40
 8002a12:	d058      	beq.n	8002ac6 <HAL_TIM_ConfigClockSource+0x13e>
 8002a14:	2b40      	cmp	r3, #64	@ 0x40
 8002a16:	d86f      	bhi.n	8002af8 <HAL_TIM_ConfigClockSource+0x170>
 8002a18:	2b30      	cmp	r3, #48	@ 0x30
 8002a1a:	d064      	beq.n	8002ae6 <HAL_TIM_ConfigClockSource+0x15e>
 8002a1c:	2b30      	cmp	r3, #48	@ 0x30
 8002a1e:	d86b      	bhi.n	8002af8 <HAL_TIM_ConfigClockSource+0x170>
 8002a20:	2b20      	cmp	r3, #32
 8002a22:	d060      	beq.n	8002ae6 <HAL_TIM_ConfigClockSource+0x15e>
 8002a24:	2b20      	cmp	r3, #32
 8002a26:	d867      	bhi.n	8002af8 <HAL_TIM_ConfigClockSource+0x170>
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d05c      	beq.n	8002ae6 <HAL_TIM_ConfigClockSource+0x15e>
 8002a2c:	2b10      	cmp	r3, #16
 8002a2e:	d05a      	beq.n	8002ae6 <HAL_TIM_ConfigClockSource+0x15e>
 8002a30:	e062      	b.n	8002af8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a42:	f000 fc0f 	bl	8003264 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002a54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	609a      	str	r2, [r3, #8]
      break;
 8002a5e:	e04f      	b.n	8002b00 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a70:	f000 fbf8 	bl	8003264 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a82:	609a      	str	r2, [r3, #8]
      break;
 8002a84:	e03c      	b.n	8002b00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a92:	461a      	mov	r2, r3
 8002a94:	f000 fb6c 	bl	8003170 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2150      	movs	r1, #80	@ 0x50
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fbc5 	bl	800322e <TIM_ITRx_SetConfig>
      break;
 8002aa4:	e02c      	b.n	8002b00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	f000 fb8b 	bl	80031ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2160      	movs	r1, #96	@ 0x60
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 fbb5 	bl	800322e <TIM_ITRx_SetConfig>
      break;
 8002ac4:	e01c      	b.n	8002b00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	f000 fb4c 	bl	8003170 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2140      	movs	r1, #64	@ 0x40
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 fba5 	bl	800322e <TIM_ITRx_SetConfig>
      break;
 8002ae4:	e00c      	b.n	8002b00 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4619      	mov	r1, r3
 8002af0:	4610      	mov	r0, r2
 8002af2:	f000 fb9c 	bl	800322e <TIM_ITRx_SetConfig>
      break;
 8002af6:	e003      	b.n	8002b00 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	73fb      	strb	r3, [r7, #15]
      break;
 8002afc:	e000      	b.n	8002b00 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002afe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a38      	ldr	r2, [pc, #224]	@ (8002c10 <TIM_Base_SetConfig+0xf4>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d007      	beq.n	8002b44 <TIM_Base_SetConfig+0x28>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b3a:	d003      	beq.n	8002b44 <TIM_Base_SetConfig+0x28>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a35      	ldr	r2, [pc, #212]	@ (8002c14 <TIM_Base_SetConfig+0xf8>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d108      	bne.n	8002b56 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a2d      	ldr	r2, [pc, #180]	@ (8002c10 <TIM_Base_SetConfig+0xf4>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d013      	beq.n	8002b86 <TIM_Base_SetConfig+0x6a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b64:	d00f      	beq.n	8002b86 <TIM_Base_SetConfig+0x6a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a2a      	ldr	r2, [pc, #168]	@ (8002c14 <TIM_Base_SetConfig+0xf8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d00b      	beq.n	8002b86 <TIM_Base_SetConfig+0x6a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a29      	ldr	r2, [pc, #164]	@ (8002c18 <TIM_Base_SetConfig+0xfc>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d007      	beq.n	8002b86 <TIM_Base_SetConfig+0x6a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a28      	ldr	r2, [pc, #160]	@ (8002c1c <TIM_Base_SetConfig+0x100>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d003      	beq.n	8002b86 <TIM_Base_SetConfig+0x6a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a27      	ldr	r2, [pc, #156]	@ (8002c20 <TIM_Base_SetConfig+0x104>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d108      	bne.n	8002b98 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a14      	ldr	r2, [pc, #80]	@ (8002c10 <TIM_Base_SetConfig+0xf4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d00b      	beq.n	8002bdc <TIM_Base_SetConfig+0xc0>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a14      	ldr	r2, [pc, #80]	@ (8002c18 <TIM_Base_SetConfig+0xfc>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d007      	beq.n	8002bdc <TIM_Base_SetConfig+0xc0>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a13      	ldr	r2, [pc, #76]	@ (8002c1c <TIM_Base_SetConfig+0x100>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d003      	beq.n	8002bdc <TIM_Base_SetConfig+0xc0>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a12      	ldr	r2, [pc, #72]	@ (8002c20 <TIM_Base_SetConfig+0x104>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d103      	bne.n	8002be4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d105      	bne.n	8002c02 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f023 0201 	bic.w	r2, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	611a      	str	r2, [r3, #16]
  }
}
 8002c02:	bf00      	nop
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	40012c00 	.word	0x40012c00
 8002c14:	40000400 	.word	0x40000400
 8002c18:	40014000 	.word	0x40014000
 8002c1c:	40014400 	.word	0x40014400
 8002c20:	40014800 	.word	0x40014800

08002c24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	f023 0201 	bic.w	r2, r3, #1
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f023 0303 	bic.w	r3, r3, #3
 8002c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f023 0302 	bic.w	r3, r3, #2
 8002c70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a28      	ldr	r2, [pc, #160]	@ (8002d20 <TIM_OC1_SetConfig+0xfc>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d00b      	beq.n	8002c9c <TIM_OC1_SetConfig+0x78>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a27      	ldr	r2, [pc, #156]	@ (8002d24 <TIM_OC1_SetConfig+0x100>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d007      	beq.n	8002c9c <TIM_OC1_SetConfig+0x78>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a26      	ldr	r2, [pc, #152]	@ (8002d28 <TIM_OC1_SetConfig+0x104>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d003      	beq.n	8002c9c <TIM_OC1_SetConfig+0x78>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a25      	ldr	r2, [pc, #148]	@ (8002d2c <TIM_OC1_SetConfig+0x108>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d10c      	bne.n	8002cb6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f023 0308 	bic.w	r3, r3, #8
 8002ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f023 0304 	bic.w	r3, r3, #4
 8002cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a19      	ldr	r2, [pc, #100]	@ (8002d20 <TIM_OC1_SetConfig+0xfc>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00b      	beq.n	8002cd6 <TIM_OC1_SetConfig+0xb2>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a18      	ldr	r2, [pc, #96]	@ (8002d24 <TIM_OC1_SetConfig+0x100>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d007      	beq.n	8002cd6 <TIM_OC1_SetConfig+0xb2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a17      	ldr	r2, [pc, #92]	@ (8002d28 <TIM_OC1_SetConfig+0x104>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d003      	beq.n	8002cd6 <TIM_OC1_SetConfig+0xb2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a16      	ldr	r2, [pc, #88]	@ (8002d2c <TIM_OC1_SetConfig+0x108>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d111      	bne.n	8002cfa <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	621a      	str	r2, [r3, #32]
}
 8002d14:	bf00      	nop
 8002d16:	371c      	adds	r7, #28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	40012c00 	.word	0x40012c00
 8002d24:	40014000 	.word	0x40014000
 8002d28:	40014400 	.word	0x40014400
 8002d2c:	40014800 	.word	0x40014800

08002d30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b087      	sub	sp, #28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	f023 0210 	bic.w	r2, r3, #16
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	021b      	lsls	r3, r3, #8
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f023 0320 	bic.w	r3, r3, #32
 8002d7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a24      	ldr	r2, [pc, #144]	@ (8002e20 <TIM_OC2_SetConfig+0xf0>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d10d      	bne.n	8002db0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002dae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a1b      	ldr	r2, [pc, #108]	@ (8002e20 <TIM_OC2_SetConfig+0xf0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d00b      	beq.n	8002dd0 <TIM_OC2_SetConfig+0xa0>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a1a      	ldr	r2, [pc, #104]	@ (8002e24 <TIM_OC2_SetConfig+0xf4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d007      	beq.n	8002dd0 <TIM_OC2_SetConfig+0xa0>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a19      	ldr	r2, [pc, #100]	@ (8002e28 <TIM_OC2_SetConfig+0xf8>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d003      	beq.n	8002dd0 <TIM_OC2_SetConfig+0xa0>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a18      	ldr	r2, [pc, #96]	@ (8002e2c <TIM_OC2_SetConfig+0xfc>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d113      	bne.n	8002df8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002dd6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002dde:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	621a      	str	r2, [r3, #32]
}
 8002e12:	bf00      	nop
 8002e14:	371c      	adds	r7, #28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40012c00 	.word	0x40012c00
 8002e24:	40014000 	.word	0x40014000
 8002e28:	40014400 	.word	0x40014400
 8002e2c:	40014800 	.word	0x40014800

08002e30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b087      	sub	sp, #28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f023 0303 	bic.w	r3, r3, #3
 8002e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	021b      	lsls	r3, r3, #8
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a23      	ldr	r2, [pc, #140]	@ (8002f1c <TIM_OC3_SetConfig+0xec>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d10d      	bne.n	8002eae <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002e98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	021b      	lsls	r3, r3, #8
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002eac:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a1a      	ldr	r2, [pc, #104]	@ (8002f1c <TIM_OC3_SetConfig+0xec>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d00b      	beq.n	8002ece <TIM_OC3_SetConfig+0x9e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a19      	ldr	r2, [pc, #100]	@ (8002f20 <TIM_OC3_SetConfig+0xf0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d007      	beq.n	8002ece <TIM_OC3_SetConfig+0x9e>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a18      	ldr	r2, [pc, #96]	@ (8002f24 <TIM_OC3_SetConfig+0xf4>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d003      	beq.n	8002ece <TIM_OC3_SetConfig+0x9e>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a17      	ldr	r2, [pc, #92]	@ (8002f28 <TIM_OC3_SetConfig+0xf8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d113      	bne.n	8002ef6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002edc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	621a      	str	r2, [r3, #32]
}
 8002f10:	bf00      	nop
 8002f12:	371c      	adds	r7, #28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	40012c00 	.word	0x40012c00
 8002f20:	40014000 	.word	0x40014000
 8002f24:	40014400 	.word	0x40014400
 8002f28:	40014800 	.word	0x40014800

08002f2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	021b      	lsls	r3, r3, #8
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	031b      	lsls	r3, r3, #12
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a16      	ldr	r2, [pc, #88]	@ (8002fe4 <TIM_OC4_SetConfig+0xb8>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d00b      	beq.n	8002fa8 <TIM_OC4_SetConfig+0x7c>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a15      	ldr	r2, [pc, #84]	@ (8002fe8 <TIM_OC4_SetConfig+0xbc>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d007      	beq.n	8002fa8 <TIM_OC4_SetConfig+0x7c>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a14      	ldr	r2, [pc, #80]	@ (8002fec <TIM_OC4_SetConfig+0xc0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d003      	beq.n	8002fa8 <TIM_OC4_SetConfig+0x7c>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a13      	ldr	r2, [pc, #76]	@ (8002ff0 <TIM_OC4_SetConfig+0xc4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d109      	bne.n	8002fbc <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002fae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	019b      	lsls	r3, r3, #6
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	621a      	str	r2, [r3, #32]
}
 8002fd6:	bf00      	nop
 8002fd8:	371c      	adds	r7, #28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40012c00 	.word	0x40012c00
 8002fe8:	40014000 	.word	0x40014000
 8002fec:	40014400 	.word	0x40014400
 8002ff0:	40014800 	.word	0x40014800

08002ff4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800301a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003038:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	041b      	lsls	r3, r3, #16
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a15      	ldr	r2, [pc, #84]	@ (80030a0 <TIM_OC5_SetConfig+0xac>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d00b      	beq.n	8003066 <TIM_OC5_SetConfig+0x72>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a14      	ldr	r2, [pc, #80]	@ (80030a4 <TIM_OC5_SetConfig+0xb0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d007      	beq.n	8003066 <TIM_OC5_SetConfig+0x72>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a13      	ldr	r2, [pc, #76]	@ (80030a8 <TIM_OC5_SetConfig+0xb4>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d003      	beq.n	8003066 <TIM_OC5_SetConfig+0x72>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a12      	ldr	r2, [pc, #72]	@ (80030ac <TIM_OC5_SetConfig+0xb8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d109      	bne.n	800307a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800306c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	021b      	lsls	r3, r3, #8
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	4313      	orrs	r3, r2
 8003078:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	621a      	str	r2, [r3, #32]
}
 8003094:	bf00      	nop
 8003096:	371c      	adds	r7, #28
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	40012c00 	.word	0x40012c00
 80030a4:	40014000 	.word	0x40014000
 80030a8:	40014400 	.word	0x40014400
 80030ac:	40014800 	.word	0x40014800

080030b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b087      	sub	sp, #28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80030f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	051b      	lsls	r3, r3, #20
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a16      	ldr	r2, [pc, #88]	@ (8003160 <TIM_OC6_SetConfig+0xb0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d00b      	beq.n	8003124 <TIM_OC6_SetConfig+0x74>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a15      	ldr	r2, [pc, #84]	@ (8003164 <TIM_OC6_SetConfig+0xb4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d007      	beq.n	8003124 <TIM_OC6_SetConfig+0x74>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a14      	ldr	r2, [pc, #80]	@ (8003168 <TIM_OC6_SetConfig+0xb8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d003      	beq.n	8003124 <TIM_OC6_SetConfig+0x74>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a13      	ldr	r2, [pc, #76]	@ (800316c <TIM_OC6_SetConfig+0xbc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d109      	bne.n	8003138 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800312a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	029b      	lsls	r3, r3, #10
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	4313      	orrs	r3, r2
 8003136:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	621a      	str	r2, [r3, #32]
}
 8003152:	bf00      	nop
 8003154:	371c      	adds	r7, #28
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40012c00 	.word	0x40012c00
 8003164:	40014000 	.word	0x40014000
 8003168:	40014400 	.word	0x40014400
 800316c:	40014800 	.word	0x40014800

08003170 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	f023 0201 	bic.w	r2, r3, #1
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800319a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f023 030a 	bic.w	r3, r3, #10
 80031ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	621a      	str	r2, [r3, #32]
}
 80031c2:	bf00      	nop
 80031c4:	371c      	adds	r7, #28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b087      	sub	sp, #28
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	60f8      	str	r0, [r7, #12]
 80031d6:	60b9      	str	r1, [r7, #8]
 80031d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	f023 0210 	bic.w	r2, r3, #16
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80031f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	031b      	lsls	r3, r3, #12
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800320a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	4313      	orrs	r3, r2
 8003214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	621a      	str	r2, [r3, #32]
}
 8003222:	bf00      	nop
 8003224:	371c      	adds	r7, #28
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800322e:	b480      	push	{r7}
 8003230:	b085      	sub	sp, #20
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
 8003236:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003244:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4313      	orrs	r3, r2
 800324c:	f043 0307 	orr.w	r3, r3, #7
 8003250:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	609a      	str	r2, [r3, #8]
}
 8003258:	bf00      	nop
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
 8003270:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800327e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	021a      	lsls	r2, r3, #8
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	431a      	orrs	r2, r3
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	4313      	orrs	r3, r2
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	4313      	orrs	r3, r2
 8003290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	609a      	str	r2, [r3, #8]
}
 8003298:	bf00      	nop
 800329a:	371c      	adds	r7, #28
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	f003 031f 	and.w	r3, r3, #31
 80032b6:	2201      	movs	r2, #1
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6a1a      	ldr	r2, [r3, #32]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	43db      	mvns	r3, r3
 80032c6:	401a      	ands	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a1a      	ldr	r2, [r3, #32]
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	f003 031f 	and.w	r3, r3, #31
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	fa01 f303 	lsl.w	r3, r1, r3
 80032dc:	431a      	orrs	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	621a      	str	r2, [r3, #32]
}
 80032e2:	bf00      	nop
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
	...

080032f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003304:	2302      	movs	r3, #2
 8003306:	e054      	b.n	80033b2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a24      	ldr	r2, [pc, #144]	@ (80033c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d108      	bne.n	8003344 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003338:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4313      	orrs	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800334a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a17      	ldr	r2, [pc, #92]	@ (80033c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00e      	beq.n	8003386 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003370:	d009      	beq.n	8003386 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a13      	ldr	r2, [pc, #76]	@ (80033c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d004      	beq.n	8003386 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a11      	ldr	r2, [pc, #68]	@ (80033c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d10c      	bne.n	80033a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800338c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	4313      	orrs	r3, r2
 8003396:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40012c00 	.word	0x40012c00
 80033c4:	40000400 	.word	0x40000400
 80033c8:	40014000 	.word	0x40014000

080033cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e060      	b.n	80034aa <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	4313      	orrs	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4313      	orrs	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	4313      	orrs	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	4313      	orrs	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	041b      	lsls	r3, r3, #16
 800345e:	4313      	orrs	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a14      	ldr	r2, [pc, #80]	@ (80034b8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d115      	bne.n	8003498 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003476:	051b      	lsls	r3, r3, #20
 8003478:	4313      	orrs	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	4313      	orrs	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	4313      	orrs	r3, r2
 8003496:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40012c00 	.word	0x40012c00

080034bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e040      	b.n	8003550 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d106      	bne.n	80034e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7fd f884 	bl	80005ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2224      	movs	r2, #36	@ 0x24
 80034e8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0201 	bic.w	r2, r2, #1
 80034f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d002      	beq.n	8003508 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f95e 	bl	80037c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f825 	bl	8003558 <UART_SetConfig>
 800350e:	4603      	mov	r3, r0
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e01b      	b.n	8003550 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003526:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003536:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0201 	orr.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f9dd 	bl	8003908 <UART_CheckIdleState>
 800354e:	4603      	mov	r3, r0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	4313      	orrs	r3, r2
 800357a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	4b8a      	ldr	r3, [pc, #552]	@ (80037ac <UART_SetConfig+0x254>)
 8003584:	4013      	ands	r3, r2
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6812      	ldr	r2, [r2, #0]
 800358a:	6979      	ldr	r1, [r7, #20]
 800358c:	430b      	orrs	r3, r1
 800358e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a78      	ldr	r2, [pc, #480]	@ (80037b0 <UART_SetConfig+0x258>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d120      	bne.n	8003616 <UART_SetConfig+0xbe>
 80035d4:	4b77      	ldr	r3, [pc, #476]	@ (80037b4 <UART_SetConfig+0x25c>)
 80035d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d8:	f003 0303 	and.w	r3, r3, #3
 80035dc:	2b03      	cmp	r3, #3
 80035de:	d817      	bhi.n	8003610 <UART_SetConfig+0xb8>
 80035e0:	a201      	add	r2, pc, #4	@ (adr r2, 80035e8 <UART_SetConfig+0x90>)
 80035e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e6:	bf00      	nop
 80035e8:	080035f9 	.word	0x080035f9
 80035ec:	08003605 	.word	0x08003605
 80035f0:	0800360b 	.word	0x0800360b
 80035f4:	080035ff 	.word	0x080035ff
 80035f8:	2300      	movs	r3, #0
 80035fa:	77fb      	strb	r3, [r7, #31]
 80035fc:	e01d      	b.n	800363a <UART_SetConfig+0xe2>
 80035fe:	2302      	movs	r3, #2
 8003600:	77fb      	strb	r3, [r7, #31]
 8003602:	e01a      	b.n	800363a <UART_SetConfig+0xe2>
 8003604:	2304      	movs	r3, #4
 8003606:	77fb      	strb	r3, [r7, #31]
 8003608:	e017      	b.n	800363a <UART_SetConfig+0xe2>
 800360a:	2308      	movs	r3, #8
 800360c:	77fb      	strb	r3, [r7, #31]
 800360e:	e014      	b.n	800363a <UART_SetConfig+0xe2>
 8003610:	2310      	movs	r3, #16
 8003612:	77fb      	strb	r3, [r7, #31]
 8003614:	e011      	b.n	800363a <UART_SetConfig+0xe2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a67      	ldr	r2, [pc, #412]	@ (80037b8 <UART_SetConfig+0x260>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d102      	bne.n	8003626 <UART_SetConfig+0xce>
 8003620:	2300      	movs	r3, #0
 8003622:	77fb      	strb	r3, [r7, #31]
 8003624:	e009      	b.n	800363a <UART_SetConfig+0xe2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a64      	ldr	r2, [pc, #400]	@ (80037bc <UART_SetConfig+0x264>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d102      	bne.n	8003636 <UART_SetConfig+0xde>
 8003630:	2300      	movs	r3, #0
 8003632:	77fb      	strb	r3, [r7, #31]
 8003634:	e001      	b.n	800363a <UART_SetConfig+0xe2>
 8003636:	2310      	movs	r3, #16
 8003638:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003642:	d15a      	bne.n	80036fa <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003644:	7ffb      	ldrb	r3, [r7, #31]
 8003646:	2b08      	cmp	r3, #8
 8003648:	d827      	bhi.n	800369a <UART_SetConfig+0x142>
 800364a:	a201      	add	r2, pc, #4	@ (adr r2, 8003650 <UART_SetConfig+0xf8>)
 800364c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003650:	08003675 	.word	0x08003675
 8003654:	0800367d 	.word	0x0800367d
 8003658:	08003685 	.word	0x08003685
 800365c:	0800369b 	.word	0x0800369b
 8003660:	0800368b 	.word	0x0800368b
 8003664:	0800369b 	.word	0x0800369b
 8003668:	0800369b 	.word	0x0800369b
 800366c:	0800369b 	.word	0x0800369b
 8003670:	08003693 	.word	0x08003693
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003674:	f7fe fd66 	bl	8002144 <HAL_RCC_GetPCLK1Freq>
 8003678:	61b8      	str	r0, [r7, #24]
        break;
 800367a:	e013      	b.n	80036a4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800367c:	f7fe fd84 	bl	8002188 <HAL_RCC_GetPCLK2Freq>
 8003680:	61b8      	str	r0, [r7, #24]
        break;
 8003682:	e00f      	b.n	80036a4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003684:	4b4e      	ldr	r3, [pc, #312]	@ (80037c0 <UART_SetConfig+0x268>)
 8003686:	61bb      	str	r3, [r7, #24]
        break;
 8003688:	e00c      	b.n	80036a4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800368a:	f7fe fcfb 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 800368e:	61b8      	str	r0, [r7, #24]
        break;
 8003690:	e008      	b.n	80036a4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003692:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003696:	61bb      	str	r3, [r7, #24]
        break;
 8003698:	e004      	b.n	80036a4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800369a:	2300      	movs	r3, #0
 800369c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	77bb      	strb	r3, [r7, #30]
        break;
 80036a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d074      	beq.n	8003794 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	005a      	lsls	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	085b      	lsrs	r3, r3, #1
 80036b4:	441a      	add	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80036be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	2b0f      	cmp	r3, #15
 80036c4:	d916      	bls.n	80036f4 <UART_SetConfig+0x19c>
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036cc:	d212      	bcs.n	80036f4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	f023 030f 	bic.w	r3, r3, #15
 80036d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	085b      	lsrs	r3, r3, #1
 80036dc:	b29b      	uxth	r3, r3
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	89fb      	ldrh	r3, [r7, #14]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	89fa      	ldrh	r2, [r7, #14]
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	e04f      	b.n	8003794 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	77bb      	strb	r3, [r7, #30]
 80036f8:	e04c      	b.n	8003794 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036fa:	7ffb      	ldrb	r3, [r7, #31]
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d828      	bhi.n	8003752 <UART_SetConfig+0x1fa>
 8003700:	a201      	add	r2, pc, #4	@ (adr r2, 8003708 <UART_SetConfig+0x1b0>)
 8003702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003706:	bf00      	nop
 8003708:	0800372d 	.word	0x0800372d
 800370c:	08003735 	.word	0x08003735
 8003710:	0800373d 	.word	0x0800373d
 8003714:	08003753 	.word	0x08003753
 8003718:	08003743 	.word	0x08003743
 800371c:	08003753 	.word	0x08003753
 8003720:	08003753 	.word	0x08003753
 8003724:	08003753 	.word	0x08003753
 8003728:	0800374b 	.word	0x0800374b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800372c:	f7fe fd0a 	bl	8002144 <HAL_RCC_GetPCLK1Freq>
 8003730:	61b8      	str	r0, [r7, #24]
        break;
 8003732:	e013      	b.n	800375c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003734:	f7fe fd28 	bl	8002188 <HAL_RCC_GetPCLK2Freq>
 8003738:	61b8      	str	r0, [r7, #24]
        break;
 800373a:	e00f      	b.n	800375c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800373c:	4b20      	ldr	r3, [pc, #128]	@ (80037c0 <UART_SetConfig+0x268>)
 800373e:	61bb      	str	r3, [r7, #24]
        break;
 8003740:	e00c      	b.n	800375c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003742:	f7fe fc9f 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 8003746:	61b8      	str	r0, [r7, #24]
        break;
 8003748:	e008      	b.n	800375c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800374a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800374e:	61bb      	str	r3, [r7, #24]
        break;
 8003750:	e004      	b.n	800375c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	77bb      	strb	r3, [r7, #30]
        break;
 800375a:	bf00      	nop
    }

    if (pclk != 0U)
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d018      	beq.n	8003794 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	085a      	lsrs	r2, r3, #1
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	441a      	add	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	fbb2 f3f3 	udiv	r3, r2, r3
 8003774:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2b0f      	cmp	r3, #15
 800377a:	d909      	bls.n	8003790 <UART_SetConfig+0x238>
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003782:	d205      	bcs.n	8003790 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	b29a      	uxth	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60da      	str	r2, [r3, #12]
 800378e:	e001      	b.n	8003794 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80037a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3720      	adds	r7, #32
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	efff69f3 	.word	0xefff69f3
 80037b0:	40013800 	.word	0x40013800
 80037b4:	40021000 	.word	0x40021000
 80037b8:	40004400 	.word	0x40004400
 80037bc:	40004800 	.word	0x40004800
 80037c0:	007a1200 	.word	0x007a1200

080037c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003858:	f003 0310 	and.w	r3, r3, #16
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387a:	f003 0320 	and.w	r3, r3, #32
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01a      	beq.n	80038da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038c2:	d10a      	bne.n	80038da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00a      	beq.n	80038fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	605a      	str	r2, [r3, #4]
  }
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b098      	sub	sp, #96	@ 0x60
 800390c:	af02      	add	r7, sp, #8
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003918:	f7fc ff72 	bl	8000800 <HAL_GetTick>
 800391c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b08      	cmp	r3, #8
 800392a:	d12e      	bne.n	800398a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800392c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003934:	2200      	movs	r2, #0
 8003936:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f88c 	bl	8003a58 <UART_WaitOnFlagUntilTimeout>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d021      	beq.n	800398a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800394e:	e853 3f00 	ldrex	r3, [r3]
 8003952:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003956:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800395a:	653b      	str	r3, [r7, #80]	@ 0x50
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003964:	647b      	str	r3, [r7, #68]	@ 0x44
 8003966:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003968:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800396a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800396c:	e841 2300 	strex	r3, r2, [r1]
 8003970:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1e6      	bne.n	8003946 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2220      	movs	r2, #32
 800397c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e062      	b.n	8003a50 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b04      	cmp	r3, #4
 8003996:	d149      	bne.n	8003a2c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003998:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039a0:	2200      	movs	r2, #0
 80039a2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f856 	bl	8003a58 <UART_WaitOnFlagUntilTimeout>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d03c      	beq.n	8003a2c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ba:	e853 3f00 	ldrex	r3, [r3]
 80039be:	623b      	str	r3, [r7, #32]
   return(result);
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	461a      	mov	r2, r3
 80039ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80039d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039d8:	e841 2300 	strex	r3, r2, [r1]
 80039dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80039de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1e6      	bne.n	80039b2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	3308      	adds	r3, #8
 80039ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	e853 3f00 	ldrex	r3, [r3]
 80039f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0301 	bic.w	r3, r3, #1
 80039fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3308      	adds	r3, #8
 8003a02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a04:	61fa      	str	r2, [r7, #28]
 8003a06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a08:	69b9      	ldr	r1, [r7, #24]
 8003a0a:	69fa      	ldr	r2, [r7, #28]
 8003a0c:	e841 2300 	strex	r3, r2, [r1]
 8003a10:	617b      	str	r3, [r7, #20]
   return(result);
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1e5      	bne.n	80039e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e011      	b.n	8003a50 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3758      	adds	r7, #88	@ 0x58
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	4613      	mov	r3, r2
 8003a66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a68:	e04f      	b.n	8003b0a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a70:	d04b      	beq.n	8003b0a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a72:	f7fc fec5 	bl	8000800 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d302      	bcc.n	8003a88 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e04e      	b.n	8003b2a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0304 	and.w	r3, r3, #4
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d037      	beq.n	8003b0a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2b80      	cmp	r3, #128	@ 0x80
 8003a9e:	d034      	beq.n	8003b0a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b40      	cmp	r3, #64	@ 0x40
 8003aa4:	d031      	beq.n	8003b0a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d110      	bne.n	8003ad6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2208      	movs	r2, #8
 8003aba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 f838 	bl	8003b32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2208      	movs	r2, #8
 8003ac6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e029      	b.n	8003b2a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ae0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ae4:	d111      	bne.n	8003b0a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003aee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 f81e 	bl	8003b32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e00f      	b.n	8003b2a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69da      	ldr	r2, [r3, #28]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4013      	ands	r3, r2
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	bf0c      	ite	eq
 8003b1a:	2301      	moveq	r3, #1
 8003b1c:	2300      	movne	r3, #0
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	461a      	mov	r2, r3
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d0a0      	beq.n	8003a6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b095      	sub	sp, #84	@ 0x54
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b42:	e853 3f00 	ldrex	r3, [r3]
 8003b46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	461a      	mov	r2, r3
 8003b56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b58:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b5a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b60:	e841 2300 	strex	r3, r2, [r1]
 8003b64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e6      	bne.n	8003b3a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3308      	adds	r3, #8
 8003b72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	e853 3f00 	ldrex	r3, [r3]
 8003b7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f023 0301 	bic.w	r3, r3, #1
 8003b82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3308      	adds	r3, #8
 8003b8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b94:	e841 2300 	strex	r3, r2, [r1]
 8003b98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1e5      	bne.n	8003b6c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d118      	bne.n	8003bda <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	e853 3f00 	ldrex	r3, [r3]
 8003bb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	f023 0310 	bic.w	r3, r3, #16
 8003bbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bc6:	61bb      	str	r3, [r7, #24]
 8003bc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bca:	6979      	ldr	r1, [r7, #20]
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	e841 2300 	strex	r3, r2, [r1]
 8003bd2:	613b      	str	r3, [r7, #16]
   return(result);
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1e6      	bne.n	8003ba8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003bee:	bf00      	nop
 8003bf0:	3754      	adds	r7, #84	@ 0x54
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <memset>:
 8003bfa:	4402      	add	r2, r0
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d100      	bne.n	8003c04 <memset+0xa>
 8003c02:	4770      	bx	lr
 8003c04:	f803 1b01 	strb.w	r1, [r3], #1
 8003c08:	e7f9      	b.n	8003bfe <memset+0x4>
	...

08003c0c <__libc_init_array>:
 8003c0c:	b570      	push	{r4, r5, r6, lr}
 8003c0e:	4d0d      	ldr	r5, [pc, #52]	@ (8003c44 <__libc_init_array+0x38>)
 8003c10:	4c0d      	ldr	r4, [pc, #52]	@ (8003c48 <__libc_init_array+0x3c>)
 8003c12:	1b64      	subs	r4, r4, r5
 8003c14:	10a4      	asrs	r4, r4, #2
 8003c16:	2600      	movs	r6, #0
 8003c18:	42a6      	cmp	r6, r4
 8003c1a:	d109      	bne.n	8003c30 <__libc_init_array+0x24>
 8003c1c:	4d0b      	ldr	r5, [pc, #44]	@ (8003c4c <__libc_init_array+0x40>)
 8003c1e:	4c0c      	ldr	r4, [pc, #48]	@ (8003c50 <__libc_init_array+0x44>)
 8003c20:	f000 f818 	bl	8003c54 <_init>
 8003c24:	1b64      	subs	r4, r4, r5
 8003c26:	10a4      	asrs	r4, r4, #2
 8003c28:	2600      	movs	r6, #0
 8003c2a:	42a6      	cmp	r6, r4
 8003c2c:	d105      	bne.n	8003c3a <__libc_init_array+0x2e>
 8003c2e:	bd70      	pop	{r4, r5, r6, pc}
 8003c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c34:	4798      	blx	r3
 8003c36:	3601      	adds	r6, #1
 8003c38:	e7ee      	b.n	8003c18 <__libc_init_array+0xc>
 8003c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c3e:	4798      	blx	r3
 8003c40:	3601      	adds	r6, #1
 8003c42:	e7f2      	b.n	8003c2a <__libc_init_array+0x1e>
 8003c44:	08003ca4 	.word	0x08003ca4
 8003c48:	08003ca4 	.word	0x08003ca4
 8003c4c:	08003ca4 	.word	0x08003ca4
 8003c50:	08003ca8 	.word	0x08003ca8

08003c54 <_init>:
 8003c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c56:	bf00      	nop
 8003c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5a:	bc08      	pop	{r3}
 8003c5c:	469e      	mov	lr, r3
 8003c5e:	4770      	bx	lr

08003c60 <_fini>:
 8003c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c62:	bf00      	nop
 8003c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c66:	bc08      	pop	{r3}
 8003c68:	469e      	mov	lr, r3
 8003c6a:	4770      	bx	lr
