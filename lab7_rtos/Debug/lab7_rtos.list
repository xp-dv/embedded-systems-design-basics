
lab7_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b14  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08005ca4  08005ca4  00006ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dc0  08005dc0  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005dc0  08005dc0  00006dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dc8  08005dc8  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dc8  08005dc8  00006dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005dcc  08005dcc  00006dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005dd0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          00001c24  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001c84  20001c84  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   000181de  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fc6  00000000  00000000  0001f26e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001310  00000000  00000000  00022238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eea  00000000  00000000  00023548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002efc  00000000  00000000  00024432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016b7b  00000000  00000000  0002732e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000adf9f  00000000  00000000  0003dea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ebe48  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005344  00000000  00000000  000ebe8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  000f11d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c8c 	.word	0x08005c8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005c8c 	.word	0x08005c8c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e4:	f000 fab8 	bl	8000758 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e8:	f000 f842 	bl	8000270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ec:	f000 f8ac 	bl	8000348 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001f0:	f000 f87a 	bl	80002e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001f4:	f002 feb0 	bl	8002f58 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001f8:	4a11      	ldr	r2, [pc, #68]	@ (8000240 <main+0x60>)
 80001fa:	2100      	movs	r1, #0
 80001fc:	4811      	ldr	r0, [pc, #68]	@ (8000244 <main+0x64>)
 80001fe:	f002 ff13 	bl	8003028 <osThreadNew>
 8000202:	4603      	mov	r3, r0
 8000204:	4a10      	ldr	r2, [pc, #64]	@ (8000248 <main+0x68>)
 8000206:	6013      	str	r3, [r2, #0]

  /* creation of blink_1 */
  blink_1Handle = osThreadNew(start_blink_1, NULL, &blink_1_attributes);
 8000208:	4a10      	ldr	r2, [pc, #64]	@ (800024c <main+0x6c>)
 800020a:	2100      	movs	r1, #0
 800020c:	4810      	ldr	r0, [pc, #64]	@ (8000250 <main+0x70>)
 800020e:	f002 ff0b 	bl	8003028 <osThreadNew>
 8000212:	4603      	mov	r3, r0
 8000214:	4a0f      	ldr	r2, [pc, #60]	@ (8000254 <main+0x74>)
 8000216:	6013      	str	r3, [r2, #0]

  /* creation of blink_2 */
  blink_2Handle = osThreadNew(start_blink_2, NULL, &blink_2_attributes);
 8000218:	4a0f      	ldr	r2, [pc, #60]	@ (8000258 <main+0x78>)
 800021a:	2100      	movs	r1, #0
 800021c:	480f      	ldr	r0, [pc, #60]	@ (800025c <main+0x7c>)
 800021e:	f002 ff03 	bl	8003028 <osThreadNew>
 8000222:	4603      	mov	r3, r0
 8000224:	4a0e      	ldr	r2, [pc, #56]	@ (8000260 <main+0x80>)
 8000226:	6013      	str	r3, [r2, #0]

  /* creation of print_button */
  print_buttonHandle = osThreadNew(start_print_button, NULL, &print_button_attributes);
 8000228:	4a0e      	ldr	r2, [pc, #56]	@ (8000264 <main+0x84>)
 800022a:	2100      	movs	r1, #0
 800022c:	480e      	ldr	r0, [pc, #56]	@ (8000268 <main+0x88>)
 800022e:	f002 fefb 	bl	8003028 <osThreadNew>
 8000232:	4603      	mov	r3, r0
 8000234:	4a0d      	ldr	r2, [pc, #52]	@ (800026c <main+0x8c>)
 8000236:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000238:	f002 fec2 	bl	8002fc0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800023c:	bf00      	nop
 800023e:	e7fd      	b.n	800023c <main+0x5c>
 8000240:	08005cf8 	.word	0x08005cf8
 8000244:	080003f5 	.word	0x080003f5
 8000248:	20000104 	.word	0x20000104
 800024c:	08005d1c 	.word	0x08005d1c
 8000250:	08000405 	.word	0x08000405
 8000254:	20000108 	.word	0x20000108
 8000258:	08005d40 	.word	0x08005d40
 800025c:	08000425 	.word	0x08000425
 8000260:	2000010c 	.word	0x2000010c
 8000264:	08005d64 	.word	0x08005d64
 8000268:	08000445 	.word	0x08000445
 800026c:	20000110 	.word	0x20000110

08000270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b090      	sub	sp, #64	@ 0x40
 8000274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000276:	f107 0318 	add.w	r3, r7, #24
 800027a:	2228      	movs	r2, #40	@ 0x28
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f005 fc1c 	bl	8005abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	605a      	str	r2, [r3, #4]
 800028c:	609a      	str	r2, [r3, #8]
 800028e:	60da      	str	r2, [r3, #12]
 8000290:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000292:	2302      	movs	r3, #2
 8000294:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000296:	2301      	movs	r3, #1
 8000298:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029a:	2310      	movs	r3, #16
 800029c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800029e:	2300      	movs	r3, #0
 80002a0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a2:	f107 0318 	add.w	r3, r7, #24
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 fd12 	bl	8000cd0 <HAL_RCC_OscConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002b2:	f000 f903 	bl	80004bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b6:	230f      	movs	r3, #15
 80002b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f001 fd3c 	bl	8001d4c <HAL_RCC_ClockConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002da:	f000 f8ef 	bl	80004bc <Error_Handler>
  }
}
 80002de:	bf00      	nop
 80002e0:	3740      	adds	r7, #64	@ 0x40
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002ec:	4b14      	ldr	r3, [pc, #80]	@ (8000340 <MX_USART2_UART_Init+0x58>)
 80002ee:	4a15      	ldr	r2, [pc, #84]	@ (8000344 <MX_USART2_UART_Init+0x5c>)
 80002f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80002f2:	4b13      	ldr	r3, [pc, #76]	@ (8000340 <MX_USART2_UART_Init+0x58>)
 80002f4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80002f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002fa:	4b11      	ldr	r3, [pc, #68]	@ (8000340 <MX_USART2_UART_Init+0x58>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000300:	4b0f      	ldr	r3, [pc, #60]	@ (8000340 <MX_USART2_UART_Init+0x58>)
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000306:	4b0e      	ldr	r3, [pc, #56]	@ (8000340 <MX_USART2_UART_Init+0x58>)
 8000308:	2200      	movs	r2, #0
 800030a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800030c:	4b0c      	ldr	r3, [pc, #48]	@ (8000340 <MX_USART2_UART_Init+0x58>)
 800030e:	220c      	movs	r2, #12
 8000310:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000312:	4b0b      	ldr	r3, [pc, #44]	@ (8000340 <MX_USART2_UART_Init+0x58>)
 8000314:	2200      	movs	r2, #0
 8000316:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000318:	4b09      	ldr	r3, [pc, #36]	@ (8000340 <MX_USART2_UART_Init+0x58>)
 800031a:	2200      	movs	r2, #0
 800031c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800031e:	4b08      	ldr	r3, [pc, #32]	@ (8000340 <MX_USART2_UART_Init+0x58>)
 8000320:	2200      	movs	r2, #0
 8000322:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000324:	4b06      	ldr	r3, [pc, #24]	@ (8000340 <MX_USART2_UART_Init+0x58>)
 8000326:	2200      	movs	r2, #0
 8000328:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800032a:	4805      	ldr	r0, [pc, #20]	@ (8000340 <MX_USART2_UART_Init+0x58>)
 800032c:	f002 f9ea 	bl	8002704 <HAL_UART_Init>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000336:	f000 f8c1 	bl	80004bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	2000007c 	.word	0x2000007c
 8000344:	40004400 	.word	0x40004400

08000348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b088      	sub	sp, #32
 800034c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034e:	f107 030c 	add.w	r3, r7, #12
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]
 8000358:	609a      	str	r2, [r3, #8]
 800035a:	60da      	str	r2, [r3, #12]
 800035c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800035e:	4b23      	ldr	r3, [pc, #140]	@ (80003ec <MX_GPIO_Init+0xa4>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	4a22      	ldr	r2, [pc, #136]	@ (80003ec <MX_GPIO_Init+0xa4>)
 8000364:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000368:	6153      	str	r3, [r2, #20]
 800036a:	4b20      	ldr	r3, [pc, #128]	@ (80003ec <MX_GPIO_Init+0xa4>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000372:	60bb      	str	r3, [r7, #8]
 8000374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000376:	4b1d      	ldr	r3, [pc, #116]	@ (80003ec <MX_GPIO_Init+0xa4>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	4a1c      	ldr	r2, [pc, #112]	@ (80003ec <MX_GPIO_Init+0xa4>)
 800037c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000380:	6153      	str	r3, [r2, #20]
 8000382:	4b1a      	ldr	r3, [pc, #104]	@ (80003ec <MX_GPIO_Init+0xa4>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800038e:	4b17      	ldr	r3, [pc, #92]	@ (80003ec <MX_GPIO_Init+0xa4>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	4a16      	ldr	r2, [pc, #88]	@ (80003ec <MX_GPIO_Init+0xa4>)
 8000394:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000398:	6153      	str	r3, [r2, #20]
 800039a:	4b14      	ldr	r3, [pc, #80]	@ (80003ec <MX_GPIO_Init+0xa4>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80003a2:	603b      	str	r3, [r7, #0]
 80003a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2130      	movs	r1, #48	@ 0x30
 80003aa:	4811      	ldr	r0, [pc, #68]	@ (80003f0 <MX_GPIO_Init+0xa8>)
 80003ac:	f000 fc5e 	bl	8000c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80003b0:	2308      	movs	r3, #8
 80003b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003b4:	2300      	movs	r3, #0
 80003b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003b8:	2302      	movs	r3, #2
 80003ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80003bc:	f107 030c 	add.w	r3, r7, #12
 80003c0:	4619      	mov	r1, r3
 80003c2:	480b      	ldr	r0, [pc, #44]	@ (80003f0 <MX_GPIO_Init+0xa8>)
 80003c4:	f000 fae0 	bl	8000988 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 80003c8:	2330      	movs	r3, #48	@ 0x30
 80003ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003cc:	2301      	movs	r3, #1
 80003ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d0:	2300      	movs	r3, #0
 80003d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d4:	2300      	movs	r3, #0
 80003d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003d8:	f107 030c 	add.w	r3, r7, #12
 80003dc:	4619      	mov	r1, r3
 80003de:	4804      	ldr	r0, [pc, #16]	@ (80003f0 <MX_GPIO_Init+0xa8>)
 80003e0:	f000 fad2 	bl	8000988 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003e4:	bf00      	nop
 80003e6:	3720      	adds	r7, #32
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	40021000 	.word	0x40021000
 80003f0:	48000400 	.word	0x48000400

080003f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80003fc:	2001      	movs	r0, #1
 80003fe:	f002 febd 	bl	800317c <osDelay>
 8000402:	e7fb      	b.n	80003fc <StartDefaultTask+0x8>

08000404 <start_blink_1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_blink_1 */
void start_blink_1(void *argument)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_blink_1 */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 800040c:	2110      	movs	r1, #16
 800040e:	4804      	ldr	r0, [pc, #16]	@ (8000420 <start_blink_1+0x1c>)
 8000410:	f000 fc44 	bl	8000c9c <HAL_GPIO_TogglePin>
    osDelay(BLINK_1_PERIOD/2);
 8000414:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000418:	f002 feb0 	bl	800317c <osDelay>
    HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 800041c:	bf00      	nop
 800041e:	e7f5      	b.n	800040c <start_blink_1+0x8>
 8000420:	48000400 	.word	0x48000400

08000424 <start_blink_2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_blink_2 */
void start_blink_2(void *argument)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_blink_2 */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 800042c:	2120      	movs	r1, #32
 800042e:	4804      	ldr	r0, [pc, #16]	@ (8000440 <start_blink_2+0x1c>)
 8000430:	f000 fc34 	bl	8000c9c <HAL_GPIO_TogglePin>
    osDelay(BLINK_2_PERIOD/2);
 8000434:	20fa      	movs	r0, #250	@ 0xfa
 8000436:	f002 fea1 	bl	800317c <osDelay>
    HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 800043a:	bf00      	nop
 800043c:	e7f6      	b.n	800042c <start_blink_2+0x8>
 800043e:	bf00      	nop
 8000440:	48000400 	.word	0x48000400

08000444 <start_print_button>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_print_button */
void start_print_button(void *argument)
{
 8000444:	b590      	push	{r4, r7, lr}
 8000446:	b087      	sub	sp, #28
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_print_button */
  char press_msg[] = "Button Pressed!";
 800044c:	4b0f      	ldr	r3, [pc, #60]	@ (800048c <start_print_button+0x48>)
 800044e:	f107 0408 	add.w	r4, r7, #8
 8000452:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000454:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* Infinite loop */
  for(;;)
  {
    // Read using Input Data Register
    // IDR & 0x0000_0008U (Check if Pin 3 of the GPIO Port B Input Data Register == 1)
    if (BUTTON_GPIO_Port->IDR & BUTTON_Pin) {
 8000458:	4b0d      	ldr	r3, [pc, #52]	@ (8000490 <start_print_button+0x4c>)
 800045a:	691b      	ldr	r3, [r3, #16]
 800045c:	f003 0308 	and.w	r3, r3, #8
 8000460:	2b00      	cmp	r3, #0
 8000462:	d00f      	beq.n	8000484 <start_print_button+0x40>
      HAL_UART_Transmit(&huart2, (uint8_t*)press_msg, strlen(press_msg), HAL_TX_TIMEOUT);
 8000464:	f107 0308 	add.w	r3, r7, #8
 8000468:	4618      	mov	r0, r3
 800046a:	f7ff feb1 	bl	80001d0 <strlen>
 800046e:	4603      	mov	r3, r0
 8000470:	b29a      	uxth	r2, r3
 8000472:	f107 0108 	add.w	r1, r7, #8
 8000476:	230a      	movs	r3, #10
 8000478:	4806      	ldr	r0, [pc, #24]	@ (8000494 <start_print_button+0x50>)
 800047a:	f002 f991 	bl	80027a0 <HAL_UART_Transmit>
      osDelay(DEBOUNCE_DELAY);
 800047e:	20fa      	movs	r0, #250	@ 0xfa
 8000480:	f002 fe7c 	bl	800317c <osDelay>
    }
    osDelay(1);
 8000484:	2001      	movs	r0, #1
 8000486:	f002 fe79 	bl	800317c <osDelay>
    if (BUTTON_GPIO_Port->IDR & BUTTON_Pin) {
 800048a:	e7e5      	b.n	8000458 <start_print_button+0x14>
 800048c:	08005cd0 	.word	0x08005cd0
 8000490:	48000400 	.word	0x48000400
 8000494:	2000007c 	.word	0x2000007c

08000498 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a04      	ldr	r2, [pc, #16]	@ (80004b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d101      	bne.n	80004ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004aa:	f000 f96b 	bl	8000784 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004ae:	bf00      	nop
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40001000 	.word	0x40001000

080004bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c0:	b672      	cpsid	i
}
 80004c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c4:	bf00      	nop
 80004c6:	e7fd      	b.n	80004c4 <Error_Handler+0x8>

080004c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ce:	4b11      	ldr	r3, [pc, #68]	@ (8000514 <HAL_MspInit+0x4c>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	4a10      	ldr	r2, [pc, #64]	@ (8000514 <HAL_MspInit+0x4c>)
 80004d4:	f043 0301 	orr.w	r3, r3, #1
 80004d8:	6193      	str	r3, [r2, #24]
 80004da:	4b0e      	ldr	r3, [pc, #56]	@ (8000514 <HAL_MspInit+0x4c>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000514 <HAL_MspInit+0x4c>)
 80004e8:	69db      	ldr	r3, [r3, #28]
 80004ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000514 <HAL_MspInit+0x4c>)
 80004ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004f0:	61d3      	str	r3, [r2, #28]
 80004f2:	4b08      	ldr	r3, [pc, #32]	@ (8000514 <HAL_MspInit+0x4c>)
 80004f4:	69db      	ldr	r3, [r3, #28]
 80004f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004fa:	603b      	str	r3, [r7, #0]
 80004fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	210f      	movs	r1, #15
 8000502:	f06f 0001 	mvn.w	r0, #1
 8000506:	f000 fa15 	bl	8000934 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40021000 	.word	0x40021000

08000518 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08a      	sub	sp, #40	@ 0x28
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000520:	f107 0314 	add.w	r3, r7, #20
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a18      	ldr	r2, [pc, #96]	@ (8000598 <HAL_UART_MspInit+0x80>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d129      	bne.n	800058e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800053a:	4b18      	ldr	r3, [pc, #96]	@ (800059c <HAL_UART_MspInit+0x84>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	4a17      	ldr	r2, [pc, #92]	@ (800059c <HAL_UART_MspInit+0x84>)
 8000540:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000544:	61d3      	str	r3, [r2, #28]
 8000546:	4b15      	ldr	r3, [pc, #84]	@ (800059c <HAL_UART_MspInit+0x84>)
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800054e:	613b      	str	r3, [r7, #16]
 8000550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	4b12      	ldr	r3, [pc, #72]	@ (800059c <HAL_UART_MspInit+0x84>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	4a11      	ldr	r2, [pc, #68]	@ (800059c <HAL_UART_MspInit+0x84>)
 8000558:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800055c:	6153      	str	r3, [r2, #20]
 800055e:	4b0f      	ldr	r3, [pc, #60]	@ (800059c <HAL_UART_MspInit+0x84>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800056a:	f248 0304 	movw	r3, #32772	@ 0x8004
 800056e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000570:	2302      	movs	r3, #2
 8000572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000578:	2303      	movs	r3, #3
 800057a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800057c:	2307      	movs	r3, #7
 800057e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	4619      	mov	r1, r3
 8000586:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800058a:	f000 f9fd 	bl	8000988 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800058e:	bf00      	nop
 8000590:	3728      	adds	r7, #40	@ 0x28
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40004400 	.word	0x40004400
 800059c:	40021000 	.word	0x40021000

080005a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08e      	sub	sp, #56	@ 0x38
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80005a8:	2300      	movs	r3, #0
 80005aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80005ac:	2300      	movs	r3, #0
 80005ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80005b0:	4b33      	ldr	r3, [pc, #204]	@ (8000680 <HAL_InitTick+0xe0>)
 80005b2:	69db      	ldr	r3, [r3, #28]
 80005b4:	4a32      	ldr	r2, [pc, #200]	@ (8000680 <HAL_InitTick+0xe0>)
 80005b6:	f043 0310 	orr.w	r3, r3, #16
 80005ba:	61d3      	str	r3, [r2, #28]
 80005bc:	4b30      	ldr	r3, [pc, #192]	@ (8000680 <HAL_InitTick+0xe0>)
 80005be:	69db      	ldr	r3, [r3, #28]
 80005c0:	f003 0310 	and.w	r3, r3, #16
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005c8:	f107 0210 	add.w	r2, r7, #16
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	4611      	mov	r1, r2
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fdda 	bl	800218c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80005d8:	6a3b      	ldr	r3, [r7, #32]
 80005da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80005dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d103      	bne.n	80005ea <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80005e2:	f001 fd8f 	bl	8002104 <HAL_RCC_GetPCLK1Freq>
 80005e6:	6378      	str	r0, [r7, #52]	@ 0x34
 80005e8:	e004      	b.n	80005f4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80005ea:	f001 fd8b 	bl	8002104 <HAL_RCC_GetPCLK1Freq>
 80005ee:	4603      	mov	r3, r0
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005f6:	4a23      	ldr	r2, [pc, #140]	@ (8000684 <HAL_InitTick+0xe4>)
 80005f8:	fba2 2303 	umull	r2, r3, r2, r3
 80005fc:	0c9b      	lsrs	r3, r3, #18
 80005fe:	3b01      	subs	r3, #1
 8000600:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000602:	4b21      	ldr	r3, [pc, #132]	@ (8000688 <HAL_InitTick+0xe8>)
 8000604:	4a21      	ldr	r2, [pc, #132]	@ (800068c <HAL_InitTick+0xec>)
 8000606:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000608:	4b1f      	ldr	r3, [pc, #124]	@ (8000688 <HAL_InitTick+0xe8>)
 800060a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800060e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000610:	4a1d      	ldr	r2, [pc, #116]	@ (8000688 <HAL_InitTick+0xe8>)
 8000612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000614:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000616:	4b1c      	ldr	r3, [pc, #112]	@ (8000688 <HAL_InitTick+0xe8>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800061c:	4b1a      	ldr	r3, [pc, #104]	@ (8000688 <HAL_InitTick+0xe8>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000622:	4b19      	ldr	r3, [pc, #100]	@ (8000688 <HAL_InitTick+0xe8>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000628:	4817      	ldr	r0, [pc, #92]	@ (8000688 <HAL_InitTick+0xe8>)
 800062a:	f001 fde1 	bl	80021f0 <HAL_TIM_Base_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000634:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000638:	2b00      	cmp	r3, #0
 800063a:	d11b      	bne.n	8000674 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800063c:	4812      	ldr	r0, [pc, #72]	@ (8000688 <HAL_InitTick+0xe8>)
 800063e:	f001 fe39 	bl	80022b4 <HAL_TIM_Base_Start_IT>
 8000642:	4603      	mov	r3, r0
 8000644:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000648:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800064c:	2b00      	cmp	r3, #0
 800064e:	d111      	bne.n	8000674 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000650:	2036      	movs	r0, #54	@ 0x36
 8000652:	f000 f98b 	bl	800096c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b0f      	cmp	r3, #15
 800065a:	d808      	bhi.n	800066e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority, 0U);
 800065c:	2200      	movs	r2, #0
 800065e:	6879      	ldr	r1, [r7, #4]
 8000660:	2036      	movs	r0, #54	@ 0x36
 8000662:	f000 f967 	bl	8000934 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000666:	4a0a      	ldr	r2, [pc, #40]	@ (8000690 <HAL_InitTick+0xf0>)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	e002      	b.n	8000674 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800066e:	2301      	movs	r3, #1
 8000670:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000674:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000678:	4618      	mov	r0, r3
 800067a:	3738      	adds	r7, #56	@ 0x38
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40021000 	.word	0x40021000
 8000684:	431bde83 	.word	0x431bde83
 8000688:	20000114 	.word	0x20000114
 800068c:	40001000 	.word	0x40001000
 8000690:	20000004 	.word	0x20000004

08000694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <NMI_Handler+0x4>

0800069c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <HardFault_Handler+0x4>

080006a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <MemManage_Handler+0x4>

080006ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <BusFault_Handler+0x4>

080006b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <UsageFault_Handler+0x4>

080006bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
	...

080006cc <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80006d0:	4802      	ldr	r0, [pc, #8]	@ (80006dc <TIM6_DAC1_IRQHandler+0x10>)
 80006d2:	f001 fe4b 	bl	800236c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000114 	.word	0x20000114

080006e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006e4:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <SystemInit+0x20>)
 80006e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006ea:	4a05      	ldr	r2, [pc, #20]	@ (8000700 <SystemInit+0x20>)
 80006ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e000ed00 	.word	0xe000ed00

08000704 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000704:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800073c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000708:	f7ff ffea 	bl	80006e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800070c:	480c      	ldr	r0, [pc, #48]	@ (8000740 <LoopForever+0x6>)
  ldr r1, =_edata
 800070e:	490d      	ldr	r1, [pc, #52]	@ (8000744 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000710:	4a0d      	ldr	r2, [pc, #52]	@ (8000748 <LoopForever+0xe>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000714:	e002      	b.n	800071c <LoopCopyDataInit>

08000716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800071a:	3304      	adds	r3, #4

0800071c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800071c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000720:	d3f9      	bcc.n	8000716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000722:	4a0a      	ldr	r2, [pc, #40]	@ (800074c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000724:	4c0a      	ldr	r4, [pc, #40]	@ (8000750 <LoopForever+0x16>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000728:	e001      	b.n	800072e <LoopFillZerobss>

0800072a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800072a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800072c:	3204      	adds	r2, #4

0800072e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000730:	d3fb      	bcc.n	800072a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000732:	f005 fa21 	bl	8005b78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000736:	f7ff fd53 	bl	80001e0 <main>

0800073a <LoopForever>:

LoopForever:
    b LoopForever
 800073a:	e7fe      	b.n	800073a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800073c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000744:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000748:	08005dd0 	.word	0x08005dd0
  ldr r2, =_sbss
 800074c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000750:	20001c84 	.word	0x20001c84

08000754 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000754:	e7fe      	b.n	8000754 <ADC1_2_IRQHandler>
	...

08000758 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800075c:	4b08      	ldr	r3, [pc, #32]	@ (8000780 <HAL_Init+0x28>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a07      	ldr	r2, [pc, #28]	@ (8000780 <HAL_Init+0x28>)
 8000762:	f043 0310 	orr.w	r3, r3, #16
 8000766:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000768:	2003      	movs	r0, #3
 800076a:	f000 f8d8 	bl	800091e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800076e:	200f      	movs	r0, #15
 8000770:	f7ff ff16 	bl	80005a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000774:	f7ff fea8 	bl	80004c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000778:	2300      	movs	r3, #0
}
 800077a:	4618      	mov	r0, r3
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40022000 	.word	0x40022000

08000784 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <HAL_IncTick+0x20>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <HAL_IncTick+0x24>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4413      	add	r3, r2
 8000794:	4a04      	ldr	r2, [pc, #16]	@ (80007a8 <HAL_IncTick+0x24>)
 8000796:	6013      	str	r3, [r2, #0]
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	20000008 	.word	0x20000008
 80007a8:	20000160 	.word	0x20000160

080007ac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return uwTick;  
 80007b0:	4b03      	ldr	r3, [pc, #12]	@ (80007c0 <HAL_GetTick+0x14>)
 80007b2:	681b      	ldr	r3, [r3, #0]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	20000160 	.word	0x20000160

080007c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007da:	68ba      	ldr	r2, [r7, #8]
 80007dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007e0:	4013      	ands	r3, r2
 80007e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007f6:	4a04      	ldr	r2, [pc, #16]	@ (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	60d3      	str	r3, [r2, #12]
}
 80007fc:	bf00      	nop
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000810:	4b04      	ldr	r3, [pc, #16]	@ (8000824 <__NVIC_GetPriorityGrouping+0x18>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	0a1b      	lsrs	r3, r3, #8
 8000816:	f003 0307 	and.w	r3, r3, #7
}
 800081a:	4618      	mov	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000836:	2b00      	cmp	r3, #0
 8000838:	db0b      	blt.n	8000852 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	f003 021f 	and.w	r2, r3, #31
 8000840:	4907      	ldr	r1, [pc, #28]	@ (8000860 <__NVIC_EnableIRQ+0x38>)
 8000842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000846:	095b      	lsrs	r3, r3, #5
 8000848:	2001      	movs	r0, #1
 800084a:	fa00 f202 	lsl.w	r2, r0, r2
 800084e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000e100 	.word	0xe000e100

08000864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	6039      	str	r1, [r7, #0]
 800086e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000874:	2b00      	cmp	r3, #0
 8000876:	db0a      	blt.n	800088e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	b2da      	uxtb	r2, r3
 800087c:	490c      	ldr	r1, [pc, #48]	@ (80008b0 <__NVIC_SetPriority+0x4c>)
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	0112      	lsls	r2, r2, #4
 8000884:	b2d2      	uxtb	r2, r2
 8000886:	440b      	add	r3, r1
 8000888:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800088c:	e00a      	b.n	80008a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4908      	ldr	r1, [pc, #32]	@ (80008b4 <__NVIC_SetPriority+0x50>)
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 030f 	and.w	r3, r3, #15
 800089a:	3b04      	subs	r3, #4
 800089c:	0112      	lsls	r2, r2, #4
 800089e:	b2d2      	uxtb	r2, r2
 80008a0:	440b      	add	r3, r1
 80008a2:	761a      	strb	r2, [r3, #24]
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	e000e100 	.word	0xe000e100
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b089      	sub	sp, #36	@ 0x24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	f1c3 0307 	rsb	r3, r3, #7
 80008d2:	2b04      	cmp	r3, #4
 80008d4:	bf28      	it	cs
 80008d6:	2304      	movcs	r3, #4
 80008d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	3304      	adds	r3, #4
 80008de:	2b06      	cmp	r3, #6
 80008e0:	d902      	bls.n	80008e8 <NVIC_EncodePriority+0x30>
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	3b03      	subs	r3, #3
 80008e6:	e000      	b.n	80008ea <NVIC_EncodePriority+0x32>
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ec:	f04f 32ff 	mov.w	r2, #4294967295
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	43da      	mvns	r2, r3
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	401a      	ands	r2, r3
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000900:	f04f 31ff 	mov.w	r1, #4294967295
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	fa01 f303 	lsl.w	r3, r1, r3
 800090a:	43d9      	mvns	r1, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000910:	4313      	orrs	r3, r2
         );
}
 8000912:	4618      	mov	r0, r3
 8000914:	3724      	adds	r7, #36	@ 0x24
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f7ff ff4c 	bl	80007c4 <__NVIC_SetPriorityGrouping>
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
 8000940:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000946:	f7ff ff61 	bl	800080c <__NVIC_GetPriorityGrouping>
 800094a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	68b9      	ldr	r1, [r7, #8]
 8000950:	6978      	ldr	r0, [r7, #20]
 8000952:	f7ff ffb1 	bl	80008b8 <NVIC_EncodePriority>
 8000956:	4602      	mov	r2, r0
 8000958:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800095c:	4611      	mov	r1, r2
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ff80 	bl	8000864 <__NVIC_SetPriority>
}
 8000964:	bf00      	nop
 8000966:	3718      	adds	r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff ff54 	bl	8000828 <__NVIC_EnableIRQ>
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000988:	b480      	push	{r7}
 800098a:	b087      	sub	sp, #28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000996:	e14e      	b.n	8000c36 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	2101      	movs	r1, #1
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	fa01 f303 	lsl.w	r3, r1, r3
 80009a4:	4013      	ands	r3, r2
 80009a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	f000 8140 	beq.w	8000c30 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f003 0303 	and.w	r3, r3, #3
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d005      	beq.n	80009c8 <HAL_GPIO_Init+0x40>
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	f003 0303 	and.w	r3, r3, #3
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	d130      	bne.n	8000a2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	2203      	movs	r2, #3
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	43db      	mvns	r3, r3
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	4013      	ands	r3, r2
 80009de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	68da      	ldr	r2, [r3, #12]
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009fe:	2201      	movs	r2, #1
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43db      	mvns	r3, r3
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	091b      	lsrs	r3, r3, #4
 8000a14:	f003 0201 	and.w	r2, r3, #1
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	f003 0303 	and.w	r3, r3, #3
 8000a32:	2b03      	cmp	r3, #3
 8000a34:	d017      	beq.n	8000a66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	68db      	ldr	r3, [r3, #12]
 8000a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	2203      	movs	r2, #3
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	43db      	mvns	r3, r3
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	689a      	ldr	r2, [r3, #8]
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f003 0303 	and.w	r3, r3, #3
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d123      	bne.n	8000aba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	08da      	lsrs	r2, r3, #3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	3208      	adds	r2, #8
 8000a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	220f      	movs	r2, #15
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	4013      	ands	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	691a      	ldr	r2, [r3, #16]
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	f003 0307 	and.w	r3, r3, #7
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	08da      	lsrs	r2, r3, #3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3208      	adds	r2, #8
 8000ab4:	6939      	ldr	r1, [r7, #16]
 8000ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	2203      	movs	r2, #3
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43db      	mvns	r3, r3
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f003 0203 	and.w	r2, r3, #3
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f000 809a 	beq.w	8000c30 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afc:	4b55      	ldr	r3, [pc, #340]	@ (8000c54 <HAL_GPIO_Init+0x2cc>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a54      	ldr	r2, [pc, #336]	@ (8000c54 <HAL_GPIO_Init+0x2cc>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b52      	ldr	r3, [pc, #328]	@ (8000c54 <HAL_GPIO_Init+0x2cc>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b14:	4a50      	ldr	r2, [pc, #320]	@ (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	089b      	lsrs	r3, r3, #2
 8000b1a:	3302      	adds	r3, #2
 8000b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	f003 0303 	and.w	r3, r3, #3
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	220f      	movs	r2, #15
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	43db      	mvns	r3, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4013      	ands	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b3e:	d013      	beq.n	8000b68 <HAL_GPIO_Init+0x1e0>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a46      	ldr	r2, [pc, #280]	@ (8000c5c <HAL_GPIO_Init+0x2d4>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d00d      	beq.n	8000b64 <HAL_GPIO_Init+0x1dc>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a45      	ldr	r2, [pc, #276]	@ (8000c60 <HAL_GPIO_Init+0x2d8>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d007      	beq.n	8000b60 <HAL_GPIO_Init+0x1d8>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a44      	ldr	r2, [pc, #272]	@ (8000c64 <HAL_GPIO_Init+0x2dc>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d101      	bne.n	8000b5c <HAL_GPIO_Init+0x1d4>
 8000b58:	2303      	movs	r3, #3
 8000b5a:	e006      	b.n	8000b6a <HAL_GPIO_Init+0x1e2>
 8000b5c:	2305      	movs	r3, #5
 8000b5e:	e004      	b.n	8000b6a <HAL_GPIO_Init+0x1e2>
 8000b60:	2302      	movs	r3, #2
 8000b62:	e002      	b.n	8000b6a <HAL_GPIO_Init+0x1e2>
 8000b64:	2301      	movs	r3, #1
 8000b66:	e000      	b.n	8000b6a <HAL_GPIO_Init+0x1e2>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	f002 0203 	and.w	r2, r2, #3
 8000b70:	0092      	lsls	r2, r2, #2
 8000b72:	4093      	lsls	r3, r2
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b7a:	4937      	ldr	r1, [pc, #220]	@ (8000c58 <HAL_GPIO_Init+0x2d0>)
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	089b      	lsrs	r3, r3, #2
 8000b80:	3302      	adds	r3, #2
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b88:	4b37      	ldr	r3, [pc, #220]	@ (8000c68 <HAL_GPIO_Init+0x2e0>)
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	43db      	mvns	r3, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4013      	ands	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d003      	beq.n	8000bac <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bac:	4a2e      	ldr	r2, [pc, #184]	@ (8000c68 <HAL_GPIO_Init+0x2e0>)
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bb2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c68 <HAL_GPIO_Init+0x2e0>)
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d003      	beq.n	8000bd6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bd6:	4a24      	ldr	r2, [pc, #144]	@ (8000c68 <HAL_GPIO_Init+0x2e0>)
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000bdc:	4b22      	ldr	r3, [pc, #136]	@ (8000c68 <HAL_GPIO_Init+0x2e0>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	43db      	mvns	r3, r3
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	4013      	ands	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d003      	beq.n	8000c00 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c00:	4a19      	ldr	r2, [pc, #100]	@ (8000c68 <HAL_GPIO_Init+0x2e0>)
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c06:	4b18      	ldr	r3, [pc, #96]	@ (8000c68 <HAL_GPIO_Init+0x2e0>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	4013      	ands	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d003      	beq.n	8000c2a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c68 <HAL_GPIO_Init+0x2e0>)
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	3301      	adds	r3, #1
 8000c34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	f47f aea9 	bne.w	8000998 <HAL_GPIO_Init+0x10>
  }
}
 8000c46:	bf00      	nop
 8000c48:	bf00      	nop
 8000c4a:	371c      	adds	r7, #28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40010000 	.word	0x40010000
 8000c5c:	48000400 	.word	0x48000400
 8000c60:	48000800 	.word	0x48000800
 8000c64:	48000c00 	.word	0x48000c00
 8000c68:	40010400 	.word	0x40010400

08000c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	807b      	strh	r3, [r7, #2]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c7c:	787b      	ldrb	r3, [r7, #1]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d003      	beq.n	8000c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c82:	887a      	ldrh	r2, [r7, #2]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c88:	e002      	b.n	8000c90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c8a:	887a      	ldrh	r2, [r7, #2]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	695b      	ldr	r3, [r3, #20]
 8000cac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000cae:	887a      	ldrh	r2, [r7, #2]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	041a      	lsls	r2, r3, #16
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	43d9      	mvns	r1, r3
 8000cba:	887b      	ldrh	r3, [r7, #2]
 8000cbc:	400b      	ands	r3, r1
 8000cbe:	431a      	orrs	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	619a      	str	r2, [r3, #24]
}
 8000cc4:	bf00      	nop
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000cdc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ce0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ce2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ce6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	f001 b823 	b.w	8001d3c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000cfa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f000 817d 	beq.w	8001006 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d0c:	4bbc      	ldr	r3, [pc, #752]	@ (8001000 <HAL_RCC_OscConfig+0x330>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 030c 	and.w	r3, r3, #12
 8000d14:	2b04      	cmp	r3, #4
 8000d16:	d00c      	beq.n	8000d32 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d18:	4bb9      	ldr	r3, [pc, #740]	@ (8001000 <HAL_RCC_OscConfig+0x330>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 030c 	and.w	r3, r3, #12
 8000d20:	2b08      	cmp	r3, #8
 8000d22:	d15c      	bne.n	8000dde <HAL_RCC_OscConfig+0x10e>
 8000d24:	4bb6      	ldr	r3, [pc, #728]	@ (8001000 <HAL_RCC_OscConfig+0x330>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d30:	d155      	bne.n	8000dde <HAL_RCC_OscConfig+0x10e>
 8000d32:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d36:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d3a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000d3e:	fa93 f3a3 	rbit	r3, r3
 8000d42:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d46:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d4a:	fab3 f383 	clz	r3, r3
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	095b      	lsrs	r3, r3, #5
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d102      	bne.n	8000d64 <HAL_RCC_OscConfig+0x94>
 8000d5e:	4ba8      	ldr	r3, [pc, #672]	@ (8001000 <HAL_RCC_OscConfig+0x330>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	e015      	b.n	8000d90 <HAL_RCC_OscConfig+0xc0>
 8000d64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d68:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d6c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000d70:	fa93 f3a3 	rbit	r3, r3
 8000d74:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000d78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d7c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000d80:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000d84:	fa93 f3a3 	rbit	r3, r3
 8000d88:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000d8c:	4b9c      	ldr	r3, [pc, #624]	@ (8001000 <HAL_RCC_OscConfig+0x330>)
 8000d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d90:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d94:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000d98:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000d9c:	fa92 f2a2 	rbit	r2, r2
 8000da0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000da4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000da8:	fab2 f282 	clz	r2, r2
 8000dac:	b2d2      	uxtb	r2, r2
 8000dae:	f042 0220 	orr.w	r2, r2, #32
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	f002 021f 	and.w	r2, r2, #31
 8000db8:	2101      	movs	r1, #1
 8000dba:	fa01 f202 	lsl.w	r2, r1, r2
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	f000 811f 	beq.w	8001004 <HAL_RCC_OscConfig+0x334>
 8000dc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000dca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f040 8116 	bne.w	8001004 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	f000 bfaf 	b.w	8001d3c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000de2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dee:	d106      	bne.n	8000dfe <HAL_RCC_OscConfig+0x12e>
 8000df0:	4b83      	ldr	r3, [pc, #524]	@ (8001000 <HAL_RCC_OscConfig+0x330>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a82      	ldr	r2, [pc, #520]	@ (8001000 <HAL_RCC_OscConfig+0x330>)
 8000df6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	e036      	b.n	8000e6c <HAL_RCC_OscConfig+0x19c>
 8000dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d10c      	bne.n	8000e28 <HAL_RCC_OscConfig+0x158>
 8000e0e:	4b7c      	ldr	r3, [pc, #496]	@ (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a7b      	ldr	r2, [pc, #492]	@ (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	4b79      	ldr	r3, [pc, #484]	@ (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a78      	ldr	r2, [pc, #480]	@ (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e24:	6013      	str	r3, [r2, #0]
 8000e26:	e021      	b.n	8000e6c <HAL_RCC_OscConfig+0x19c>
 8000e28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e38:	d10c      	bne.n	8000e54 <HAL_RCC_OscConfig+0x184>
 8000e3a:	4b71      	ldr	r3, [pc, #452]	@ (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a70      	ldr	r2, [pc, #448]	@ (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	4b6e      	ldr	r3, [pc, #440]	@ (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a6d      	ldr	r2, [pc, #436]	@ (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	e00b      	b.n	8000e6c <HAL_RCC_OscConfig+0x19c>
 8000e54:	4b6a      	ldr	r3, [pc, #424]	@ (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a69      	ldr	r2, [pc, #420]	@ (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e5e:	6013      	str	r3, [r2, #0]
 8000e60:	4b67      	ldr	r3, [pc, #412]	@ (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a66      	ldr	r2, [pc, #408]	@ (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e6a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e6c:	4b64      	ldr	r3, [pc, #400]	@ (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e70:	f023 020f 	bic.w	r2, r3, #15
 8000e74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	495f      	ldr	r1, [pc, #380]	@ (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e82:	4313      	orrs	r3, r2
 8000e84:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d059      	beq.n	8000f4a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e96:	f7ff fc89 	bl	80007ac <HAL_GetTick>
 8000e9a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e9e:	e00a      	b.n	8000eb6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ea0:	f7ff fc84 	bl	80007ac <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	2b64      	cmp	r3, #100	@ 0x64
 8000eae:	d902      	bls.n	8000eb6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	f000 bf43 	b.w	8001d3c <HAL_RCC_OscConfig+0x106c>
 8000eb6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000eba:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ebe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000ec2:	fa93 f3a3 	rbit	r3, r3
 8000ec6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8000eca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ece:	fab3 f383 	clz	r3, r3
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	095b      	lsrs	r3, r3, #5
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d102      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x218>
 8000ee2:	4b47      	ldr	r3, [pc, #284]	@ (8001000 <HAL_RCC_OscConfig+0x330>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	e015      	b.n	8000f14 <HAL_RCC_OscConfig+0x244>
 8000ee8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000eec:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000ef4:	fa93 f3a3 	rbit	r3, r3
 8000ef8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000efc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f00:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000f04:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000f08:	fa93 f3a3 	rbit	r3, r3
 8000f0c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000f10:	4b3b      	ldr	r3, [pc, #236]	@ (8001000 <HAL_RCC_OscConfig+0x330>)
 8000f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f14:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f18:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8000f1c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000f20:	fa92 f2a2 	rbit	r2, r2
 8000f24:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8000f28:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8000f2c:	fab2 f282 	clz	r2, r2
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	f042 0220 	orr.w	r2, r2, #32
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	f002 021f 	and.w	r2, r2, #31
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f42:	4013      	ands	r3, r2
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0ab      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x1d0>
 8000f48:	e05d      	b.n	8001006 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4a:	f7ff fc2f 	bl	80007ac <HAL_GetTick>
 8000f4e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f52:	e00a      	b.n	8000f6a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f54:	f7ff fc2a 	bl	80007ac <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	2b64      	cmp	r3, #100	@ 0x64
 8000f62:	d902      	bls.n	8000f6a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000f64:	2303      	movs	r3, #3
 8000f66:	f000 bee9 	b.w	8001d3c <HAL_RCC_OscConfig+0x106c>
 8000f6a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f6e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f72:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000f76:	fa93 f3a3 	rbit	r3, r3
 8000f7a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8000f7e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f82:	fab3 f383 	clz	r3, r3
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	095b      	lsrs	r3, r3, #5
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d102      	bne.n	8000f9c <HAL_RCC_OscConfig+0x2cc>
 8000f96:	4b1a      	ldr	r3, [pc, #104]	@ (8001000 <HAL_RCC_OscConfig+0x330>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	e015      	b.n	8000fc8 <HAL_RCC_OscConfig+0x2f8>
 8000f9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fa0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000fa8:	fa93 f3a3 	rbit	r3, r3
 8000fac:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000fb0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fb4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000fb8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8000fbc:	fa93 f3a3 	rbit	r3, r3
 8000fc0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001000 <HAL_RCC_OscConfig+0x330>)
 8000fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000fcc:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8000fd0:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000fd4:	fa92 f2a2 	rbit	r2, r2
 8000fd8:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8000fdc:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8000fe0:	fab2 f282 	clz	r2, r2
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	f042 0220 	orr.w	r2, r2, #32
 8000fea:	b2d2      	uxtb	r2, r2
 8000fec:	f002 021f 	and.w	r2, r2, #31
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1ab      	bne.n	8000f54 <HAL_RCC_OscConfig+0x284>
 8000ffc:	e003      	b.n	8001006 <HAL_RCC_OscConfig+0x336>
 8000ffe:	bf00      	nop
 8001000:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001006:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800100a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	f000 817d 	beq.w	8001316 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800101c:	4ba6      	ldr	r3, [pc, #664]	@ (80012b8 <HAL_RCC_OscConfig+0x5e8>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 030c 	and.w	r3, r3, #12
 8001024:	2b00      	cmp	r3, #0
 8001026:	d00b      	beq.n	8001040 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001028:	4ba3      	ldr	r3, [pc, #652]	@ (80012b8 <HAL_RCC_OscConfig+0x5e8>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 030c 	and.w	r3, r3, #12
 8001030:	2b08      	cmp	r3, #8
 8001032:	d172      	bne.n	800111a <HAL_RCC_OscConfig+0x44a>
 8001034:	4ba0      	ldr	r3, [pc, #640]	@ (80012b8 <HAL_RCC_OscConfig+0x5e8>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d16c      	bne.n	800111a <HAL_RCC_OscConfig+0x44a>
 8001040:	2302      	movs	r3, #2
 8001042:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001046:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800104a:	fa93 f3a3 	rbit	r3, r3
 800104e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001052:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001056:	fab3 f383 	clz	r3, r3
 800105a:	b2db      	uxtb	r3, r3
 800105c:	095b      	lsrs	r3, r3, #5
 800105e:	b2db      	uxtb	r3, r3
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b01      	cmp	r3, #1
 8001068:	d102      	bne.n	8001070 <HAL_RCC_OscConfig+0x3a0>
 800106a:	4b93      	ldr	r3, [pc, #588]	@ (80012b8 <HAL_RCC_OscConfig+0x5e8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	e013      	b.n	8001098 <HAL_RCC_OscConfig+0x3c8>
 8001070:	2302      	movs	r3, #2
 8001072:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001076:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800107a:	fa93 f3a3 	rbit	r3, r3
 800107e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001082:	2302      	movs	r3, #2
 8001084:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001088:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800108c:	fa93 f3a3 	rbit	r3, r3
 8001090:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001094:	4b88      	ldr	r3, [pc, #544]	@ (80012b8 <HAL_RCC_OscConfig+0x5e8>)
 8001096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001098:	2202      	movs	r2, #2
 800109a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800109e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80010a2:	fa92 f2a2 	rbit	r2, r2
 80010a6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80010aa:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80010ae:	fab2 f282 	clz	r2, r2
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	f042 0220 	orr.w	r2, r2, #32
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	f002 021f 	and.w	r2, r2, #31
 80010be:	2101      	movs	r1, #1
 80010c0:	fa01 f202 	lsl.w	r2, r1, r2
 80010c4:	4013      	ands	r3, r2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00a      	beq.n	80010e0 <HAL_RCC_OscConfig+0x410>
 80010ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d002      	beq.n	80010e0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	f000 be2e 	b.w	8001d3c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e0:	4b75      	ldr	r3, [pc, #468]	@ (80012b8 <HAL_RCC_OscConfig+0x5e8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	21f8      	movs	r1, #248	@ 0xf8
 80010f6:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fa:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80010fe:	fa91 f1a1 	rbit	r1, r1
 8001102:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001106:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800110a:	fab1 f181 	clz	r1, r1
 800110e:	b2c9      	uxtb	r1, r1
 8001110:	408b      	lsls	r3, r1
 8001112:	4969      	ldr	r1, [pc, #420]	@ (80012b8 <HAL_RCC_OscConfig+0x5e8>)
 8001114:	4313      	orrs	r3, r2
 8001116:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001118:	e0fd      	b.n	8001316 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800111a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800111e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	691b      	ldr	r3, [r3, #16]
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 8088 	beq.w	800123c <HAL_RCC_OscConfig+0x56c>
 800112c:	2301      	movs	r3, #1
 800112e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001132:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001136:	fa93 f3a3 	rbit	r3, r3
 800113a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800113e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001142:	fab3 f383 	clz	r3, r3
 8001146:	b2db      	uxtb	r3, r3
 8001148:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800114c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	461a      	mov	r2, r3
 8001154:	2301      	movs	r3, #1
 8001156:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001158:	f7ff fb28 	bl	80007ac <HAL_GetTick>
 800115c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001160:	e00a      	b.n	8001178 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001162:	f7ff fb23 	bl	80007ac <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d902      	bls.n	8001178 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	f000 bde2 	b.w	8001d3c <HAL_RCC_OscConfig+0x106c>
 8001178:	2302      	movs	r3, #2
 800117a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001182:	fa93 f3a3 	rbit	r3, r3
 8001186:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800118a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800118e:	fab3 f383 	clz	r3, r3
 8001192:	b2db      	uxtb	r3, r3
 8001194:	095b      	lsrs	r3, r3, #5
 8001196:	b2db      	uxtb	r3, r3
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d102      	bne.n	80011a8 <HAL_RCC_OscConfig+0x4d8>
 80011a2:	4b45      	ldr	r3, [pc, #276]	@ (80012b8 <HAL_RCC_OscConfig+0x5e8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	e013      	b.n	80011d0 <HAL_RCC_OscConfig+0x500>
 80011a8:	2302      	movs	r3, #2
 80011aa:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ae:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80011b2:	fa93 f3a3 	rbit	r3, r3
 80011b6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80011ba:	2302      	movs	r3, #2
 80011bc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80011c0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80011c4:	fa93 f3a3 	rbit	r3, r3
 80011c8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80011cc:	4b3a      	ldr	r3, [pc, #232]	@ (80012b8 <HAL_RCC_OscConfig+0x5e8>)
 80011ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d0:	2202      	movs	r2, #2
 80011d2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80011d6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80011da:	fa92 f2a2 	rbit	r2, r2
 80011de:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80011e2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80011e6:	fab2 f282 	clz	r2, r2
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	f042 0220 	orr.w	r2, r2, #32
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	f002 021f 	and.w	r2, r2, #31
 80011f6:	2101      	movs	r1, #1
 80011f8:	fa01 f202 	lsl.w	r2, r1, r2
 80011fc:	4013      	ands	r3, r2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0af      	beq.n	8001162 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001202:	4b2d      	ldr	r3, [pc, #180]	@ (80012b8 <HAL_RCC_OscConfig+0x5e8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800120a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800120e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	21f8      	movs	r1, #248	@ 0xf8
 8001218:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001220:	fa91 f1a1 	rbit	r1, r1
 8001224:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001228:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800122c:	fab1 f181 	clz	r1, r1
 8001230:	b2c9      	uxtb	r1, r1
 8001232:	408b      	lsls	r3, r1
 8001234:	4920      	ldr	r1, [pc, #128]	@ (80012b8 <HAL_RCC_OscConfig+0x5e8>)
 8001236:	4313      	orrs	r3, r2
 8001238:	600b      	str	r3, [r1, #0]
 800123a:	e06c      	b.n	8001316 <HAL_RCC_OscConfig+0x646>
 800123c:	2301      	movs	r3, #1
 800123e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001242:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001246:	fa93 f3a3 	rbit	r3, r3
 800124a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800124e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001252:	fab3 f383 	clz	r3, r3
 8001256:	b2db      	uxtb	r3, r3
 8001258:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800125c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	461a      	mov	r2, r3
 8001264:	2300      	movs	r3, #0
 8001266:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001268:	f7ff faa0 	bl	80007ac <HAL_GetTick>
 800126c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001270:	e00a      	b.n	8001288 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001272:	f7ff fa9b 	bl	80007ac <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d902      	bls.n	8001288 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	f000 bd5a 	b.w	8001d3c <HAL_RCC_OscConfig+0x106c>
 8001288:	2302      	movs	r3, #2
 800128a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001292:	fa93 f3a3 	rbit	r3, r3
 8001296:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800129a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129e:	fab3 f383 	clz	r3, r3
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	095b      	lsrs	r3, r3, #5
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d104      	bne.n	80012bc <HAL_RCC_OscConfig+0x5ec>
 80012b2:	4b01      	ldr	r3, [pc, #4]	@ (80012b8 <HAL_RCC_OscConfig+0x5e8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	e015      	b.n	80012e4 <HAL_RCC_OscConfig+0x614>
 80012b8:	40021000 	.word	0x40021000
 80012bc:	2302      	movs	r3, #2
 80012be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80012c6:	fa93 f3a3 	rbit	r3, r3
 80012ca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80012ce:	2302      	movs	r3, #2
 80012d0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80012d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80012d8:	fa93 f3a3 	rbit	r3, r3
 80012dc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80012e0:	4bc8      	ldr	r3, [pc, #800]	@ (8001604 <HAL_RCC_OscConfig+0x934>)
 80012e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e4:	2202      	movs	r2, #2
 80012e6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80012ea:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80012ee:	fa92 f2a2 	rbit	r2, r2
 80012f2:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80012f6:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80012fa:	fab2 f282 	clz	r2, r2
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	f042 0220 	orr.w	r2, r2, #32
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	f002 021f 	and.w	r2, r2, #31
 800130a:	2101      	movs	r1, #1
 800130c:	fa01 f202 	lsl.w	r2, r1, r2
 8001310:	4013      	ands	r3, r2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1ad      	bne.n	8001272 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001316:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800131a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 8110 	beq.w	800154c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800132c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001330:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d079      	beq.n	8001430 <HAL_RCC_OscConfig+0x760>
 800133c:	2301      	movs	r3, #1
 800133e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001342:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001346:	fa93 f3a3 	rbit	r3, r3
 800134a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800134e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001352:	fab3 f383 	clz	r3, r3
 8001356:	b2db      	uxtb	r3, r3
 8001358:	461a      	mov	r2, r3
 800135a:	4bab      	ldr	r3, [pc, #684]	@ (8001608 <HAL_RCC_OscConfig+0x938>)
 800135c:	4413      	add	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	461a      	mov	r2, r3
 8001362:	2301      	movs	r3, #1
 8001364:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001366:	f7ff fa21 	bl	80007ac <HAL_GetTick>
 800136a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136e:	e00a      	b.n	8001386 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001370:	f7ff fa1c 	bl	80007ac <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d902      	bls.n	8001386 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	f000 bcdb 	b.w	8001d3c <HAL_RCC_OscConfig+0x106c>
 8001386:	2302      	movs	r3, #2
 8001388:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001390:	fa93 f3a3 	rbit	r3, r3
 8001394:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001398:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800139c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80013a0:	2202      	movs	r2, #2
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013a8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	fa93 f2a3 	rbit	r2, r3
 80013b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80013c4:	2202      	movs	r2, #2
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	fa93 f2a3 	rbit	r2, r3
 80013d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013de:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e0:	4b88      	ldr	r3, [pc, #544]	@ (8001604 <HAL_RCC_OscConfig+0x934>)
 80013e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013e8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80013ec:	2102      	movs	r1, #2
 80013ee:	6019      	str	r1, [r3, #0]
 80013f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013f4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	fa93 f1a3 	rbit	r1, r3
 80013fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001402:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001406:	6019      	str	r1, [r3, #0]
  return result;
 8001408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800140c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	fab3 f383 	clz	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800141c:	b2db      	uxtb	r3, r3
 800141e:	f003 031f 	and.w	r3, r3, #31
 8001422:	2101      	movs	r1, #1
 8001424:	fa01 f303 	lsl.w	r3, r1, r3
 8001428:	4013      	ands	r3, r2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0a0      	beq.n	8001370 <HAL_RCC_OscConfig+0x6a0>
 800142e:	e08d      	b.n	800154c <HAL_RCC_OscConfig+0x87c>
 8001430:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001434:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001438:	2201      	movs	r2, #1
 800143a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001440:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	fa93 f2a3 	rbit	r2, r3
 800144a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800144e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001452:	601a      	str	r2, [r3, #0]
  return result;
 8001454:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001458:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800145c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800145e:	fab3 f383 	clz	r3, r3
 8001462:	b2db      	uxtb	r3, r3
 8001464:	461a      	mov	r2, r3
 8001466:	4b68      	ldr	r3, [pc, #416]	@ (8001608 <HAL_RCC_OscConfig+0x938>)
 8001468:	4413      	add	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	461a      	mov	r2, r3
 800146e:	2300      	movs	r3, #0
 8001470:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001472:	f7ff f99b 	bl	80007ac <HAL_GetTick>
 8001476:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147a:	e00a      	b.n	8001492 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147c:	f7ff f996 	bl	80007ac <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d902      	bls.n	8001492 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	f000 bc55 	b.w	8001d3c <HAL_RCC_OscConfig+0x106c>
 8001492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001496:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800149a:	2202      	movs	r2, #2
 800149c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014a2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	fa93 f2a3 	rbit	r2, r3
 80014ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014b0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014ba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80014be:	2202      	movs	r2, #2
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014c6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	fa93 f2a3 	rbit	r2, r3
 80014d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014de:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80014e2:	2202      	movs	r2, #2
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014ea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	fa93 f2a3 	rbit	r2, r3
 80014f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014f8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80014fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014fe:	4b41      	ldr	r3, [pc, #260]	@ (8001604 <HAL_RCC_OscConfig+0x934>)
 8001500:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001502:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001506:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800150a:	2102      	movs	r1, #2
 800150c:	6019      	str	r1, [r3, #0]
 800150e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001512:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	fa93 f1a3 	rbit	r1, r3
 800151c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001520:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001524:	6019      	str	r1, [r3, #0]
  return result;
 8001526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800152a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	fab3 f383 	clz	r3, r3
 8001534:	b2db      	uxtb	r3, r3
 8001536:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800153a:	b2db      	uxtb	r3, r3
 800153c:	f003 031f 	and.w	r3, r3, #31
 8001540:	2101      	movs	r1, #1
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	4013      	ands	r3, r2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d197      	bne.n	800147c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800154c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001550:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 81a1 	beq.w	80018a4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001568:	4b26      	ldr	r3, [pc, #152]	@ (8001604 <HAL_RCC_OscConfig+0x934>)
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d116      	bne.n	80015a2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001574:	4b23      	ldr	r3, [pc, #140]	@ (8001604 <HAL_RCC_OscConfig+0x934>)
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	4a22      	ldr	r2, [pc, #136]	@ (8001604 <HAL_RCC_OscConfig+0x934>)
 800157a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800157e:	61d3      	str	r3, [r2, #28]
 8001580:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <HAL_RCC_OscConfig+0x934>)
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001588:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800158c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001596:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800159a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800159c:	2301      	movs	r3, #1
 800159e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a2:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <HAL_RCC_OscConfig+0x93c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d11a      	bne.n	80015e4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ae:	4b17      	ldr	r3, [pc, #92]	@ (800160c <HAL_RCC_OscConfig+0x93c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a16      	ldr	r2, [pc, #88]	@ (800160c <HAL_RCC_OscConfig+0x93c>)
 80015b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ba:	f7ff f8f7 	bl	80007ac <HAL_GetTick>
 80015be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c2:	e009      	b.n	80015d8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c4:	f7ff f8f2 	bl	80007ac <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b64      	cmp	r3, #100	@ 0x64
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e3b1      	b.n	8001d3c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d8:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <HAL_RCC_OscConfig+0x93c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0ef      	beq.n	80015c4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d10d      	bne.n	8001610 <HAL_RCC_OscConfig+0x940>
 80015f4:	4b03      	ldr	r3, [pc, #12]	@ (8001604 <HAL_RCC_OscConfig+0x934>)
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	4a02      	ldr	r2, [pc, #8]	@ (8001604 <HAL_RCC_OscConfig+0x934>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	6213      	str	r3, [r2, #32]
 8001600:	e03c      	b.n	800167c <HAL_RCC_OscConfig+0x9ac>
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000
 8001608:	10908120 	.word	0x10908120
 800160c:	40007000 	.word	0x40007000
 8001610:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001614:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10c      	bne.n	800163a <HAL_RCC_OscConfig+0x96a>
 8001620:	4bc1      	ldr	r3, [pc, #772]	@ (8001928 <HAL_RCC_OscConfig+0xc58>)
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	4ac0      	ldr	r2, [pc, #768]	@ (8001928 <HAL_RCC_OscConfig+0xc58>)
 8001626:	f023 0301 	bic.w	r3, r3, #1
 800162a:	6213      	str	r3, [r2, #32]
 800162c:	4bbe      	ldr	r3, [pc, #760]	@ (8001928 <HAL_RCC_OscConfig+0xc58>)
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	4abd      	ldr	r2, [pc, #756]	@ (8001928 <HAL_RCC_OscConfig+0xc58>)
 8001632:	f023 0304 	bic.w	r3, r3, #4
 8001636:	6213      	str	r3, [r2, #32]
 8001638:	e020      	b.n	800167c <HAL_RCC_OscConfig+0x9ac>
 800163a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800163e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	2b05      	cmp	r3, #5
 8001648:	d10c      	bne.n	8001664 <HAL_RCC_OscConfig+0x994>
 800164a:	4bb7      	ldr	r3, [pc, #732]	@ (8001928 <HAL_RCC_OscConfig+0xc58>)
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	4ab6      	ldr	r2, [pc, #728]	@ (8001928 <HAL_RCC_OscConfig+0xc58>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	6213      	str	r3, [r2, #32]
 8001656:	4bb4      	ldr	r3, [pc, #720]	@ (8001928 <HAL_RCC_OscConfig+0xc58>)
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	4ab3      	ldr	r2, [pc, #716]	@ (8001928 <HAL_RCC_OscConfig+0xc58>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6213      	str	r3, [r2, #32]
 8001662:	e00b      	b.n	800167c <HAL_RCC_OscConfig+0x9ac>
 8001664:	4bb0      	ldr	r3, [pc, #704]	@ (8001928 <HAL_RCC_OscConfig+0xc58>)
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	4aaf      	ldr	r2, [pc, #700]	@ (8001928 <HAL_RCC_OscConfig+0xc58>)
 800166a:	f023 0301 	bic.w	r3, r3, #1
 800166e:	6213      	str	r3, [r2, #32]
 8001670:	4bad      	ldr	r3, [pc, #692]	@ (8001928 <HAL_RCC_OscConfig+0xc58>)
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	4aac      	ldr	r2, [pc, #688]	@ (8001928 <HAL_RCC_OscConfig+0xc58>)
 8001676:	f023 0304 	bic.w	r3, r3, #4
 800167a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800167c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001680:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 8081 	beq.w	8001790 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168e:	f7ff f88d 	bl	80007ac <HAL_GetTick>
 8001692:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001696:	e00b      	b.n	80016b0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001698:	f7ff f888 	bl	80007ac <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e345      	b.n	8001d3c <HAL_RCC_OscConfig+0x106c>
 80016b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016b4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80016b8:	2202      	movs	r2, #2
 80016ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016c0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	fa93 f2a3 	rbit	r2, r3
 80016ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ce:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016d8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80016dc:	2202      	movs	r2, #2
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016e4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	fa93 f2a3 	rbit	r2, r3
 80016ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016f2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80016f6:	601a      	str	r2, [r3, #0]
  return result;
 80016f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016fc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001700:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001702:	fab3 f383 	clz	r3, r3
 8001706:	b2db      	uxtb	r3, r3
 8001708:	095b      	lsrs	r3, r3, #5
 800170a:	b2db      	uxtb	r3, r3
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d102      	bne.n	800171c <HAL_RCC_OscConfig+0xa4c>
 8001716:	4b84      	ldr	r3, [pc, #528]	@ (8001928 <HAL_RCC_OscConfig+0xc58>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	e013      	b.n	8001744 <HAL_RCC_OscConfig+0xa74>
 800171c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001720:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001724:	2202      	movs	r2, #2
 8001726:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001728:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800172c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	fa93 f2a3 	rbit	r2, r3
 8001736:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800173a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	4b79      	ldr	r3, [pc, #484]	@ (8001928 <HAL_RCC_OscConfig+0xc58>)
 8001742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001744:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001748:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800174c:	2102      	movs	r1, #2
 800174e:	6011      	str	r1, [r2, #0]
 8001750:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001754:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001758:	6812      	ldr	r2, [r2, #0]
 800175a:	fa92 f1a2 	rbit	r1, r2
 800175e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001762:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001766:	6011      	str	r1, [r2, #0]
  return result;
 8001768:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800176c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001770:	6812      	ldr	r2, [r2, #0]
 8001772:	fab2 f282 	clz	r2, r2
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	f002 021f 	and.w	r2, r2, #31
 8001782:	2101      	movs	r1, #1
 8001784:	fa01 f202 	lsl.w	r2, r1, r2
 8001788:	4013      	ands	r3, r2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d084      	beq.n	8001698 <HAL_RCC_OscConfig+0x9c8>
 800178e:	e07f      	b.n	8001890 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001790:	f7ff f80c 	bl	80007ac <HAL_GetTick>
 8001794:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001798:	e00b      	b.n	80017b2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800179a:	f7ff f807 	bl	80007ac <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e2c4      	b.n	8001d3c <HAL_RCC_OscConfig+0x106c>
 80017b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017b6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80017ba:	2202      	movs	r2, #2
 80017bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017c2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	fa93 f2a3 	rbit	r2, r3
 80017cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017da:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80017de:	2202      	movs	r2, #2
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	fa93 f2a3 	rbit	r2, r3
 80017f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017f4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80017f8:	601a      	str	r2, [r3, #0]
  return result;
 80017fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017fe:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001802:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001804:	fab3 f383 	clz	r3, r3
 8001808:	b2db      	uxtb	r3, r3
 800180a:	095b      	lsrs	r3, r3, #5
 800180c:	b2db      	uxtb	r3, r3
 800180e:	f043 0302 	orr.w	r3, r3, #2
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d102      	bne.n	800181e <HAL_RCC_OscConfig+0xb4e>
 8001818:	4b43      	ldr	r3, [pc, #268]	@ (8001928 <HAL_RCC_OscConfig+0xc58>)
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	e013      	b.n	8001846 <HAL_RCC_OscConfig+0xb76>
 800181e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001822:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001826:	2202      	movs	r2, #2
 8001828:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800182e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	fa93 f2a3 	rbit	r2, r3
 8001838:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800183c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	4b39      	ldr	r3, [pc, #228]	@ (8001928 <HAL_RCC_OscConfig+0xc58>)
 8001844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001846:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800184a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800184e:	2102      	movs	r1, #2
 8001850:	6011      	str	r1, [r2, #0]
 8001852:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001856:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800185a:	6812      	ldr	r2, [r2, #0]
 800185c:	fa92 f1a2 	rbit	r1, r2
 8001860:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001864:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001868:	6011      	str	r1, [r2, #0]
  return result;
 800186a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800186e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001872:	6812      	ldr	r2, [r2, #0]
 8001874:	fab2 f282 	clz	r2, r2
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	f002 021f 	and.w	r2, r2, #31
 8001884:	2101      	movs	r1, #1
 8001886:	fa01 f202 	lsl.w	r2, r1, r2
 800188a:	4013      	ands	r3, r2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d184      	bne.n	800179a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001890:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001894:	2b01      	cmp	r3, #1
 8001896:	d105      	bne.n	80018a4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001898:	4b23      	ldr	r3, [pc, #140]	@ (8001928 <HAL_RCC_OscConfig+0xc58>)
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	4a22      	ldr	r2, [pc, #136]	@ (8001928 <HAL_RCC_OscConfig+0xc58>)
 800189e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018a2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	69db      	ldr	r3, [r3, #28]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 8242 	beq.w	8001d3a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001928 <HAL_RCC_OscConfig+0xc58>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f003 030c 	and.w	r3, r3, #12
 80018be:	2b08      	cmp	r3, #8
 80018c0:	f000 8213 	beq.w	8001cea <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	f040 8162 	bne.w	8001b9a <HAL_RCC_OscConfig+0xeca>
 80018d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018da:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80018de:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80018e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	fa93 f2a3 	rbit	r2, r3
 80018f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018f6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80018fa:	601a      	str	r2, [r3, #0]
  return result;
 80018fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001900:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001904:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001906:	fab3 f383 	clz	r3, r3
 800190a:	b2db      	uxtb	r3, r3
 800190c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001910:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	461a      	mov	r2, r3
 8001918:	2300      	movs	r3, #0
 800191a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7fe ff46 	bl	80007ac <HAL_GetTick>
 8001920:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001924:	e00c      	b.n	8001940 <HAL_RCC_OscConfig+0xc70>
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800192c:	f7fe ff3e 	bl	80007ac <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e1fd      	b.n	8001d3c <HAL_RCC_OscConfig+0x106c>
 8001940:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001944:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001948:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800194c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001952:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	fa93 f2a3 	rbit	r2, r3
 800195c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001960:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001964:	601a      	str	r2, [r3, #0]
  return result;
 8001966:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800196a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800196e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001970:	fab3 f383 	clz	r3, r3
 8001974:	b2db      	uxtb	r3, r3
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	b2db      	uxtb	r3, r3
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b01      	cmp	r3, #1
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0xcba>
 8001984:	4bb0      	ldr	r3, [pc, #704]	@ (8001c48 <HAL_RCC_OscConfig+0xf78>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	e027      	b.n	80019da <HAL_RCC_OscConfig+0xd0a>
 800198a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800198e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001992:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001996:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001998:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800199c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	fa93 f2a3 	rbit	r2, r3
 80019a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019aa:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80019b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	fa93 f2a3 	rbit	r2, r3
 80019cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019d0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	4b9c      	ldr	r3, [pc, #624]	@ (8001c48 <HAL_RCC_OscConfig+0xf78>)
 80019d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019de:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80019e2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80019e6:	6011      	str	r1, [r2, #0]
 80019e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019ec:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80019f0:	6812      	ldr	r2, [r2, #0]
 80019f2:	fa92 f1a2 	rbit	r1, r2
 80019f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019fa:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80019fe:	6011      	str	r1, [r2, #0]
  return result;
 8001a00:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a04:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001a08:	6812      	ldr	r2, [r2, #0]
 8001a0a:	fab2 f282 	clz	r2, r2
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	f042 0220 	orr.w	r2, r2, #32
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	f002 021f 	and.w	r2, r2, #31
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d182      	bne.n	800192c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a26:	4b88      	ldr	r3, [pc, #544]	@ (8001c48 <HAL_RCC_OscConfig+0xf78>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001a3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	430b      	orrs	r3, r1
 8001a48:	497f      	ldr	r1, [pc, #508]	@ (8001c48 <HAL_RCC_OscConfig+0xf78>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	604b      	str	r3, [r1, #4]
 8001a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a52:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001a56:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a60:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	fa93 f2a3 	rbit	r2, r3
 8001a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a6e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001a72:	601a      	str	r2, [r3, #0]
  return result;
 8001a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a78:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001a7c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a7e:	fab3 f383 	clz	r3, r3
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a88:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	461a      	mov	r2, r3
 8001a90:	2301      	movs	r3, #1
 8001a92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a94:	f7fe fe8a 	bl	80007ac <HAL_GetTick>
 8001a98:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a9c:	e009      	b.n	8001ab2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a9e:	f7fe fe85 	bl	80007ac <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e144      	b.n	8001d3c <HAL_RCC_OscConfig+0x106c>
 8001ab2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001aba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001abe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	fa93 f2a3 	rbit	r2, r3
 8001ace:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ad2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001ad6:	601a      	str	r2, [r3, #0]
  return result;
 8001ad8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001adc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001ae0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ae2:	fab3 f383 	clz	r3, r3
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	095b      	lsrs	r3, r3, #5
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d102      	bne.n	8001afc <HAL_RCC_OscConfig+0xe2c>
 8001af6:	4b54      	ldr	r3, [pc, #336]	@ (8001c48 <HAL_RCC_OscConfig+0xf78>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	e027      	b.n	8001b4c <HAL_RCC_OscConfig+0xe7c>
 8001afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b00:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001b04:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b0e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	fa93 f2a3 	rbit	r2, r3
 8001b18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b1c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b26:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001b2a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b34:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	fa93 f2a3 	rbit	r2, r3
 8001b3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b42:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	4b3f      	ldr	r3, [pc, #252]	@ (8001c48 <HAL_RCC_OscConfig+0xf78>)
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b50:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001b54:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001b58:	6011      	str	r1, [r2, #0]
 8001b5a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b5e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	fa92 f1a2 	rbit	r1, r2
 8001b68:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b6c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001b70:	6011      	str	r1, [r2, #0]
  return result;
 8001b72:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b76:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001b7a:	6812      	ldr	r2, [r2, #0]
 8001b7c:	fab2 f282 	clz	r2, r2
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	f042 0220 	orr.w	r2, r2, #32
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	f002 021f 	and.w	r2, r2, #31
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d082      	beq.n	8001a9e <HAL_RCC_OscConfig+0xdce>
 8001b98:	e0cf      	b.n	8001d3a <HAL_RCC_OscConfig+0x106a>
 8001b9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b9e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001ba2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001ba6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bac:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	fa93 f2a3 	rbit	r2, r3
 8001bb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bba:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001bbe:	601a      	str	r2, [r3, #0]
  return result;
 8001bc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001bc8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bca:	fab3 f383 	clz	r3, r3
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001bd4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	461a      	mov	r2, r3
 8001bdc:	2300      	movs	r3, #0
 8001bde:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7fe fde4 	bl	80007ac <HAL_GetTick>
 8001be4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be8:	e009      	b.n	8001bfe <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bea:	f7fe fddf 	bl	80007ac <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e09e      	b.n	8001d3c <HAL_RCC_OscConfig+0x106c>
 8001bfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c02:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c06:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c10:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	fa93 f2a3 	rbit	r2, r3
 8001c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c1e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001c22:	601a      	str	r2, [r3, #0]
  return result;
 8001c24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c28:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001c2c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c2e:	fab3 f383 	clz	r3, r3
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	095b      	lsrs	r3, r3, #5
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d104      	bne.n	8001c4c <HAL_RCC_OscConfig+0xf7c>
 8001c42:	4b01      	ldr	r3, [pc, #4]	@ (8001c48 <HAL_RCC_OscConfig+0xf78>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	e029      	b.n	8001c9c <HAL_RCC_OscConfig+0xfcc>
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c50:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001c54:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c5e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	fa93 f2a3 	rbit	r2, r3
 8001c68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c6c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c76:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001c7a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c84:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	fa93 f2a3 	rbit	r2, r3
 8001c8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c92:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	4b2b      	ldr	r3, [pc, #172]	@ (8001d48 <HAL_RCC_OscConfig+0x1078>)
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ca0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001ca4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001ca8:	6011      	str	r1, [r2, #0]
 8001caa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cae:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	fa92 f1a2 	rbit	r1, r2
 8001cb8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cbc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001cc0:	6011      	str	r1, [r2, #0]
  return result;
 8001cc2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cc6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	fab2 f282 	clz	r2, r2
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	f042 0220 	orr.w	r2, r2, #32
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	f002 021f 	and.w	r2, r2, #31
 8001cdc:	2101      	movs	r1, #1
 8001cde:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d180      	bne.n	8001bea <HAL_RCC_OscConfig+0xf1a>
 8001ce8:	e027      	b.n	8001d3a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e01e      	b.n	8001d3c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cfe:	4b12      	ldr	r3, [pc, #72]	@ (8001d48 <HAL_RCC_OscConfig+0x1078>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d06:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001d0a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d10b      	bne.n	8001d36 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d1e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001d22:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d001      	beq.n	8001d3a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40021000 	.word	0x40021000

08001d4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b09e      	sub	sp, #120	@ 0x78
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e162      	b.n	800202a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d64:	4b90      	ldr	r3, [pc, #576]	@ (8001fa8 <HAL_RCC_ClockConfig+0x25c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d910      	bls.n	8001d94 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d72:	4b8d      	ldr	r3, [pc, #564]	@ (8001fa8 <HAL_RCC_ClockConfig+0x25c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f023 0207 	bic.w	r2, r3, #7
 8001d7a:	498b      	ldr	r1, [pc, #556]	@ (8001fa8 <HAL_RCC_ClockConfig+0x25c>)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d82:	4b89      	ldr	r3, [pc, #548]	@ (8001fa8 <HAL_RCC_ClockConfig+0x25c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d001      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e14a      	b.n	800202a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d008      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da0:	4b82      	ldr	r3, [pc, #520]	@ (8001fac <HAL_RCC_ClockConfig+0x260>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	497f      	ldr	r1, [pc, #508]	@ (8001fac <HAL_RCC_ClockConfig+0x260>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 80dc 	beq.w	8001f78 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d13c      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xf6>
 8001dc8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001dcc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001dd0:	fa93 f3a3 	rbit	r3, r3
 8001dd4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001dd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd8:	fab3 f383 	clz	r3, r3
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	095b      	lsrs	r3, r3, #5
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d102      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xa6>
 8001dec:	4b6f      	ldr	r3, [pc, #444]	@ (8001fac <HAL_RCC_ClockConfig+0x260>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	e00f      	b.n	8001e12 <HAL_RCC_ClockConfig+0xc6>
 8001df2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001df6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001dfa:	fa93 f3a3 	rbit	r3, r3
 8001dfe:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e04:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e08:	fa93 f3a3 	rbit	r3, r3
 8001e0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e0e:	4b67      	ldr	r3, [pc, #412]	@ (8001fac <HAL_RCC_ClockConfig+0x260>)
 8001e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e12:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e16:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001e18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e1a:	fa92 f2a2 	rbit	r2, r2
 8001e1e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001e20:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001e22:	fab2 f282 	clz	r2, r2
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	f042 0220 	orr.w	r2, r2, #32
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	f002 021f 	and.w	r2, r2, #31
 8001e32:	2101      	movs	r1, #1
 8001e34:	fa01 f202 	lsl.w	r2, r1, r2
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d17b      	bne.n	8001f36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e0f3      	b.n	800202a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d13c      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x178>
 8001e4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e4e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e52:	fa93 f3a3 	rbit	r3, r3
 8001e56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001e58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e5a:	fab3 f383 	clz	r3, r3
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	095b      	lsrs	r3, r3, #5
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d102      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x128>
 8001e6e:	4b4f      	ldr	r3, [pc, #316]	@ (8001fac <HAL_RCC_ClockConfig+0x260>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	e00f      	b.n	8001e94 <HAL_RCC_ClockConfig+0x148>
 8001e74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e78:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e7c:	fa93 f3a3 	rbit	r3, r3
 8001e80:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e86:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e90:	4b46      	ldr	r3, [pc, #280]	@ (8001fac <HAL_RCC_ClockConfig+0x260>)
 8001e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e98:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001e9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001e9c:	fa92 f2a2 	rbit	r2, r2
 8001ea0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001ea2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ea4:	fab2 f282 	clz	r2, r2
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	f042 0220 	orr.w	r2, r2, #32
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	f002 021f 	and.w	r2, r2, #31
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eba:	4013      	ands	r3, r2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d13a      	bne.n	8001f36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e0b2      	b.n	800202a <HAL_RCC_ClockConfig+0x2de>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed2:	fab3 f383 	clz	r3, r3
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	095b      	lsrs	r3, r3, #5
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d102      	bne.n	8001eec <HAL_RCC_ClockConfig+0x1a0>
 8001ee6:	4b31      	ldr	r3, [pc, #196]	@ (8001fac <HAL_RCC_ClockConfig+0x260>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	e00d      	b.n	8001f08 <HAL_RCC_ClockConfig+0x1bc>
 8001eec:	2302      	movs	r3, #2
 8001eee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ef8:	2302      	movs	r3, #2
 8001efa:	623b      	str	r3, [r7, #32]
 8001efc:	6a3b      	ldr	r3, [r7, #32]
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	61fb      	str	r3, [r7, #28]
 8001f04:	4b29      	ldr	r3, [pc, #164]	@ (8001fac <HAL_RCC_ClockConfig+0x260>)
 8001f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f08:	2202      	movs	r2, #2
 8001f0a:	61ba      	str	r2, [r7, #24]
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	fa92 f2a2 	rbit	r2, r2
 8001f12:	617a      	str	r2, [r7, #20]
  return result;
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	fab2 f282 	clz	r2, r2
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	f042 0220 	orr.w	r2, r2, #32
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	f002 021f 	and.w	r2, r2, #31
 8001f26:	2101      	movs	r1, #1
 8001f28:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e079      	b.n	800202a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f36:	4b1d      	ldr	r3, [pc, #116]	@ (8001fac <HAL_RCC_ClockConfig+0x260>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f023 0203 	bic.w	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	491a      	ldr	r1, [pc, #104]	@ (8001fac <HAL_RCC_ClockConfig+0x260>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f48:	f7fe fc30 	bl	80007ac <HAL_GetTick>
 8001f4c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4e:	e00a      	b.n	8001f66 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f50:	f7fe fc2c 	bl	80007ac <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e061      	b.n	800202a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f66:	4b11      	ldr	r3, [pc, #68]	@ (8001fac <HAL_RCC_ClockConfig+0x260>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 020c 	and.w	r2, r3, #12
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d1eb      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f78:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa8 <HAL_RCC_ClockConfig+0x25c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d214      	bcs.n	8001fb0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b08      	ldr	r3, [pc, #32]	@ (8001fa8 <HAL_RCC_ClockConfig+0x25c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 0207 	bic.w	r2, r3, #7
 8001f8e:	4906      	ldr	r1, [pc, #24]	@ (8001fa8 <HAL_RCC_ClockConfig+0x25c>)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f96:	4b04      	ldr	r3, [pc, #16]	@ (8001fa8 <HAL_RCC_ClockConfig+0x25c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d005      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e040      	b.n	800202a <HAL_RCC_ClockConfig+0x2de>
 8001fa8:	40022000 	.word	0x40022000
 8001fac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d008      	beq.n	8001fce <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002034 <HAL_RCC_ClockConfig+0x2e8>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	491a      	ldr	r1, [pc, #104]	@ (8002034 <HAL_RCC_ClockConfig+0x2e8>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d009      	beq.n	8001fee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fda:	4b16      	ldr	r3, [pc, #88]	@ (8002034 <HAL_RCC_ClockConfig+0x2e8>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4912      	ldr	r1, [pc, #72]	@ (8002034 <HAL_RCC_ClockConfig+0x2e8>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fee:	f000 f829 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8001ff2:	4601      	mov	r1, r0
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8002034 <HAL_RCC_ClockConfig+0x2e8>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ffc:	22f0      	movs	r2, #240	@ 0xf0
 8001ffe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	fa92 f2a2 	rbit	r2, r2
 8002006:	60fa      	str	r2, [r7, #12]
  return result;
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	fab2 f282 	clz	r2, r2
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	40d3      	lsrs	r3, r2
 8002012:	4a09      	ldr	r2, [pc, #36]	@ (8002038 <HAL_RCC_ClockConfig+0x2ec>)
 8002014:	5cd3      	ldrb	r3, [r2, r3]
 8002016:	fa21 f303 	lsr.w	r3, r1, r3
 800201a:	4a08      	ldr	r2, [pc, #32]	@ (800203c <HAL_RCC_ClockConfig+0x2f0>)
 800201c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800201e:	4b08      	ldr	r3, [pc, #32]	@ (8002040 <HAL_RCC_ClockConfig+0x2f4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fabc 	bl	80005a0 <HAL_InitTick>
  
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3778      	adds	r7, #120	@ 0x78
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40021000 	.word	0x40021000
 8002038:	08005d88 	.word	0x08005d88
 800203c:	20000000 	.word	0x20000000
 8002040:	20000004 	.word	0x20000004

08002044 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002044:	b480      	push	{r7}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	2300      	movs	r3, #0
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800205e:	4b1e      	ldr	r3, [pc, #120]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	2b04      	cmp	r3, #4
 800206c:	d002      	beq.n	8002074 <HAL_RCC_GetSysClockFreq+0x30>
 800206e:	2b08      	cmp	r3, #8
 8002070:	d003      	beq.n	800207a <HAL_RCC_GetSysClockFreq+0x36>
 8002072:	e026      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002074:	4b19      	ldr	r3, [pc, #100]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x98>)
 8002076:	613b      	str	r3, [r7, #16]
      break;
 8002078:	e026      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	0c9b      	lsrs	r3, r3, #18
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	4a17      	ldr	r2, [pc, #92]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002084:	5cd3      	ldrb	r3, [r2, r3]
 8002086:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002088:	4b13      	ldr	r3, [pc, #76]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x94>)
 800208a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208c:	f003 030f 	and.w	r3, r3, #15
 8002090:	4a14      	ldr	r2, [pc, #80]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002092:	5cd3      	ldrb	r3, [r2, r3]
 8002094:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d008      	beq.n	80020b2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020a0:	4a0e      	ldr	r2, [pc, #56]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x98>)
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	fb02 f303 	mul.w	r3, r2, r3
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	e004      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a0c      	ldr	r2, [pc, #48]	@ (80020e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020b6:	fb02 f303 	mul.w	r3, r2, r3
 80020ba:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	613b      	str	r3, [r7, #16]
      break;
 80020c0:	e002      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020c2:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x98>)
 80020c4:	613b      	str	r3, [r7, #16]
      break;
 80020c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020c8:	693b      	ldr	r3, [r7, #16]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	371c      	adds	r7, #28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40021000 	.word	0x40021000
 80020dc:	007a1200 	.word	0x007a1200
 80020e0:	08005da0 	.word	0x08005da0
 80020e4:	08005db0 	.word	0x08005db0
 80020e8:	003d0900 	.word	0x003d0900

080020ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020f0:	4b03      	ldr	r3, [pc, #12]	@ (8002100 <HAL_RCC_GetHCLKFreq+0x14>)
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20000000 	.word	0x20000000

08002104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800210a:	f7ff ffef 	bl	80020ec <HAL_RCC_GetHCLKFreq>
 800210e:	4601      	mov	r1, r0
 8002110:	4b0b      	ldr	r3, [pc, #44]	@ (8002140 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002118:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800211c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	fa92 f2a2 	rbit	r2, r2
 8002124:	603a      	str	r2, [r7, #0]
  return result;
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	fab2 f282 	clz	r2, r2
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	40d3      	lsrs	r3, r2
 8002130:	4a04      	ldr	r2, [pc, #16]	@ (8002144 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002132:	5cd3      	ldrb	r3, [r2, r3]
 8002134:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000
 8002144:	08005d98 	.word	0x08005d98

08002148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800214e:	f7ff ffcd 	bl	80020ec <HAL_RCC_GetHCLKFreq>
 8002152:	4601      	mov	r1, r0
 8002154:	4b0b      	ldr	r3, [pc, #44]	@ (8002184 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800215c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002160:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	fa92 f2a2 	rbit	r2, r2
 8002168:	603a      	str	r2, [r7, #0]
  return result;
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	fab2 f282 	clz	r2, r2
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	40d3      	lsrs	r3, r2
 8002174:	4a04      	ldr	r2, [pc, #16]	@ (8002188 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002176:	5cd3      	ldrb	r3, [r2, r3]
 8002178:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40021000 	.word	0x40021000
 8002188:	08005d98 	.word	0x08005d98

0800218c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	220f      	movs	r2, #15
 800219a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800219c:	4b12      	ldr	r3, [pc, #72]	@ (80021e8 <HAL_RCC_GetClockConfig+0x5c>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0203 	and.w	r2, r3, #3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80021a8:	4b0f      	ldr	r3, [pc, #60]	@ (80021e8 <HAL_RCC_GetClockConfig+0x5c>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80021b4:	4b0c      	ldr	r3, [pc, #48]	@ (80021e8 <HAL_RCC_GetClockConfig+0x5c>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80021c0:	4b09      	ldr	r3, [pc, #36]	@ (80021e8 <HAL_RCC_GetClockConfig+0x5c>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	08db      	lsrs	r3, r3, #3
 80021c6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80021ce:	4b07      	ldr	r3, [pc, #28]	@ (80021ec <HAL_RCC_GetClockConfig+0x60>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0207 	and.w	r2, r3, #7
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	601a      	str	r2, [r3, #0]
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40022000 	.word	0x40022000

080021f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e049      	b.n	8002296 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d106      	bne.n	800221c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f841 	bl	800229e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3304      	adds	r3, #4
 800222c:	4619      	mov	r1, r3
 800222e:	4610      	mov	r0, r2
 8002230:	f000 f9c6 	bl	80025c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d001      	beq.n	80022cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e040      	b.n	800234e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2202      	movs	r2, #2
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0201 	orr.w	r2, r2, #1
 80022e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a1c      	ldr	r2, [pc, #112]	@ (800235c <HAL_TIM_Base_Start_IT+0xa8>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d00e      	beq.n	800230c <HAL_TIM_Base_Start_IT+0x58>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022f6:	d009      	beq.n	800230c <HAL_TIM_Base_Start_IT+0x58>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a18      	ldr	r2, [pc, #96]	@ (8002360 <HAL_TIM_Base_Start_IT+0xac>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d004      	beq.n	800230c <HAL_TIM_Base_Start_IT+0x58>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a17      	ldr	r2, [pc, #92]	@ (8002364 <HAL_TIM_Base_Start_IT+0xb0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d115      	bne.n	8002338 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	4b15      	ldr	r3, [pc, #84]	@ (8002368 <HAL_TIM_Base_Start_IT+0xb4>)
 8002314:	4013      	ands	r3, r2
 8002316:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2b06      	cmp	r3, #6
 800231c:	d015      	beq.n	800234a <HAL_TIM_Base_Start_IT+0x96>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002324:	d011      	beq.n	800234a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f042 0201 	orr.w	r2, r2, #1
 8002334:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002336:	e008      	b.n	800234a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	e000      	b.n	800234c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800234a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40012c00 	.word	0x40012c00
 8002360:	40000400 	.word	0x40000400
 8002364:	40014000 	.word	0x40014000
 8002368:	00010007 	.word	0x00010007

0800236c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d020      	beq.n	80023d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d01b      	beq.n	80023d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f06f 0202 	mvn.w	r2, #2
 80023a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f8e4 	bl	8002584 <HAL_TIM_IC_CaptureCallback>
 80023bc:	e005      	b.n	80023ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f8d6 	bl	8002570 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 f8e7 	bl	8002598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d020      	beq.n	800241c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d01b      	beq.n	800241c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f06f 0204 	mvn.w	r2, #4
 80023ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2202      	movs	r2, #2
 80023f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f8be 	bl	8002584 <HAL_TIM_IC_CaptureCallback>
 8002408:	e005      	b.n	8002416 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f8b0 	bl	8002570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f8c1 	bl	8002598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d020      	beq.n	8002468 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b00      	cmp	r3, #0
 800242e:	d01b      	beq.n	8002468 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f06f 0208 	mvn.w	r2, #8
 8002438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2204      	movs	r2, #4
 800243e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f898 	bl	8002584 <HAL_TIM_IC_CaptureCallback>
 8002454:	e005      	b.n	8002462 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f88a 	bl	8002570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f89b 	bl	8002598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f003 0310 	and.w	r3, r3, #16
 800246e:	2b00      	cmp	r3, #0
 8002470:	d020      	beq.n	80024b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f003 0310 	and.w	r3, r3, #16
 8002478:	2b00      	cmp	r3, #0
 800247a:	d01b      	beq.n	80024b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f06f 0210 	mvn.w	r2, #16
 8002484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2208      	movs	r2, #8
 800248a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f872 	bl	8002584 <HAL_TIM_IC_CaptureCallback>
 80024a0:	e005      	b.n	80024ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f864 	bl	8002570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 f875 	bl	8002598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00c      	beq.n	80024d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d007      	beq.n	80024d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f06f 0201 	mvn.w	r2, #1
 80024d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fd ffe0 	bl	8000498 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00c      	beq.n	80024fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d007      	beq.n	80024fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80024f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f8f0 	bl	80026dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00c      	beq.n	8002520 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800250c:	2b00      	cmp	r3, #0
 800250e:	d007      	beq.n	8002520 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f8e8 	bl	80026f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00c      	beq.n	8002544 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002530:	2b00      	cmp	r3, #0
 8002532:	d007      	beq.n	8002544 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800253c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f834 	bl	80025ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f003 0320 	and.w	r3, r3, #32
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00c      	beq.n	8002568 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f003 0320 	and.w	r3, r3, #32
 8002554:	2b00      	cmp	r3, #0
 8002556:	d007      	beq.n	8002568 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f06f 0220 	mvn.w	r2, #32
 8002560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f8b0 	bl	80026c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002568:	bf00      	nop
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a38      	ldr	r2, [pc, #224]	@ (80026b4 <TIM_Base_SetConfig+0xf4>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d007      	beq.n	80025e8 <TIM_Base_SetConfig+0x28>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025de:	d003      	beq.n	80025e8 <TIM_Base_SetConfig+0x28>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a35      	ldr	r2, [pc, #212]	@ (80026b8 <TIM_Base_SetConfig+0xf8>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d108      	bne.n	80025fa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a2d      	ldr	r2, [pc, #180]	@ (80026b4 <TIM_Base_SetConfig+0xf4>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d013      	beq.n	800262a <TIM_Base_SetConfig+0x6a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002608:	d00f      	beq.n	800262a <TIM_Base_SetConfig+0x6a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a2a      	ldr	r2, [pc, #168]	@ (80026b8 <TIM_Base_SetConfig+0xf8>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00b      	beq.n	800262a <TIM_Base_SetConfig+0x6a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a29      	ldr	r2, [pc, #164]	@ (80026bc <TIM_Base_SetConfig+0xfc>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d007      	beq.n	800262a <TIM_Base_SetConfig+0x6a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a28      	ldr	r2, [pc, #160]	@ (80026c0 <TIM_Base_SetConfig+0x100>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d003      	beq.n	800262a <TIM_Base_SetConfig+0x6a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a27      	ldr	r2, [pc, #156]	@ (80026c4 <TIM_Base_SetConfig+0x104>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d108      	bne.n	800263c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4313      	orrs	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	4313      	orrs	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a14      	ldr	r2, [pc, #80]	@ (80026b4 <TIM_Base_SetConfig+0xf4>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d00b      	beq.n	8002680 <TIM_Base_SetConfig+0xc0>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a14      	ldr	r2, [pc, #80]	@ (80026bc <TIM_Base_SetConfig+0xfc>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d007      	beq.n	8002680 <TIM_Base_SetConfig+0xc0>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a13      	ldr	r2, [pc, #76]	@ (80026c0 <TIM_Base_SetConfig+0x100>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d003      	beq.n	8002680 <TIM_Base_SetConfig+0xc0>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a12      	ldr	r2, [pc, #72]	@ (80026c4 <TIM_Base_SetConfig+0x104>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d103      	bne.n	8002688 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b01      	cmp	r3, #1
 8002698:	d105      	bne.n	80026a6 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	f023 0201 	bic.w	r2, r3, #1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	611a      	str	r2, [r3, #16]
  }
}
 80026a6:	bf00      	nop
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40012c00 	.word	0x40012c00
 80026b8:	40000400 	.word	0x40000400
 80026bc:	40014000 	.word	0x40014000
 80026c0:	40014400 	.word	0x40014400
 80026c4:	40014800 	.word	0x40014800

080026c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e040      	b.n	8002798 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800271a:	2b00      	cmp	r3, #0
 800271c:	d106      	bne.n	800272c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7fd fef6 	bl	8000518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2224      	movs	r2, #36	@ 0x24
 8002730:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0201 	bic.w	r2, r2, #1
 8002740:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f9e8 	bl	8002b20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 f8af 	bl	80028b4 <UART_SetConfig>
 8002756:	4603      	mov	r3, r0
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e01b      	b.n	8002798 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800276e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800277e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 fa67 	bl	8002c64 <UART_CheckIdleState>
 8002796:	4603      	mov	r3, r0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	@ 0x28
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	4613      	mov	r3, r2
 80027ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	d177      	bne.n	80028a8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d002      	beq.n	80027c4 <HAL_UART_Transmit+0x24>
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e070      	b.n	80028aa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2221      	movs	r2, #33	@ 0x21
 80027d4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027d6:	f7fd ffe9 	bl	80007ac <HAL_GetTick>
 80027da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	88fa      	ldrh	r2, [r7, #6]
 80027e0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	88fa      	ldrh	r2, [r7, #6]
 80027e8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027f4:	d108      	bne.n	8002808 <HAL_UART_Transmit+0x68>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d104      	bne.n	8002808 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	61bb      	str	r3, [r7, #24]
 8002806:	e003      	b.n	8002810 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800280c:	2300      	movs	r3, #0
 800280e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002810:	e02f      	b.n	8002872 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	2200      	movs	r2, #0
 800281a:	2180      	movs	r1, #128	@ 0x80
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 fac9 	bl	8002db4 <UART_WaitOnFlagUntilTimeout>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d004      	beq.n	8002832 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2220      	movs	r2, #32
 800282c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e03b      	b.n	80028aa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10b      	bne.n	8002850 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	881a      	ldrh	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002844:	b292      	uxth	r2, r2
 8002846:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	3302      	adds	r3, #2
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	e007      	b.n	8002860 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	781a      	ldrb	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3301      	adds	r3, #1
 800285e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002866:	b29b      	uxth	r3, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002878:	b29b      	uxth	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1c9      	bne.n	8002812 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2200      	movs	r2, #0
 8002886:	2140      	movs	r1, #64	@ 0x40
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 fa93 	bl	8002db4 <UART_WaitOnFlagUntilTimeout>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d004      	beq.n	800289e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2220      	movs	r2, #32
 8002898:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e005      	b.n	80028aa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2220      	movs	r2, #32
 80028a2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	e000      	b.n	80028aa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80028a8:	2302      	movs	r3, #2
  }
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3720      	adds	r7, #32
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	431a      	orrs	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	4b8a      	ldr	r3, [pc, #552]	@ (8002b08 <UART_SetConfig+0x254>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6812      	ldr	r2, [r2, #0]
 80028e6:	6979      	ldr	r1, [r7, #20]
 80028e8:	430b      	orrs	r3, r1
 80028ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	4313      	orrs	r3, r2
 8002910:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	430a      	orrs	r2, r1
 8002924:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a78      	ldr	r2, [pc, #480]	@ (8002b0c <UART_SetConfig+0x258>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d120      	bne.n	8002972 <UART_SetConfig+0xbe>
 8002930:	4b77      	ldr	r3, [pc, #476]	@ (8002b10 <UART_SetConfig+0x25c>)
 8002932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	2b03      	cmp	r3, #3
 800293a:	d817      	bhi.n	800296c <UART_SetConfig+0xb8>
 800293c:	a201      	add	r2, pc, #4	@ (adr r2, 8002944 <UART_SetConfig+0x90>)
 800293e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002942:	bf00      	nop
 8002944:	08002955 	.word	0x08002955
 8002948:	08002961 	.word	0x08002961
 800294c:	08002967 	.word	0x08002967
 8002950:	0800295b 	.word	0x0800295b
 8002954:	2300      	movs	r3, #0
 8002956:	77fb      	strb	r3, [r7, #31]
 8002958:	e01d      	b.n	8002996 <UART_SetConfig+0xe2>
 800295a:	2302      	movs	r3, #2
 800295c:	77fb      	strb	r3, [r7, #31]
 800295e:	e01a      	b.n	8002996 <UART_SetConfig+0xe2>
 8002960:	2304      	movs	r3, #4
 8002962:	77fb      	strb	r3, [r7, #31]
 8002964:	e017      	b.n	8002996 <UART_SetConfig+0xe2>
 8002966:	2308      	movs	r3, #8
 8002968:	77fb      	strb	r3, [r7, #31]
 800296a:	e014      	b.n	8002996 <UART_SetConfig+0xe2>
 800296c:	2310      	movs	r3, #16
 800296e:	77fb      	strb	r3, [r7, #31]
 8002970:	e011      	b.n	8002996 <UART_SetConfig+0xe2>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a67      	ldr	r2, [pc, #412]	@ (8002b14 <UART_SetConfig+0x260>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d102      	bne.n	8002982 <UART_SetConfig+0xce>
 800297c:	2300      	movs	r3, #0
 800297e:	77fb      	strb	r3, [r7, #31]
 8002980:	e009      	b.n	8002996 <UART_SetConfig+0xe2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a64      	ldr	r2, [pc, #400]	@ (8002b18 <UART_SetConfig+0x264>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d102      	bne.n	8002992 <UART_SetConfig+0xde>
 800298c:	2300      	movs	r3, #0
 800298e:	77fb      	strb	r3, [r7, #31]
 8002990:	e001      	b.n	8002996 <UART_SetConfig+0xe2>
 8002992:	2310      	movs	r3, #16
 8002994:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800299e:	d15a      	bne.n	8002a56 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80029a0:	7ffb      	ldrb	r3, [r7, #31]
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d827      	bhi.n	80029f6 <UART_SetConfig+0x142>
 80029a6:	a201      	add	r2, pc, #4	@ (adr r2, 80029ac <UART_SetConfig+0xf8>)
 80029a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ac:	080029d1 	.word	0x080029d1
 80029b0:	080029d9 	.word	0x080029d9
 80029b4:	080029e1 	.word	0x080029e1
 80029b8:	080029f7 	.word	0x080029f7
 80029bc:	080029e7 	.word	0x080029e7
 80029c0:	080029f7 	.word	0x080029f7
 80029c4:	080029f7 	.word	0x080029f7
 80029c8:	080029f7 	.word	0x080029f7
 80029cc:	080029ef 	.word	0x080029ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029d0:	f7ff fb98 	bl	8002104 <HAL_RCC_GetPCLK1Freq>
 80029d4:	61b8      	str	r0, [r7, #24]
        break;
 80029d6:	e013      	b.n	8002a00 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029d8:	f7ff fbb6 	bl	8002148 <HAL_RCC_GetPCLK2Freq>
 80029dc:	61b8      	str	r0, [r7, #24]
        break;
 80029de:	e00f      	b.n	8002a00 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029e0:	4b4e      	ldr	r3, [pc, #312]	@ (8002b1c <UART_SetConfig+0x268>)
 80029e2:	61bb      	str	r3, [r7, #24]
        break;
 80029e4:	e00c      	b.n	8002a00 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029e6:	f7ff fb2d 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 80029ea:	61b8      	str	r0, [r7, #24]
        break;
 80029ec:	e008      	b.n	8002a00 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029f2:	61bb      	str	r3, [r7, #24]
        break;
 80029f4:	e004      	b.n	8002a00 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	77bb      	strb	r3, [r7, #30]
        break;
 80029fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d074      	beq.n	8002af0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	005a      	lsls	r2, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	085b      	lsrs	r3, r3, #1
 8002a10:	441a      	add	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	2b0f      	cmp	r3, #15
 8002a20:	d916      	bls.n	8002a50 <UART_SetConfig+0x19c>
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a28:	d212      	bcs.n	8002a50 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	f023 030f 	bic.w	r3, r3, #15
 8002a32:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	085b      	lsrs	r3, r3, #1
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	89fb      	ldrh	r3, [r7, #14]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	89fa      	ldrh	r2, [r7, #14]
 8002a4c:	60da      	str	r2, [r3, #12]
 8002a4e:	e04f      	b.n	8002af0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	77bb      	strb	r3, [r7, #30]
 8002a54:	e04c      	b.n	8002af0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a56:	7ffb      	ldrb	r3, [r7, #31]
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d828      	bhi.n	8002aae <UART_SetConfig+0x1fa>
 8002a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a64 <UART_SetConfig+0x1b0>)
 8002a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a62:	bf00      	nop
 8002a64:	08002a89 	.word	0x08002a89
 8002a68:	08002a91 	.word	0x08002a91
 8002a6c:	08002a99 	.word	0x08002a99
 8002a70:	08002aaf 	.word	0x08002aaf
 8002a74:	08002a9f 	.word	0x08002a9f
 8002a78:	08002aaf 	.word	0x08002aaf
 8002a7c:	08002aaf 	.word	0x08002aaf
 8002a80:	08002aaf 	.word	0x08002aaf
 8002a84:	08002aa7 	.word	0x08002aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a88:	f7ff fb3c 	bl	8002104 <HAL_RCC_GetPCLK1Freq>
 8002a8c:	61b8      	str	r0, [r7, #24]
        break;
 8002a8e:	e013      	b.n	8002ab8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a90:	f7ff fb5a 	bl	8002148 <HAL_RCC_GetPCLK2Freq>
 8002a94:	61b8      	str	r0, [r7, #24]
        break;
 8002a96:	e00f      	b.n	8002ab8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a98:	4b20      	ldr	r3, [pc, #128]	@ (8002b1c <UART_SetConfig+0x268>)
 8002a9a:	61bb      	str	r3, [r7, #24]
        break;
 8002a9c:	e00c      	b.n	8002ab8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a9e:	f7ff fad1 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8002aa2:	61b8      	str	r0, [r7, #24]
        break;
 8002aa4:	e008      	b.n	8002ab8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002aa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002aaa:	61bb      	str	r3, [r7, #24]
        break;
 8002aac:	e004      	b.n	8002ab8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	77bb      	strb	r3, [r7, #30]
        break;
 8002ab6:	bf00      	nop
    }

    if (pclk != 0U)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d018      	beq.n	8002af0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	085a      	lsrs	r2, r3, #1
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	441a      	add	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	2b0f      	cmp	r3, #15
 8002ad6:	d909      	bls.n	8002aec <UART_SetConfig+0x238>
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ade:	d205      	bcs.n	8002aec <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	60da      	str	r2, [r3, #12]
 8002aea:	e001      	b.n	8002af0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002afc:	7fbb      	ldrb	r3, [r7, #30]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	efff69f3 	.word	0xefff69f3
 8002b0c:	40013800 	.word	0x40013800
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40004400 	.word	0x40004400
 8002b18:	40004800 	.word	0x40004800
 8002b1c:	007a1200 	.word	0x007a1200

08002b20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00a      	beq.n	8002b4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00a      	beq.n	8002b6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00a      	beq.n	8002b8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00a      	beq.n	8002bd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd6:	f003 0320 	and.w	r3, r3, #32
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d01a      	beq.n	8002c36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c1e:	d10a      	bne.n	8002c36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	605a      	str	r2, [r3, #4]
  }
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b098      	sub	sp, #96	@ 0x60
 8002c68:	af02      	add	r7, sp, #8
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c74:	f7fd fd9a 	bl	80007ac <HAL_GetTick>
 8002c78:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0308 	and.w	r3, r3, #8
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d12e      	bne.n	8002ce6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c90:	2200      	movs	r2, #0
 8002c92:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f88c 	bl	8002db4 <UART_WaitOnFlagUntilTimeout>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d021      	beq.n	8002ce6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002caa:	e853 3f00 	ldrex	r3, [r3]
 8002cae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002cb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cc2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002cc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002cc8:	e841 2300 	strex	r3, r2, [r1]
 8002ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1e6      	bne.n	8002ca2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e062      	b.n	8002dac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d149      	bne.n	8002d88 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cf4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f856 	bl	8002db4 <UART_WaitOnFlagUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d03c      	beq.n	8002d88 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d16:	e853 3f00 	ldrex	r3, [r3]
 8002d1a:	623b      	str	r3, [r7, #32]
   return(result);
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d34:	e841 2300 	strex	r3, r2, [r1]
 8002d38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1e6      	bne.n	8002d0e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	3308      	adds	r3, #8
 8002d46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	e853 3f00 	ldrex	r3, [r3]
 8002d4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f023 0301 	bic.w	r3, r3, #1
 8002d56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	3308      	adds	r3, #8
 8002d5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d60:	61fa      	str	r2, [r7, #28]
 8002d62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d64:	69b9      	ldr	r1, [r7, #24]
 8002d66:	69fa      	ldr	r2, [r7, #28]
 8002d68:	e841 2300 	strex	r3, r2, [r1]
 8002d6c:	617b      	str	r3, [r7, #20]
   return(result);
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1e5      	bne.n	8002d40 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e011      	b.n	8002dac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2220      	movs	r2, #32
 8002d92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3758      	adds	r7, #88	@ 0x58
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dc4:	e04f      	b.n	8002e66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dcc:	d04b      	beq.n	8002e66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dce:	f7fd fced 	bl	80007ac <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d302      	bcc.n	8002de4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e04e      	b.n	8002e86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d037      	beq.n	8002e66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2b80      	cmp	r3, #128	@ 0x80
 8002dfa:	d034      	beq.n	8002e66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2b40      	cmp	r3, #64	@ 0x40
 8002e00:	d031      	beq.n	8002e66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	f003 0308 	and.w	r3, r3, #8
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d110      	bne.n	8002e32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2208      	movs	r2, #8
 8002e16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f838 	bl	8002e8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2208      	movs	r2, #8
 8002e22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e029      	b.n	8002e86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e40:	d111      	bne.n	8002e66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 f81e 	bl	8002e8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2220      	movs	r2, #32
 8002e56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e00f      	b.n	8002e86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	69da      	ldr	r2, [r3, #28]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	bf0c      	ite	eq
 8002e76:	2301      	moveq	r3, #1
 8002e78:	2300      	movne	r3, #0
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d0a0      	beq.n	8002dc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b095      	sub	sp, #84	@ 0x54
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e9e:	e853 3f00 	ldrex	r3, [r3]
 8002ea2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002eb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8002eb6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002eba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ebc:	e841 2300 	strex	r3, r2, [r1]
 8002ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1e6      	bne.n	8002e96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	3308      	adds	r3, #8
 8002ece:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	e853 3f00 	ldrex	r3, [r3]
 8002ed6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f023 0301 	bic.w	r3, r3, #1
 8002ede:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	3308      	adds	r3, #8
 8002ee6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ee8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002eea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002eee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ef0:	e841 2300 	strex	r3, r2, [r1]
 8002ef4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1e5      	bne.n	8002ec8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d118      	bne.n	8002f36 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	e853 3f00 	ldrex	r3, [r3]
 8002f10:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	f023 0310 	bic.w	r3, r3, #16
 8002f18:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f22:	61bb      	str	r3, [r7, #24]
 8002f24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f26:	6979      	ldr	r1, [r7, #20]
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	e841 2300 	strex	r3, r2, [r1]
 8002f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1e6      	bne.n	8002f04 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002f4a:	bf00      	nop
 8002f4c:	3754      	adds	r7, #84	@ 0x54
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
	...

08002f58 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f5e:	f3ef 8305 	mrs	r3, IPSR
 8002f62:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f64:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10f      	bne.n	8002f8a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f6a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f6e:	607b      	str	r3, [r7, #4]
  return(result);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d109      	bne.n	8002f8a <osKernelInitialize+0x32>
 8002f76:	4b11      	ldr	r3, [pc, #68]	@ (8002fbc <osKernelInitialize+0x64>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d109      	bne.n	8002f92 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f7e:	f3ef 8311 	mrs	r3, BASEPRI
 8002f82:	603b      	str	r3, [r7, #0]
  return(result);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002f8a:	f06f 0305 	mvn.w	r3, #5
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	e00c      	b.n	8002fac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002f92:	4b0a      	ldr	r3, [pc, #40]	@ (8002fbc <osKernelInitialize+0x64>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d105      	bne.n	8002fa6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002f9a:	4b08      	ldr	r3, [pc, #32]	@ (8002fbc <osKernelInitialize+0x64>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	e002      	b.n	8002fac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8002faa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002fac:	68fb      	ldr	r3, [r7, #12]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	20000164 	.word	0x20000164

08002fc0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fc6:	f3ef 8305 	mrs	r3, IPSR
 8002fca:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fcc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10f      	bne.n	8002ff2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8002fd6:	607b      	str	r3, [r7, #4]
  return(result);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d109      	bne.n	8002ff2 <osKernelStart+0x32>
 8002fde:	4b11      	ldr	r3, [pc, #68]	@ (8003024 <osKernelStart+0x64>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d109      	bne.n	8002ffa <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002fe6:	f3ef 8311 	mrs	r3, BASEPRI
 8002fea:	603b      	str	r3, [r7, #0]
  return(result);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <osKernelStart+0x3a>
    stat = osErrorISR;
 8002ff2:	f06f 0305 	mvn.w	r3, #5
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	e00e      	b.n	8003018 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8003024 <osKernelStart+0x64>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d107      	bne.n	8003012 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003002:	4b08      	ldr	r3, [pc, #32]	@ (8003024 <osKernelStart+0x64>)
 8003004:	2202      	movs	r2, #2
 8003006:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003008:	f001 f8b0 	bl	800416c <vTaskStartScheduler>
      stat = osOK;
 800300c:	2300      	movs	r3, #0
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	e002      	b.n	8003018 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003012:	f04f 33ff 	mov.w	r3, #4294967295
 8003016:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003018:	68fb      	ldr	r3, [r7, #12]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20000164 	.word	0x20000164

08003028 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003028:	b580      	push	{r7, lr}
 800302a:	b092      	sub	sp, #72	@ 0x48
 800302c:	af04      	add	r7, sp, #16
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003038:	f3ef 8305 	mrs	r3, IPSR
 800303c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800303e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003040:	2b00      	cmp	r3, #0
 8003042:	f040 8094 	bne.w	800316e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003046:	f3ef 8310 	mrs	r3, PRIMASK
 800304a:	623b      	str	r3, [r7, #32]
  return(result);
 800304c:	6a3b      	ldr	r3, [r7, #32]
 800304e:	2b00      	cmp	r3, #0
 8003050:	f040 808d 	bne.w	800316e <osThreadNew+0x146>
 8003054:	4b48      	ldr	r3, [pc, #288]	@ (8003178 <osThreadNew+0x150>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b02      	cmp	r3, #2
 800305a:	d106      	bne.n	800306a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800305c:	f3ef 8311 	mrs	r3, BASEPRI
 8003060:	61fb      	str	r3, [r7, #28]
  return(result);
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	2b00      	cmp	r3, #0
 8003066:	f040 8082 	bne.w	800316e <osThreadNew+0x146>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d07e      	beq.n	800316e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003070:	2380      	movs	r3, #128	@ 0x80
 8003072:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003074:	2318      	movs	r3, #24
 8003076:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8003078:	2300      	movs	r3, #0
 800307a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800307c:	f107 031b 	add.w	r3, r7, #27
 8003080:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8003082:	f04f 33ff 	mov.w	r3, #4294967295
 8003086:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d045      	beq.n	800311a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <osThreadNew+0x74>
        name = attr->name;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80030aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d008      	beq.n	80030c2 <osThreadNew+0x9a>
 80030b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b2:	2b38      	cmp	r3, #56	@ 0x38
 80030b4:	d805      	bhi.n	80030c2 <osThreadNew+0x9a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <osThreadNew+0x9e>
        return (NULL);
 80030c2:	2300      	movs	r3, #0
 80030c4:	e054      	b.n	8003170 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	089b      	lsrs	r3, r3, #2
 80030d4:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00e      	beq.n	80030fc <osThreadNew+0xd4>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	2ba7      	cmp	r3, #167	@ 0xa7
 80030e4:	d90a      	bls.n	80030fc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d006      	beq.n	80030fc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d002      	beq.n	80030fc <osThreadNew+0xd4>
        mem = 1;
 80030f6:	2301      	movs	r3, #1
 80030f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030fa:	e010      	b.n	800311e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10c      	bne.n	800311e <osThreadNew+0xf6>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d108      	bne.n	800311e <osThreadNew+0xf6>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d104      	bne.n	800311e <osThreadNew+0xf6>
          mem = 0;
 8003114:	2300      	movs	r3, #0
 8003116:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003118:	e001      	b.n	800311e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800311a:	2300      	movs	r3, #0
 800311c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 800311e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003120:	2b01      	cmp	r3, #1
 8003122:	d110      	bne.n	8003146 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800312c:	9202      	str	r2, [sp, #8]
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003138:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 fe2c 	bl	8003d98 <xTaskCreateStatic>
 8003140:	4603      	mov	r3, r0
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	e013      	b.n	800316e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003148:	2b00      	cmp	r3, #0
 800314a:	d110      	bne.n	800316e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800314c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800314e:	b29a      	uxth	r2, r3
 8003150:	f107 0314 	add.w	r3, r7, #20
 8003154:	9301      	str	r3, [sp, #4]
 8003156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 fe79 	bl	8003e56 <xTaskCreate>
 8003164:	4603      	mov	r3, r0
 8003166:	2b01      	cmp	r3, #1
 8003168:	d001      	beq.n	800316e <osThreadNew+0x146>
          hTask = NULL;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800316e:	697b      	ldr	r3, [r7, #20]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3738      	adds	r7, #56	@ 0x38
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	20000164 	.word	0x20000164

0800317c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003184:	f3ef 8305 	mrs	r3, IPSR
 8003188:	613b      	str	r3, [r7, #16]
  return(result);
 800318a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10f      	bne.n	80031b0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003190:	f3ef 8310 	mrs	r3, PRIMASK
 8003194:	60fb      	str	r3, [r7, #12]
  return(result);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d109      	bne.n	80031b0 <osDelay+0x34>
 800319c:	4b0d      	ldr	r3, [pc, #52]	@ (80031d4 <osDelay+0x58>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d109      	bne.n	80031b8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031a4:	f3ef 8311 	mrs	r3, BASEPRI
 80031a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <osDelay+0x3c>
    stat = osErrorISR;
 80031b0:	f06f 0305 	mvn.w	r3, #5
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	e007      	b.n	80031c8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 ff9c 	bl	8004100 <vTaskDelay>
    }
  }

  return (stat);
 80031c8:	697b      	ldr	r3, [r7, #20]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	20000164 	.word	0x20000164

080031d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4a07      	ldr	r2, [pc, #28]	@ (8003204 <vApplicationGetIdleTaskMemory+0x2c>)
 80031e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	4a06      	ldr	r2, [pc, #24]	@ (8003208 <vApplicationGetIdleTaskMemory+0x30>)
 80031ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2280      	movs	r2, #128	@ 0x80
 80031f4:	601a      	str	r2, [r3, #0]
}
 80031f6:	bf00      	nop
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	20000168 	.word	0x20000168
 8003208:	20000210 	.word	0x20000210

0800320c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4a07      	ldr	r2, [pc, #28]	@ (8003238 <vApplicationGetTimerTaskMemory+0x2c>)
 800321c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	4a06      	ldr	r2, [pc, #24]	@ (800323c <vApplicationGetTimerTaskMemory+0x30>)
 8003222:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800322a:	601a      	str	r2, [r3, #0]
}
 800322c:	bf00      	nop
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	20000410 	.word	0x20000410
 800323c:	200004b8 	.word	0x200004b8

08003240 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f103 0208 	add.w	r2, r3, #8
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f04f 32ff 	mov.w	r2, #4294967295
 8003258:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f103 0208 	add.w	r2, r3, #8
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f103 0208 	add.w	r2, r3, #8
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800329a:	b480      	push	{r7}
 800329c:	b085      	sub	sp, #20
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	601a      	str	r2, [r3, #0]
}
 80032d6:	bf00      	nop
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032e2:	b480      	push	{r7}
 80032e4:	b085      	sub	sp, #20
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f8:	d103      	bne.n	8003302 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	e00c      	b.n	800331c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	3308      	adds	r3, #8
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	e002      	b.n	8003310 <vListInsert+0x2e>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	429a      	cmp	r2, r3
 800331a:	d2f6      	bcs.n	800330a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	1c5a      	adds	r2, r3, #1
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	601a      	str	r2, [r3, #0]
}
 8003348:	bf00      	nop
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6892      	ldr	r2, [r2, #8]
 800336a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6852      	ldr	r2, [r2, #4]
 8003374:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	429a      	cmp	r2, r3
 800337e:	d103      	bne.n	8003388 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	1e5a      	subs	r2, r3, #1
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10b      	bne.n	80033d4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80033bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033c0:	f383 8811 	msr	BASEPRI, r3
 80033c4:	f3bf 8f6f 	isb	sy
 80033c8:	f3bf 8f4f 	dsb	sy
 80033cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80033ce:	bf00      	nop
 80033d0:	bf00      	nop
 80033d2:	e7fd      	b.n	80033d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80033d4:	f002 f870 	bl	80054b8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e0:	68f9      	ldr	r1, [r7, #12]
 80033e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	441a      	add	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003404:	3b01      	subs	r3, #1
 8003406:	68f9      	ldr	r1, [r7, #12]
 8003408:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800340a:	fb01 f303 	mul.w	r3, r1, r3
 800340e:	441a      	add	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	22ff      	movs	r2, #255	@ 0xff
 8003418:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	22ff      	movs	r2, #255	@ 0xff
 8003420:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d114      	bne.n	8003454 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d01a      	beq.n	8003468 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	3310      	adds	r3, #16
 8003436:	4618      	mov	r0, r3
 8003438:	f001 f93c 	bl	80046b4 <xTaskRemoveFromEventList>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d012      	beq.n	8003468 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003442:	4b0d      	ldr	r3, [pc, #52]	@ (8003478 <xQueueGenericReset+0xd0>)
 8003444:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	f3bf 8f4f 	dsb	sy
 800344e:	f3bf 8f6f 	isb	sy
 8003452:	e009      	b.n	8003468 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	3310      	adds	r3, #16
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff fef1 	bl	8003240 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	3324      	adds	r3, #36	@ 0x24
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff feec 	bl	8003240 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003468:	f002 f858 	bl	800551c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800346c:	2301      	movs	r3, #1
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	e000ed04 	.word	0xe000ed04

0800347c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800347c:	b580      	push	{r7, lr}
 800347e:	b08e      	sub	sp, #56	@ 0x38
 8003480:	af02      	add	r7, sp, #8
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
 8003488:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10b      	bne.n	80034a8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003494:	f383 8811 	msr	BASEPRI, r3
 8003498:	f3bf 8f6f 	isb	sy
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80034a2:	bf00      	nop
 80034a4:	bf00      	nop
 80034a6:	e7fd      	b.n	80034a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10b      	bne.n	80034c6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80034ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034b2:	f383 8811 	msr	BASEPRI, r3
 80034b6:	f3bf 8f6f 	isb	sy
 80034ba:	f3bf 8f4f 	dsb	sy
 80034be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80034c0:	bf00      	nop
 80034c2:	bf00      	nop
 80034c4:	e7fd      	b.n	80034c2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <xQueueGenericCreateStatic+0x56>
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <xQueueGenericCreateStatic+0x5a>
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <xQueueGenericCreateStatic+0x5c>
 80034d6:	2300      	movs	r3, #0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10b      	bne.n	80034f4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80034dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034e0:	f383 8811 	msr	BASEPRI, r3
 80034e4:	f3bf 8f6f 	isb	sy
 80034e8:	f3bf 8f4f 	dsb	sy
 80034ec:	623b      	str	r3, [r7, #32]
}
 80034ee:	bf00      	nop
 80034f0:	bf00      	nop
 80034f2:	e7fd      	b.n	80034f0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d102      	bne.n	8003500 <xQueueGenericCreateStatic+0x84>
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <xQueueGenericCreateStatic+0x88>
 8003500:	2301      	movs	r3, #1
 8003502:	e000      	b.n	8003506 <xQueueGenericCreateStatic+0x8a>
 8003504:	2300      	movs	r3, #0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10b      	bne.n	8003522 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800350a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800350e:	f383 8811 	msr	BASEPRI, r3
 8003512:	f3bf 8f6f 	isb	sy
 8003516:	f3bf 8f4f 	dsb	sy
 800351a:	61fb      	str	r3, [r7, #28]
}
 800351c:	bf00      	nop
 800351e:	bf00      	nop
 8003520:	e7fd      	b.n	800351e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003522:	2350      	movs	r3, #80	@ 0x50
 8003524:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2b50      	cmp	r3, #80	@ 0x50
 800352a:	d00b      	beq.n	8003544 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800352c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003530:	f383 8811 	msr	BASEPRI, r3
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	61bb      	str	r3, [r7, #24]
}
 800353e:	bf00      	nop
 8003540:	bf00      	nop
 8003542:	e7fd      	b.n	8003540 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00d      	beq.n	800356a <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800354e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003556:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800355a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	4613      	mov	r3, r2
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	68b9      	ldr	r1, [r7, #8]
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 f805 	bl	8003574 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800356a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800356c:	4618      	mov	r0, r3
 800356e:	3730      	adds	r7, #48	@ 0x30
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
 8003580:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d103      	bne.n	8003590 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	e002      	b.n	8003596 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80035a2:	2101      	movs	r1, #1
 80035a4:	69b8      	ldr	r0, [r7, #24]
 80035a6:	f7ff feff 	bl	80033a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	78fa      	ldrb	r2, [r7, #3]
 80035ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80035b2:	bf00      	nop
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
	...

080035bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08e      	sub	sp, #56	@ 0x38
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
 80035c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80035ca:	2300      	movs	r3, #0
 80035cc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80035d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10b      	bne.n	80035f0 <xQueueGenericSend+0x34>
	__asm volatile
 80035d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035dc:	f383 8811 	msr	BASEPRI, r3
 80035e0:	f3bf 8f6f 	isb	sy
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80035ea:	bf00      	nop
 80035ec:	bf00      	nop
 80035ee:	e7fd      	b.n	80035ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d103      	bne.n	80035fe <xQueueGenericSend+0x42>
 80035f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <xQueueGenericSend+0x46>
 80035fe:	2301      	movs	r3, #1
 8003600:	e000      	b.n	8003604 <xQueueGenericSend+0x48>
 8003602:	2300      	movs	r3, #0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10b      	bne.n	8003620 <xQueueGenericSend+0x64>
	__asm volatile
 8003608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800361a:	bf00      	nop
 800361c:	bf00      	nop
 800361e:	e7fd      	b.n	800361c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d103      	bne.n	800362e <xQueueGenericSend+0x72>
 8003626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <xQueueGenericSend+0x76>
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <xQueueGenericSend+0x78>
 8003632:	2300      	movs	r3, #0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10b      	bne.n	8003650 <xQueueGenericSend+0x94>
	__asm volatile
 8003638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800363c:	f383 8811 	msr	BASEPRI, r3
 8003640:	f3bf 8f6f 	isb	sy
 8003644:	f3bf 8f4f 	dsb	sy
 8003648:	623b      	str	r3, [r7, #32]
}
 800364a:	bf00      	nop
 800364c:	bf00      	nop
 800364e:	e7fd      	b.n	800364c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003650:	f001 f9fc 	bl	8004a4c <xTaskGetSchedulerState>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d102      	bne.n	8003660 <xQueueGenericSend+0xa4>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <xQueueGenericSend+0xa8>
 8003660:	2301      	movs	r3, #1
 8003662:	e000      	b.n	8003666 <xQueueGenericSend+0xaa>
 8003664:	2300      	movs	r3, #0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10b      	bne.n	8003682 <xQueueGenericSend+0xc6>
	__asm volatile
 800366a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800366e:	f383 8811 	msr	BASEPRI, r3
 8003672:	f3bf 8f6f 	isb	sy
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	61fb      	str	r3, [r7, #28]
}
 800367c:	bf00      	nop
 800367e:	bf00      	nop
 8003680:	e7fd      	b.n	800367e <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003682:	f001 ff19 	bl	80054b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003688:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800368a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800368e:	429a      	cmp	r2, r3
 8003690:	d302      	bcc.n	8003698 <xQueueGenericSend+0xdc>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b02      	cmp	r3, #2
 8003696:	d129      	bne.n	80036ec <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	68b9      	ldr	r1, [r7, #8]
 800369c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800369e:	f000 fa0d 	bl	8003abc <prvCopyDataToQueue>
 80036a2:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d010      	beq.n	80036ce <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ae:	3324      	adds	r3, #36	@ 0x24
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 ffff 	bl	80046b4 <xTaskRemoveFromEventList>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d013      	beq.n	80036e4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80036bc:	4b3f      	ldr	r3, [pc, #252]	@ (80037bc <xQueueGenericSend+0x200>)
 80036be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	e00a      	b.n	80036e4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80036ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d007      	beq.n	80036e4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80036d4:	4b39      	ldr	r3, [pc, #228]	@ (80037bc <xQueueGenericSend+0x200>)
 80036d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80036e4:	f001 ff1a 	bl	800551c <vPortExitCritical>
				return pdPASS;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e063      	b.n	80037b4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d103      	bne.n	80036fa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80036f2:	f001 ff13 	bl	800551c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80036f6:	2300      	movs	r3, #0
 80036f8:	e05c      	b.n	80037b4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80036fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d106      	bne.n	800370e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003700:	f107 0314 	add.w	r3, r7, #20
 8003704:	4618      	mov	r0, r3
 8003706:	f001 f839 	bl	800477c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800370a:	2301      	movs	r3, #1
 800370c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800370e:	f001 ff05 	bl	800551c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003712:	f000 fd9b 	bl	800424c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003716:	f001 fecf 	bl	80054b8 <vPortEnterCritical>
 800371a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003720:	b25b      	sxtb	r3, r3
 8003722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003726:	d103      	bne.n	8003730 <xQueueGenericSend+0x174>
 8003728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003732:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003736:	b25b      	sxtb	r3, r3
 8003738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373c:	d103      	bne.n	8003746 <xQueueGenericSend+0x18a>
 800373e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003746:	f001 fee9 	bl	800551c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800374a:	1d3a      	adds	r2, r7, #4
 800374c:	f107 0314 	add.w	r3, r7, #20
 8003750:	4611      	mov	r1, r2
 8003752:	4618      	mov	r0, r3
 8003754:	f001 f828 	bl	80047a8 <xTaskCheckForTimeOut>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d124      	bne.n	80037a8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800375e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003760:	f000 faa4 	bl	8003cac <prvIsQueueFull>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d018      	beq.n	800379c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800376a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376c:	3310      	adds	r3, #16
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	4611      	mov	r1, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f000 ff4c 	bl	8004610 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003778:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800377a:	f000 fa2f 	bl	8003bdc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800377e:	f000 fd73 	bl	8004268 <xTaskResumeAll>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	f47f af7c 	bne.w	8003682 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800378a:	4b0c      	ldr	r3, [pc, #48]	@ (80037bc <xQueueGenericSend+0x200>)
 800378c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	f3bf 8f4f 	dsb	sy
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	e772      	b.n	8003682 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800379c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800379e:	f000 fa1d 	bl	8003bdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037a2:	f000 fd61 	bl	8004268 <xTaskResumeAll>
 80037a6:	e76c      	b.n	8003682 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80037a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037aa:	f000 fa17 	bl	8003bdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037ae:	f000 fd5b 	bl	8004268 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80037b2:	2300      	movs	r3, #0
		}
	}
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3738      	adds	r7, #56	@ 0x38
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	e000ed04 	.word	0xe000ed04

080037c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08e      	sub	sp, #56	@ 0x38
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80037d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10b      	bne.n	80037f0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80037d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037dc:	f383 8811 	msr	BASEPRI, r3
 80037e0:	f3bf 8f6f 	isb	sy
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80037ea:	bf00      	nop
 80037ec:	bf00      	nop
 80037ee:	e7fd      	b.n	80037ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d103      	bne.n	80037fe <xQueueGenericSendFromISR+0x3e>
 80037f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <xQueueGenericSendFromISR+0x42>
 80037fe:	2301      	movs	r3, #1
 8003800:	e000      	b.n	8003804 <xQueueGenericSendFromISR+0x44>
 8003802:	2300      	movs	r3, #0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10b      	bne.n	8003820 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	623b      	str	r3, [r7, #32]
}
 800381a:	bf00      	nop
 800381c:	bf00      	nop
 800381e:	e7fd      	b.n	800381c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d103      	bne.n	800382e <xQueueGenericSendFromISR+0x6e>
 8003826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800382a:	2b01      	cmp	r3, #1
 800382c:	d101      	bne.n	8003832 <xQueueGenericSendFromISR+0x72>
 800382e:	2301      	movs	r3, #1
 8003830:	e000      	b.n	8003834 <xQueueGenericSendFromISR+0x74>
 8003832:	2300      	movs	r3, #0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10b      	bne.n	8003850 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800383c:	f383 8811 	msr	BASEPRI, r3
 8003840:	f3bf 8f6f 	isb	sy
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	61fb      	str	r3, [r7, #28]
}
 800384a:	bf00      	nop
 800384c:	bf00      	nop
 800384e:	e7fd      	b.n	800384c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003850:	f001 ff12 	bl	8005678 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003854:	f3ef 8211 	mrs	r2, BASEPRI
 8003858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800385c:	f383 8811 	msr	BASEPRI, r3
 8003860:	f3bf 8f6f 	isb	sy
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	61ba      	str	r2, [r7, #24]
 800386a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800386c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800386e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003872:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003878:	429a      	cmp	r2, r3
 800387a:	d302      	bcc.n	8003882 <xQueueGenericSendFromISR+0xc2>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d12c      	bne.n	80038dc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003884:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003888:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	68b9      	ldr	r1, [r7, #8]
 8003890:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003892:	f000 f913 	bl	8003abc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003896:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800389a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389e:	d112      	bne.n	80038c6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d016      	beq.n	80038d6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038aa:	3324      	adds	r3, #36	@ 0x24
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 ff01 	bl	80046b4 <xTaskRemoveFromEventList>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00e      	beq.n	80038d6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00b      	beq.n	80038d6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	e007      	b.n	80038d6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80038c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80038ca:	3301      	adds	r3, #1
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	b25a      	sxtb	r2, r3
 80038d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80038d6:	2301      	movs	r3, #1
 80038d8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80038da:	e001      	b.n	80038e0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80038dc:	2300      	movs	r3, #0
 80038de:	637b      	str	r3, [r7, #52]	@ 0x34
 80038e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80038ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80038ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3738      	adds	r7, #56	@ 0x38
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08c      	sub	sp, #48	@ 0x30
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003904:	2300      	movs	r3, #0
 8003906:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800390c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10b      	bne.n	800392a <xQueueReceive+0x32>
	__asm volatile
 8003912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003916:	f383 8811 	msr	BASEPRI, r3
 800391a:	f3bf 8f6f 	isb	sy
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	623b      	str	r3, [r7, #32]
}
 8003924:	bf00      	nop
 8003926:	bf00      	nop
 8003928:	e7fd      	b.n	8003926 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d103      	bne.n	8003938 <xQueueReceive+0x40>
 8003930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <xQueueReceive+0x44>
 8003938:	2301      	movs	r3, #1
 800393a:	e000      	b.n	800393e <xQueueReceive+0x46>
 800393c:	2300      	movs	r3, #0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10b      	bne.n	800395a <xQueueReceive+0x62>
	__asm volatile
 8003942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003946:	f383 8811 	msr	BASEPRI, r3
 800394a:	f3bf 8f6f 	isb	sy
 800394e:	f3bf 8f4f 	dsb	sy
 8003952:	61fb      	str	r3, [r7, #28]
}
 8003954:	bf00      	nop
 8003956:	bf00      	nop
 8003958:	e7fd      	b.n	8003956 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800395a:	f001 f877 	bl	8004a4c <xTaskGetSchedulerState>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d102      	bne.n	800396a <xQueueReceive+0x72>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <xQueueReceive+0x76>
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <xQueueReceive+0x78>
 800396e:	2300      	movs	r3, #0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10b      	bne.n	800398c <xQueueReceive+0x94>
	__asm volatile
 8003974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003978:	f383 8811 	msr	BASEPRI, r3
 800397c:	f3bf 8f6f 	isb	sy
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	61bb      	str	r3, [r7, #24]
}
 8003986:	bf00      	nop
 8003988:	bf00      	nop
 800398a:	e7fd      	b.n	8003988 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800398c:	f001 fd94 	bl	80054b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003994:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003998:	2b00      	cmp	r3, #0
 800399a:	d01f      	beq.n	80039dc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039a0:	f000 f8f6 	bl	8003b90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80039a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a6:	1e5a      	subs	r2, r3, #1
 80039a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039aa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00f      	beq.n	80039d4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b6:	3310      	adds	r3, #16
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fe7b 	bl	80046b4 <xTaskRemoveFromEventList>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d007      	beq.n	80039d4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80039c4:	4b3c      	ldr	r3, [pc, #240]	@ (8003ab8 <xQueueReceive+0x1c0>)
 80039c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80039d4:	f001 fda2 	bl	800551c <vPortExitCritical>
				return pdPASS;
 80039d8:	2301      	movs	r3, #1
 80039da:	e069      	b.n	8003ab0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d103      	bne.n	80039ea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039e2:	f001 fd9b 	bl	800551c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80039e6:	2300      	movs	r3, #0
 80039e8:	e062      	b.n	8003ab0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d106      	bne.n	80039fe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039f0:	f107 0310 	add.w	r3, r7, #16
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 fec1 	bl	800477c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039fa:	2301      	movs	r3, #1
 80039fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039fe:	f001 fd8d 	bl	800551c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a02:	f000 fc23 	bl	800424c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a06:	f001 fd57 	bl	80054b8 <vPortEnterCritical>
 8003a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a10:	b25b      	sxtb	r3, r3
 8003a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a16:	d103      	bne.n	8003a20 <xQueueReceive+0x128>
 8003a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a26:	b25b      	sxtb	r3, r3
 8003a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2c:	d103      	bne.n	8003a36 <xQueueReceive+0x13e>
 8003a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a36:	f001 fd71 	bl	800551c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a3a:	1d3a      	adds	r2, r7, #4
 8003a3c:	f107 0310 	add.w	r3, r7, #16
 8003a40:	4611      	mov	r1, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 feb0 	bl	80047a8 <xTaskCheckForTimeOut>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d123      	bne.n	8003a96 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a50:	f000 f916 	bl	8003c80 <prvIsQueueEmpty>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d017      	beq.n	8003a8a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5c:	3324      	adds	r3, #36	@ 0x24
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	4611      	mov	r1, r2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 fdd4 	bl	8004610 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a6a:	f000 f8b7 	bl	8003bdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a6e:	f000 fbfb 	bl	8004268 <xTaskResumeAll>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d189      	bne.n	800398c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003a78:	4b0f      	ldr	r3, [pc, #60]	@ (8003ab8 <xQueueReceive+0x1c0>)
 8003a7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	e780      	b.n	800398c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003a8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a8c:	f000 f8a6 	bl	8003bdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a90:	f000 fbea 	bl	8004268 <xTaskResumeAll>
 8003a94:	e77a      	b.n	800398c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003a96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a98:	f000 f8a0 	bl	8003bdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a9c:	f000 fbe4 	bl	8004268 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003aa0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003aa2:	f000 f8ed 	bl	8003c80 <prvIsQueueEmpty>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f43f af6f 	beq.w	800398c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003aae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3730      	adds	r7, #48	@ 0x30
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	e000ed04 	.word	0xe000ed04

08003abc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10d      	bne.n	8003af6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d14d      	bne.n	8003b7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 ffce 	bl	8004a88 <xTaskPriorityDisinherit>
 8003aec:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	605a      	str	r2, [r3, #4]
 8003af4:	e043      	b.n	8003b7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d119      	bne.n	8003b30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6898      	ldr	r0, [r3, #8]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b04:	461a      	mov	r2, r3
 8003b06:	68b9      	ldr	r1, [r7, #8]
 8003b08:	f002 f85c 	bl	8005bc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b14:	441a      	add	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d32b      	bcc.n	8003b7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	609a      	str	r2, [r3, #8]
 8003b2e:	e026      	b.n	8003b7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	68d8      	ldr	r0, [r3, #12]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b38:	461a      	mov	r2, r3
 8003b3a:	68b9      	ldr	r1, [r7, #8]
 8003b3c:	f002 f842 	bl	8005bc4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b48:	425b      	negs	r3, r3
 8003b4a:	441a      	add	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d207      	bcs.n	8003b6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b64:	425b      	negs	r3, r3
 8003b66:	441a      	add	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d105      	bne.n	8003b7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003b86:	697b      	ldr	r3, [r7, #20]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d018      	beq.n	8003bd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003baa:	441a      	add	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68da      	ldr	r2, [r3, #12]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d303      	bcc.n	8003bc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68d9      	ldr	r1, [r3, #12]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bcc:	461a      	mov	r2, r3
 8003bce:	6838      	ldr	r0, [r7, #0]
 8003bd0:	f001 fff8 	bl	8005bc4 <memcpy>
	}
}
 8003bd4:	bf00      	nop
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003be4:	f001 fc68 	bl	80054b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003bee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003bf0:	e011      	b.n	8003c16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d012      	beq.n	8003c20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3324      	adds	r3, #36	@ 0x24
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 fd58 	bl	80046b4 <xTaskRemoveFromEventList>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c0a:	f000 fe31 	bl	8004870 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	dce9      	bgt.n	8003bf2 <prvUnlockQueue+0x16>
 8003c1e:	e000      	b.n	8003c22 <prvUnlockQueue+0x46>
					break;
 8003c20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	22ff      	movs	r2, #255	@ 0xff
 8003c26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003c2a:	f001 fc77 	bl	800551c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c2e:	f001 fc43 	bl	80054b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c3a:	e011      	b.n	8003c60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d012      	beq.n	8003c6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3310      	adds	r3, #16
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 fd33 	bl	80046b4 <xTaskRemoveFromEventList>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003c54:	f000 fe0c 	bl	8004870 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003c58:	7bbb      	ldrb	r3, [r7, #14]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	dce9      	bgt.n	8003c3c <prvUnlockQueue+0x60>
 8003c68:	e000      	b.n	8003c6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003c6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	22ff      	movs	r2, #255	@ 0xff
 8003c70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003c74:	f001 fc52 	bl	800551c <vPortExitCritical>
}
 8003c78:	bf00      	nop
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c88:	f001 fc16 	bl	80054b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d102      	bne.n	8003c9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003c94:	2301      	movs	r3, #1
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	e001      	b.n	8003c9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c9e:	f001 fc3d 	bl	800551c <vPortExitCritical>

	return xReturn;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cb4:	f001 fc00 	bl	80054b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d102      	bne.n	8003cca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	e001      	b.n	8003cce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003cce:	f001 fc25 	bl	800551c <vPortExitCritical>

	return xReturn;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	e014      	b.n	8003d16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003cec:	4a0f      	ldr	r2, [pc, #60]	@ (8003d2c <vQueueAddToRegistry+0x50>)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10b      	bne.n	8003d10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003cf8:	490c      	ldr	r1, [pc, #48]	@ (8003d2c <vQueueAddToRegistry+0x50>)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003d02:	4a0a      	ldr	r2, [pc, #40]	@ (8003d2c <vQueueAddToRegistry+0x50>)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	4413      	add	r3, r2
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003d0e:	e006      	b.n	8003d1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	3301      	adds	r3, #1
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2b07      	cmp	r3, #7
 8003d1a:	d9e7      	bls.n	8003cec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003d1c:	bf00      	nop
 8003d1e:	bf00      	nop
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	200008b8 	.word	0x200008b8

08003d30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003d40:	f001 fbba 	bl	80054b8 <vPortEnterCritical>
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d4a:	b25b      	sxtb	r3, r3
 8003d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d50:	d103      	bne.n	8003d5a <vQueueWaitForMessageRestricted+0x2a>
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d60:	b25b      	sxtb	r3, r3
 8003d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d66:	d103      	bne.n	8003d70 <vQueueWaitForMessageRestricted+0x40>
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d70:	f001 fbd4 	bl	800551c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d106      	bne.n	8003d8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	3324      	adds	r3, #36	@ 0x24
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	68b9      	ldr	r1, [r7, #8]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 fc69 	bl	800465c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003d8a:	6978      	ldr	r0, [r7, #20]
 8003d8c:	f7ff ff26 	bl	8003bdc <prvUnlockQueue>
	}
 8003d90:	bf00      	nop
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b08e      	sub	sp, #56	@ 0x38
 8003d9c:	af04      	add	r7, sp, #16
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
 8003da4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10b      	bne.n	8003dc4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	623b      	str	r3, [r7, #32]
}
 8003dbe:	bf00      	nop
 8003dc0:	bf00      	nop
 8003dc2:	e7fd      	b.n	8003dc0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10b      	bne.n	8003de2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	61fb      	str	r3, [r7, #28]
}
 8003ddc:	bf00      	nop
 8003dde:	bf00      	nop
 8003de0:	e7fd      	b.n	8003dde <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003de2:	23a8      	movs	r3, #168	@ 0xa8
 8003de4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	2ba8      	cmp	r3, #168	@ 0xa8
 8003dea:	d00b      	beq.n	8003e04 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df0:	f383 8811 	msr	BASEPRI, r3
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	61bb      	str	r3, [r7, #24]
}
 8003dfe:	bf00      	nop
 8003e00:	bf00      	nop
 8003e02:	e7fd      	b.n	8003e00 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d01e      	beq.n	8003e48 <xTaskCreateStatic+0xb0>
 8003e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d01b      	beq.n	8003e48 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e12:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e18:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e22:	2300      	movs	r3, #0
 8003e24:	9303      	str	r3, [sp, #12]
 8003e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e28:	9302      	str	r3, [sp, #8]
 8003e2a:	f107 0314 	add.w	r3, r7, #20
 8003e2e:	9301      	str	r3, [sp, #4]
 8003e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	68b9      	ldr	r1, [r7, #8]
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 f850 	bl	8003ee0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e42:	f000 f8ed 	bl	8004020 <prvAddNewTaskToReadyList>
 8003e46:	e001      	b.n	8003e4c <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e4c:	697b      	ldr	r3, [r7, #20]
	}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3728      	adds	r7, #40	@ 0x28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b08c      	sub	sp, #48	@ 0x30
 8003e5a:	af04      	add	r7, sp, #16
 8003e5c:	60f8      	str	r0, [r7, #12]
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	603b      	str	r3, [r7, #0]
 8003e62:	4613      	mov	r3, r2
 8003e64:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e66:	88fb      	ldrh	r3, [r7, #6]
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f001 fc46 	bl	80056fc <pvPortMalloc>
 8003e70:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00e      	beq.n	8003e96 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003e78:	20a8      	movs	r0, #168	@ 0xa8
 8003e7a:	f001 fc3f 	bl	80056fc <pvPortMalloc>
 8003e7e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e8c:	e005      	b.n	8003e9a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e8e:	6978      	ldr	r0, [r7, #20]
 8003e90:	f001 fcfc 	bl	800588c <vPortFree>
 8003e94:	e001      	b.n	8003e9a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d017      	beq.n	8003ed0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ea8:	88fa      	ldrh	r2, [r7, #6]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	9303      	str	r3, [sp, #12]
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	9302      	str	r3, [sp, #8]
 8003eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb4:	9301      	str	r3, [sp, #4]
 8003eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	68b9      	ldr	r1, [r7, #8]
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 f80e 	bl	8003ee0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ec4:	69f8      	ldr	r0, [r7, #28]
 8003ec6:	f000 f8ab 	bl	8004020 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	61bb      	str	r3, [r7, #24]
 8003ece:	e002      	b.n	8003ed6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ed6:	69bb      	ldr	r3, [r7, #24]
	}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3720      	adds	r7, #32
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b088      	sub	sp, #32
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	21a5      	movs	r1, #165	@ 0xa5
 8003efa:	f001 fddf 	bl	8005abc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	f023 0307 	bic.w	r3, r3, #7
 8003f16:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00b      	beq.n	8003f3a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f26:	f383 8811 	msr	BASEPRI, r3
 8003f2a:	f3bf 8f6f 	isb	sy
 8003f2e:	f3bf 8f4f 	dsb	sy
 8003f32:	617b      	str	r3, [r7, #20]
}
 8003f34:	bf00      	nop
 8003f36:	bf00      	nop
 8003f38:	e7fd      	b.n	8003f36 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61fb      	str	r3, [r7, #28]
 8003f3e:	e012      	b.n	8003f66 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	4413      	add	r3, r2
 8003f46:	7819      	ldrb	r1, [r3, #0]
 8003f48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	3334      	adds	r3, #52	@ 0x34
 8003f50:	460a      	mov	r2, r1
 8003f52:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	4413      	add	r3, r2
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d006      	beq.n	8003f6e <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	3301      	adds	r3, #1
 8003f64:	61fb      	str	r3, [r7, #28]
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	2b0f      	cmp	r3, #15
 8003f6a:	d9e9      	bls.n	8003f40 <prvInitialiseNewTask+0x60>
 8003f6c:	e000      	b.n	8003f70 <prvInitialiseNewTask+0x90>
		{
			break;
 8003f6e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7a:	2b37      	cmp	r3, #55	@ 0x37
 8003f7c:	d901      	bls.n	8003f82 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f7e:	2337      	movs	r3, #55	@ 0x37
 8003f80:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f86:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f8c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f90:	2200      	movs	r2, #0
 8003f92:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f96:	3304      	adds	r3, #4
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff f971 	bl	8003280 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa0:	3318      	adds	r3, #24
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff f96c 	bl	8003280 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003faa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fbc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd0:	3354      	adds	r3, #84	@ 0x54
 8003fd2:	224c      	movs	r2, #76	@ 0x4c
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f001 fd70 	bl	8005abc <memset>
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fde:	4a0d      	ldr	r2, [pc, #52]	@ (8004014 <prvInitialiseNewTask+0x134>)
 8003fe0:	659a      	str	r2, [r3, #88]	@ 0x58
 8003fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe4:	4a0c      	ldr	r2, [pc, #48]	@ (8004018 <prvInitialiseNewTask+0x138>)
 8003fe6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fea:	4a0c      	ldr	r2, [pc, #48]	@ (800401c <prvInitialiseNewTask+0x13c>)
 8003fec:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	68f9      	ldr	r1, [r7, #12]
 8003ff2:	69b8      	ldr	r0, [r7, #24]
 8003ff4:	f001 f92c 	bl	8005250 <pxPortInitialiseStack>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004000:	2b00      	cmp	r3, #0
 8004002:	d002      	beq.n	800400a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004006:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004008:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800400a:	bf00      	nop
 800400c:	3720      	adds	r7, #32
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	20001b44 	.word	0x20001b44
 8004018:	20001bac 	.word	0x20001bac
 800401c:	20001c14 	.word	0x20001c14

08004020 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004028:	f001 fa46 	bl	80054b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800402c:	4b2d      	ldr	r3, [pc, #180]	@ (80040e4 <prvAddNewTaskToReadyList+0xc4>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3301      	adds	r3, #1
 8004032:	4a2c      	ldr	r2, [pc, #176]	@ (80040e4 <prvAddNewTaskToReadyList+0xc4>)
 8004034:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004036:	4b2c      	ldr	r3, [pc, #176]	@ (80040e8 <prvAddNewTaskToReadyList+0xc8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d109      	bne.n	8004052 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800403e:	4a2a      	ldr	r2, [pc, #168]	@ (80040e8 <prvAddNewTaskToReadyList+0xc8>)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004044:	4b27      	ldr	r3, [pc, #156]	@ (80040e4 <prvAddNewTaskToReadyList+0xc4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d110      	bne.n	800406e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800404c:	f000 fc34 	bl	80048b8 <prvInitialiseTaskLists>
 8004050:	e00d      	b.n	800406e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004052:	4b26      	ldr	r3, [pc, #152]	@ (80040ec <prvAddNewTaskToReadyList+0xcc>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d109      	bne.n	800406e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800405a:	4b23      	ldr	r3, [pc, #140]	@ (80040e8 <prvAddNewTaskToReadyList+0xc8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004064:	429a      	cmp	r2, r3
 8004066:	d802      	bhi.n	800406e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004068:	4a1f      	ldr	r2, [pc, #124]	@ (80040e8 <prvAddNewTaskToReadyList+0xc8>)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800406e:	4b20      	ldr	r3, [pc, #128]	@ (80040f0 <prvAddNewTaskToReadyList+0xd0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3301      	adds	r3, #1
 8004074:	4a1e      	ldr	r2, [pc, #120]	@ (80040f0 <prvAddNewTaskToReadyList+0xd0>)
 8004076:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004078:	4b1d      	ldr	r3, [pc, #116]	@ (80040f0 <prvAddNewTaskToReadyList+0xd0>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004084:	4b1b      	ldr	r3, [pc, #108]	@ (80040f4 <prvAddNewTaskToReadyList+0xd4>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	429a      	cmp	r2, r3
 800408a:	d903      	bls.n	8004094 <prvAddNewTaskToReadyList+0x74>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004090:	4a18      	ldr	r2, [pc, #96]	@ (80040f4 <prvAddNewTaskToReadyList+0xd4>)
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4a15      	ldr	r2, [pc, #84]	@ (80040f8 <prvAddNewTaskToReadyList+0xd8>)
 80040a2:	441a      	add	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3304      	adds	r3, #4
 80040a8:	4619      	mov	r1, r3
 80040aa:	4610      	mov	r0, r2
 80040ac:	f7ff f8f5 	bl	800329a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80040b0:	f001 fa34 	bl	800551c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80040b4:	4b0d      	ldr	r3, [pc, #52]	@ (80040ec <prvAddNewTaskToReadyList+0xcc>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00e      	beq.n	80040da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040bc:	4b0a      	ldr	r3, [pc, #40]	@ (80040e8 <prvAddNewTaskToReadyList+0xc8>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d207      	bcs.n	80040da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80040ca:	4b0c      	ldr	r3, [pc, #48]	@ (80040fc <prvAddNewTaskToReadyList+0xdc>)
 80040cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040da:	bf00      	nop
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20000dcc 	.word	0x20000dcc
 80040e8:	200008f8 	.word	0x200008f8
 80040ec:	20000dd8 	.word	0x20000dd8
 80040f0:	20000de8 	.word	0x20000de8
 80040f4:	20000dd4 	.word	0x20000dd4
 80040f8:	200008fc 	.word	0x200008fc
 80040fc:	e000ed04 	.word	0xe000ed04

08004100 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004108:	2300      	movs	r3, #0
 800410a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d018      	beq.n	8004144 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004112:	4b14      	ldr	r3, [pc, #80]	@ (8004164 <vTaskDelay+0x64>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00b      	beq.n	8004132 <vTaskDelay+0x32>
	__asm volatile
 800411a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800411e:	f383 8811 	msr	BASEPRI, r3
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	60bb      	str	r3, [r7, #8]
}
 800412c:	bf00      	nop
 800412e:	bf00      	nop
 8004130:	e7fd      	b.n	800412e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004132:	f000 f88b 	bl	800424c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004136:	2100      	movs	r1, #0
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 fd15 	bl	8004b68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800413e:	f000 f893 	bl	8004268 <xTaskResumeAll>
 8004142:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d107      	bne.n	800415a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800414a:	4b07      	ldr	r3, [pc, #28]	@ (8004168 <vTaskDelay+0x68>)
 800414c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800415a:	bf00      	nop
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	20000df4 	.word	0x20000df4
 8004168:	e000ed04 	.word	0xe000ed04

0800416c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b08a      	sub	sp, #40	@ 0x28
 8004170:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004172:	2300      	movs	r3, #0
 8004174:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004176:	2300      	movs	r3, #0
 8004178:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800417a:	463a      	mov	r2, r7
 800417c:	1d39      	adds	r1, r7, #4
 800417e:	f107 0308 	add.w	r3, r7, #8
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff f828 	bl	80031d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004188:	6839      	ldr	r1, [r7, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	9202      	str	r2, [sp, #8]
 8004190:	9301      	str	r3, [sp, #4]
 8004192:	2300      	movs	r3, #0
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	2300      	movs	r3, #0
 8004198:	460a      	mov	r2, r1
 800419a:	4924      	ldr	r1, [pc, #144]	@ (800422c <vTaskStartScheduler+0xc0>)
 800419c:	4824      	ldr	r0, [pc, #144]	@ (8004230 <vTaskStartScheduler+0xc4>)
 800419e:	f7ff fdfb 	bl	8003d98 <xTaskCreateStatic>
 80041a2:	4603      	mov	r3, r0
 80041a4:	4a23      	ldr	r2, [pc, #140]	@ (8004234 <vTaskStartScheduler+0xc8>)
 80041a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80041a8:	4b22      	ldr	r3, [pc, #136]	@ (8004234 <vTaskStartScheduler+0xc8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d002      	beq.n	80041b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80041b0:	2301      	movs	r3, #1
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	e001      	b.n	80041ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d102      	bne.n	80041c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80041c0:	f000 fd26 	bl	8004c10 <xTimerCreateTimerTask>
 80041c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d11b      	bne.n	8004204 <vTaskStartScheduler+0x98>
	__asm volatile
 80041cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d0:	f383 8811 	msr	BASEPRI, r3
 80041d4:	f3bf 8f6f 	isb	sy
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	613b      	str	r3, [r7, #16]
}
 80041de:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80041e0:	4b15      	ldr	r3, [pc, #84]	@ (8004238 <vTaskStartScheduler+0xcc>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3354      	adds	r3, #84	@ 0x54
 80041e6:	4a15      	ldr	r2, [pc, #84]	@ (800423c <vTaskStartScheduler+0xd0>)
 80041e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80041ea:	4b15      	ldr	r3, [pc, #84]	@ (8004240 <vTaskStartScheduler+0xd4>)
 80041ec:	f04f 32ff 	mov.w	r2, #4294967295
 80041f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80041f2:	4b14      	ldr	r3, [pc, #80]	@ (8004244 <vTaskStartScheduler+0xd8>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80041f8:	4b13      	ldr	r3, [pc, #76]	@ (8004248 <vTaskStartScheduler+0xdc>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80041fe:	f001 f8b7 	bl	8005370 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004202:	e00f      	b.n	8004224 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420a:	d10b      	bne.n	8004224 <vTaskStartScheduler+0xb8>
	__asm volatile
 800420c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	60fb      	str	r3, [r7, #12]
}
 800421e:	bf00      	nop
 8004220:	bf00      	nop
 8004222:	e7fd      	b.n	8004220 <vTaskStartScheduler+0xb4>
}
 8004224:	bf00      	nop
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	08005ce0 	.word	0x08005ce0
 8004230:	08004889 	.word	0x08004889
 8004234:	20000df0 	.word	0x20000df0
 8004238:	200008f8 	.word	0x200008f8
 800423c:	20000010 	.word	0x20000010
 8004240:	20000dec 	.word	0x20000dec
 8004244:	20000dd8 	.word	0x20000dd8
 8004248:	20000dd0 	.word	0x20000dd0

0800424c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004250:	4b04      	ldr	r3, [pc, #16]	@ (8004264 <vTaskSuspendAll+0x18>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	3301      	adds	r3, #1
 8004256:	4a03      	ldr	r2, [pc, #12]	@ (8004264 <vTaskSuspendAll+0x18>)
 8004258:	6013      	str	r3, [r2, #0]
}
 800425a:	bf00      	nop
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	20000df4 	.word	0x20000df4

08004268 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800426e:	2300      	movs	r3, #0
 8004270:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004272:	2300      	movs	r3, #0
 8004274:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004276:	4b42      	ldr	r3, [pc, #264]	@ (8004380 <xTaskResumeAll+0x118>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10b      	bne.n	8004296 <xTaskResumeAll+0x2e>
	__asm volatile
 800427e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004282:	f383 8811 	msr	BASEPRI, r3
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	603b      	str	r3, [r7, #0]
}
 8004290:	bf00      	nop
 8004292:	bf00      	nop
 8004294:	e7fd      	b.n	8004292 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004296:	f001 f90f 	bl	80054b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800429a:	4b39      	ldr	r3, [pc, #228]	@ (8004380 <xTaskResumeAll+0x118>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	3b01      	subs	r3, #1
 80042a0:	4a37      	ldr	r2, [pc, #220]	@ (8004380 <xTaskResumeAll+0x118>)
 80042a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042a4:	4b36      	ldr	r3, [pc, #216]	@ (8004380 <xTaskResumeAll+0x118>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d162      	bne.n	8004372 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80042ac:	4b35      	ldr	r3, [pc, #212]	@ (8004384 <xTaskResumeAll+0x11c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d05e      	beq.n	8004372 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042b4:	e02f      	b.n	8004316 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80042b6:	4b34      	ldr	r3, [pc, #208]	@ (8004388 <xTaskResumeAll+0x120>)
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	3318      	adds	r3, #24
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff f846 	bl	8003354 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	3304      	adds	r3, #4
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff f841 	bl	8003354 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042d6:	4b2d      	ldr	r3, [pc, #180]	@ (800438c <xTaskResumeAll+0x124>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d903      	bls.n	80042e6 <xTaskResumeAll+0x7e>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e2:	4a2a      	ldr	r2, [pc, #168]	@ (800438c <xTaskResumeAll+0x124>)
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042ea:	4613      	mov	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4a27      	ldr	r2, [pc, #156]	@ (8004390 <xTaskResumeAll+0x128>)
 80042f4:	441a      	add	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	3304      	adds	r3, #4
 80042fa:	4619      	mov	r1, r3
 80042fc:	4610      	mov	r0, r2
 80042fe:	f7fe ffcc 	bl	800329a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004306:	4b23      	ldr	r3, [pc, #140]	@ (8004394 <xTaskResumeAll+0x12c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430c:	429a      	cmp	r2, r3
 800430e:	d302      	bcc.n	8004316 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004310:	4b21      	ldr	r3, [pc, #132]	@ (8004398 <xTaskResumeAll+0x130>)
 8004312:	2201      	movs	r2, #1
 8004314:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004316:	4b1c      	ldr	r3, [pc, #112]	@ (8004388 <xTaskResumeAll+0x120>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1cb      	bne.n	80042b6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004324:	f000 fb6c 	bl	8004a00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004328:	4b1c      	ldr	r3, [pc, #112]	@ (800439c <xTaskResumeAll+0x134>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d010      	beq.n	8004356 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004334:	f000 f846 	bl	80043c4 <xTaskIncrementTick>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800433e:	4b16      	ldr	r3, [pc, #88]	@ (8004398 <xTaskResumeAll+0x130>)
 8004340:	2201      	movs	r2, #1
 8004342:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3b01      	subs	r3, #1
 8004348:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1f1      	bne.n	8004334 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8004350:	4b12      	ldr	r3, [pc, #72]	@ (800439c <xTaskResumeAll+0x134>)
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004356:	4b10      	ldr	r3, [pc, #64]	@ (8004398 <xTaskResumeAll+0x130>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d009      	beq.n	8004372 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800435e:	2301      	movs	r3, #1
 8004360:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004362:	4b0f      	ldr	r3, [pc, #60]	@ (80043a0 <xTaskResumeAll+0x138>)
 8004364:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	f3bf 8f4f 	dsb	sy
 800436e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004372:	f001 f8d3 	bl	800551c <vPortExitCritical>

	return xAlreadyYielded;
 8004376:	68bb      	ldr	r3, [r7, #8]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	20000df4 	.word	0x20000df4
 8004384:	20000dcc 	.word	0x20000dcc
 8004388:	20000d8c 	.word	0x20000d8c
 800438c:	20000dd4 	.word	0x20000dd4
 8004390:	200008fc 	.word	0x200008fc
 8004394:	200008f8 	.word	0x200008f8
 8004398:	20000de0 	.word	0x20000de0
 800439c:	20000ddc 	.word	0x20000ddc
 80043a0:	e000ed04 	.word	0xe000ed04

080043a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80043aa:	4b05      	ldr	r3, [pc, #20]	@ (80043c0 <xTaskGetTickCount+0x1c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80043b0:	687b      	ldr	r3, [r7, #4]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	20000dd0 	.word	0x20000dd0

080043c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80043ca:	2300      	movs	r3, #0
 80043cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043ce:	4b52      	ldr	r3, [pc, #328]	@ (8004518 <xTaskIncrementTick+0x154>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f040 808f 	bne.w	80044f6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80043d8:	4b50      	ldr	r3, [pc, #320]	@ (800451c <xTaskIncrementTick+0x158>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3301      	adds	r3, #1
 80043de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80043e0:	4a4e      	ldr	r2, [pc, #312]	@ (800451c <xTaskIncrementTick+0x158>)
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d121      	bne.n	8004430 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80043ec:	4b4c      	ldr	r3, [pc, #304]	@ (8004520 <xTaskIncrementTick+0x15c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00b      	beq.n	800440e <xTaskIncrementTick+0x4a>
	__asm volatile
 80043f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	603b      	str	r3, [r7, #0]
}
 8004408:	bf00      	nop
 800440a:	bf00      	nop
 800440c:	e7fd      	b.n	800440a <xTaskIncrementTick+0x46>
 800440e:	4b44      	ldr	r3, [pc, #272]	@ (8004520 <xTaskIncrementTick+0x15c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	4b43      	ldr	r3, [pc, #268]	@ (8004524 <xTaskIncrementTick+0x160>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a41      	ldr	r2, [pc, #260]	@ (8004520 <xTaskIncrementTick+0x15c>)
 800441a:	6013      	str	r3, [r2, #0]
 800441c:	4a41      	ldr	r2, [pc, #260]	@ (8004524 <xTaskIncrementTick+0x160>)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	4b41      	ldr	r3, [pc, #260]	@ (8004528 <xTaskIncrementTick+0x164>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3301      	adds	r3, #1
 8004428:	4a3f      	ldr	r2, [pc, #252]	@ (8004528 <xTaskIncrementTick+0x164>)
 800442a:	6013      	str	r3, [r2, #0]
 800442c:	f000 fae8 	bl	8004a00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004430:	4b3e      	ldr	r3, [pc, #248]	@ (800452c <xTaskIncrementTick+0x168>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	429a      	cmp	r2, r3
 8004438:	d34e      	bcc.n	80044d8 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800443a:	4b39      	ldr	r3, [pc, #228]	@ (8004520 <xTaskIncrementTick+0x15c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <xTaskIncrementTick+0x84>
 8004444:	2301      	movs	r3, #1
 8004446:	e000      	b.n	800444a <xTaskIncrementTick+0x86>
 8004448:	2300      	movs	r3, #0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d004      	beq.n	8004458 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800444e:	4b37      	ldr	r3, [pc, #220]	@ (800452c <xTaskIncrementTick+0x168>)
 8004450:	f04f 32ff 	mov.w	r2, #4294967295
 8004454:	601a      	str	r2, [r3, #0]
					break;
 8004456:	e03f      	b.n	80044d8 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004458:	4b31      	ldr	r3, [pc, #196]	@ (8004520 <xTaskIncrementTick+0x15c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	429a      	cmp	r2, r3
 800446e:	d203      	bcs.n	8004478 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004470:	4a2e      	ldr	r2, [pc, #184]	@ (800452c <xTaskIncrementTick+0x168>)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6013      	str	r3, [r2, #0]
						break;
 8004476:	e02f      	b.n	80044d8 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	3304      	adds	r3, #4
 800447c:	4618      	mov	r0, r3
 800447e:	f7fe ff69 	bl	8003354 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004486:	2b00      	cmp	r3, #0
 8004488:	d004      	beq.n	8004494 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	3318      	adds	r3, #24
 800448e:	4618      	mov	r0, r3
 8004490:	f7fe ff60 	bl	8003354 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004498:	4b25      	ldr	r3, [pc, #148]	@ (8004530 <xTaskIncrementTick+0x16c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	429a      	cmp	r2, r3
 800449e:	d903      	bls.n	80044a8 <xTaskIncrementTick+0xe4>
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a4:	4a22      	ldr	r2, [pc, #136]	@ (8004530 <xTaskIncrementTick+0x16c>)
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ac:	4613      	mov	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4a1f      	ldr	r2, [pc, #124]	@ (8004534 <xTaskIncrementTick+0x170>)
 80044b6:	441a      	add	r2, r3
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	3304      	adds	r3, #4
 80044bc:	4619      	mov	r1, r3
 80044be:	4610      	mov	r0, r2
 80044c0:	f7fe feeb 	bl	800329a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004538 <xTaskIncrementTick+0x174>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d3b3      	bcc.n	800443a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80044d2:	2301      	movs	r3, #1
 80044d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044d6:	e7b0      	b.n	800443a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80044d8:	4b17      	ldr	r3, [pc, #92]	@ (8004538 <xTaskIncrementTick+0x174>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044de:	4915      	ldr	r1, [pc, #84]	@ (8004534 <xTaskIncrementTick+0x170>)
 80044e0:	4613      	mov	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d907      	bls.n	8004500 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80044f0:	2301      	movs	r3, #1
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	e004      	b.n	8004500 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80044f6:	4b11      	ldr	r3, [pc, #68]	@ (800453c <xTaskIncrementTick+0x178>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3301      	adds	r3, #1
 80044fc:	4a0f      	ldr	r2, [pc, #60]	@ (800453c <xTaskIncrementTick+0x178>)
 80044fe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004500:	4b0f      	ldr	r3, [pc, #60]	@ (8004540 <xTaskIncrementTick+0x17c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8004508:	2301      	movs	r3, #1
 800450a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800450c:	697b      	ldr	r3, [r7, #20]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	20000df4 	.word	0x20000df4
 800451c:	20000dd0 	.word	0x20000dd0
 8004520:	20000d84 	.word	0x20000d84
 8004524:	20000d88 	.word	0x20000d88
 8004528:	20000de4 	.word	0x20000de4
 800452c:	20000dec 	.word	0x20000dec
 8004530:	20000dd4 	.word	0x20000dd4
 8004534:	200008fc 	.word	0x200008fc
 8004538:	200008f8 	.word	0x200008f8
 800453c:	20000ddc 	.word	0x20000ddc
 8004540:	20000de0 	.word	0x20000de0

08004544 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800454a:	4b2b      	ldr	r3, [pc, #172]	@ (80045f8 <vTaskSwitchContext+0xb4>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004552:	4b2a      	ldr	r3, [pc, #168]	@ (80045fc <vTaskSwitchContext+0xb8>)
 8004554:	2201      	movs	r2, #1
 8004556:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004558:	e047      	b.n	80045ea <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800455a:	4b28      	ldr	r3, [pc, #160]	@ (80045fc <vTaskSwitchContext+0xb8>)
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004560:	4b27      	ldr	r3, [pc, #156]	@ (8004600 <vTaskSwitchContext+0xbc>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	60fb      	str	r3, [r7, #12]
 8004566:	e011      	b.n	800458c <vTaskSwitchContext+0x48>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10b      	bne.n	8004586 <vTaskSwitchContext+0x42>
	__asm volatile
 800456e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	607b      	str	r3, [r7, #4]
}
 8004580:	bf00      	nop
 8004582:	bf00      	nop
 8004584:	e7fd      	b.n	8004582 <vTaskSwitchContext+0x3e>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	3b01      	subs	r3, #1
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	491d      	ldr	r1, [pc, #116]	@ (8004604 <vTaskSwitchContext+0xc0>)
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0e3      	beq.n	8004568 <vTaskSwitchContext+0x24>
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	4613      	mov	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4413      	add	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4a16      	ldr	r2, [pc, #88]	@ (8004604 <vTaskSwitchContext+0xc0>)
 80045ac:	4413      	add	r3, r2
 80045ae:	60bb      	str	r3, [r7, #8]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	605a      	str	r2, [r3, #4]
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	3308      	adds	r3, #8
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d104      	bne.n	80045d0 <vTaskSwitchContext+0x8c>
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	605a      	str	r2, [r3, #4]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004608 <vTaskSwitchContext+0xc4>)
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	4a09      	ldr	r2, [pc, #36]	@ (8004600 <vTaskSwitchContext+0xbc>)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80045e0:	4b09      	ldr	r3, [pc, #36]	@ (8004608 <vTaskSwitchContext+0xc4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3354      	adds	r3, #84	@ 0x54
 80045e6:	4a09      	ldr	r2, [pc, #36]	@ (800460c <vTaskSwitchContext+0xc8>)
 80045e8:	6013      	str	r3, [r2, #0]
}
 80045ea:	bf00      	nop
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	20000df4 	.word	0x20000df4
 80045fc:	20000de0 	.word	0x20000de0
 8004600:	20000dd4 	.word	0x20000dd4
 8004604:	200008fc 	.word	0x200008fc
 8004608:	200008f8 	.word	0x200008f8
 800460c:	20000010 	.word	0x20000010

08004610 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10b      	bne.n	8004638 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004624:	f383 8811 	msr	BASEPRI, r3
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	60fb      	str	r3, [r7, #12]
}
 8004632:	bf00      	nop
 8004634:	bf00      	nop
 8004636:	e7fd      	b.n	8004634 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004638:	4b07      	ldr	r3, [pc, #28]	@ (8004658 <vTaskPlaceOnEventList+0x48>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	3318      	adds	r3, #24
 800463e:	4619      	mov	r1, r3
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7fe fe4e 	bl	80032e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004646:	2101      	movs	r1, #1
 8004648:	6838      	ldr	r0, [r7, #0]
 800464a:	f000 fa8d 	bl	8004b68 <prvAddCurrentTaskToDelayedList>
}
 800464e:	bf00      	nop
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	200008f8 	.word	0x200008f8

0800465c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10b      	bne.n	8004686 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800466e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004672:	f383 8811 	msr	BASEPRI, r3
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	617b      	str	r3, [r7, #20]
}
 8004680:	bf00      	nop
 8004682:	bf00      	nop
 8004684:	e7fd      	b.n	8004682 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004686:	4b0a      	ldr	r3, [pc, #40]	@ (80046b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3318      	adds	r3, #24
 800468c:	4619      	mov	r1, r3
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f7fe fe03 	bl	800329a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800469a:	f04f 33ff 	mov.w	r3, #4294967295
 800469e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80046a0:	6879      	ldr	r1, [r7, #4]
 80046a2:	68b8      	ldr	r0, [r7, #8]
 80046a4:	f000 fa60 	bl	8004b68 <prvAddCurrentTaskToDelayedList>
	}
 80046a8:	bf00      	nop
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	200008f8 	.word	0x200008f8

080046b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10b      	bne.n	80046e2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80046ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	60fb      	str	r3, [r7, #12]
}
 80046dc:	bf00      	nop
 80046de:	bf00      	nop
 80046e0:	e7fd      	b.n	80046de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	3318      	adds	r3, #24
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fe fe34 	bl	8003354 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004764 <xTaskRemoveFromEventList+0xb0>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d11d      	bne.n	8004730 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	3304      	adds	r3, #4
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fe fe2b 	bl	8003354 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004702:	4b19      	ldr	r3, [pc, #100]	@ (8004768 <xTaskRemoveFromEventList+0xb4>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	429a      	cmp	r2, r3
 8004708:	d903      	bls.n	8004712 <xTaskRemoveFromEventList+0x5e>
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470e:	4a16      	ldr	r2, [pc, #88]	@ (8004768 <xTaskRemoveFromEventList+0xb4>)
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004716:	4613      	mov	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4a13      	ldr	r2, [pc, #76]	@ (800476c <xTaskRemoveFromEventList+0xb8>)
 8004720:	441a      	add	r2, r3
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	3304      	adds	r3, #4
 8004726:	4619      	mov	r1, r3
 8004728:	4610      	mov	r0, r2
 800472a:	f7fe fdb6 	bl	800329a <vListInsertEnd>
 800472e:	e005      	b.n	800473c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	3318      	adds	r3, #24
 8004734:	4619      	mov	r1, r3
 8004736:	480e      	ldr	r0, [pc, #56]	@ (8004770 <xTaskRemoveFromEventList+0xbc>)
 8004738:	f7fe fdaf 	bl	800329a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004740:	4b0c      	ldr	r3, [pc, #48]	@ (8004774 <xTaskRemoveFromEventList+0xc0>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004746:	429a      	cmp	r2, r3
 8004748:	d905      	bls.n	8004756 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800474a:	2301      	movs	r3, #1
 800474c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800474e:	4b0a      	ldr	r3, [pc, #40]	@ (8004778 <xTaskRemoveFromEventList+0xc4>)
 8004750:	2201      	movs	r2, #1
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	e001      	b.n	800475a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004756:	2300      	movs	r3, #0
 8004758:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800475a:	697b      	ldr	r3, [r7, #20]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	20000df4 	.word	0x20000df4
 8004768:	20000dd4 	.word	0x20000dd4
 800476c:	200008fc 	.word	0x200008fc
 8004770:	20000d8c 	.word	0x20000d8c
 8004774:	200008f8 	.word	0x200008f8
 8004778:	20000de0 	.word	0x20000de0

0800477c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004784:	4b06      	ldr	r3, [pc, #24]	@ (80047a0 <vTaskInternalSetTimeOutState+0x24>)
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800478c:	4b05      	ldr	r3, [pc, #20]	@ (80047a4 <vTaskInternalSetTimeOutState+0x28>)
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	605a      	str	r2, [r3, #4]
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	20000de4 	.word	0x20000de4
 80047a4:	20000dd0 	.word	0x20000dd0

080047a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10b      	bne.n	80047d0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80047b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	613b      	str	r3, [r7, #16]
}
 80047ca:	bf00      	nop
 80047cc:	bf00      	nop
 80047ce:	e7fd      	b.n	80047cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10b      	bne.n	80047ee <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80047d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047da:	f383 8811 	msr	BASEPRI, r3
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f3bf 8f4f 	dsb	sy
 80047e6:	60fb      	str	r3, [r7, #12]
}
 80047e8:	bf00      	nop
 80047ea:	bf00      	nop
 80047ec:	e7fd      	b.n	80047ea <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80047ee:	f000 fe63 	bl	80054b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80047f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004868 <xTaskCheckForTimeOut+0xc0>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480a:	d102      	bne.n	8004812 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800480c:	2300      	movs	r3, #0
 800480e:	61fb      	str	r3, [r7, #28]
 8004810:	e023      	b.n	800485a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	4b15      	ldr	r3, [pc, #84]	@ (800486c <xTaskCheckForTimeOut+0xc4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d007      	beq.n	800482e <xTaskCheckForTimeOut+0x86>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	429a      	cmp	r2, r3
 8004826:	d302      	bcc.n	800482e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004828:	2301      	movs	r3, #1
 800482a:	61fb      	str	r3, [r7, #28]
 800482c:	e015      	b.n	800485a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	429a      	cmp	r2, r3
 8004836:	d20b      	bcs.n	8004850 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	1ad2      	subs	r2, r2, r3
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff ff99 	bl	800477c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800484a:	2300      	movs	r3, #0
 800484c:	61fb      	str	r3, [r7, #28]
 800484e:	e004      	b.n	800485a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004856:	2301      	movs	r3, #1
 8004858:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800485a:	f000 fe5f 	bl	800551c <vPortExitCritical>

	return xReturn;
 800485e:	69fb      	ldr	r3, [r7, #28]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3720      	adds	r7, #32
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	20000dd0 	.word	0x20000dd0
 800486c:	20000de4 	.word	0x20000de4

08004870 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004874:	4b03      	ldr	r3, [pc, #12]	@ (8004884 <vTaskMissedYield+0x14>)
 8004876:	2201      	movs	r2, #1
 8004878:	601a      	str	r2, [r3, #0]
}
 800487a:	bf00      	nop
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	20000de0 	.word	0x20000de0

08004888 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004890:	f000 f852 	bl	8004938 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004894:	4b06      	ldr	r3, [pc, #24]	@ (80048b0 <prvIdleTask+0x28>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d9f9      	bls.n	8004890 <prvIdleTask+0x8>
			{
				taskYIELD();
 800489c:	4b05      	ldr	r3, [pc, #20]	@ (80048b4 <prvIdleTask+0x2c>)
 800489e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80048ac:	e7f0      	b.n	8004890 <prvIdleTask+0x8>
 80048ae:	bf00      	nop
 80048b0:	200008fc 	.word	0x200008fc
 80048b4:	e000ed04 	.word	0xe000ed04

080048b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048be:	2300      	movs	r3, #0
 80048c0:	607b      	str	r3, [r7, #4]
 80048c2:	e00c      	b.n	80048de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	4613      	mov	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4a12      	ldr	r2, [pc, #72]	@ (8004918 <prvInitialiseTaskLists+0x60>)
 80048d0:	4413      	add	r3, r2
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fe fcb4 	bl	8003240 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3301      	adds	r3, #1
 80048dc:	607b      	str	r3, [r7, #4]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b37      	cmp	r3, #55	@ 0x37
 80048e2:	d9ef      	bls.n	80048c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80048e4:	480d      	ldr	r0, [pc, #52]	@ (800491c <prvInitialiseTaskLists+0x64>)
 80048e6:	f7fe fcab 	bl	8003240 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80048ea:	480d      	ldr	r0, [pc, #52]	@ (8004920 <prvInitialiseTaskLists+0x68>)
 80048ec:	f7fe fca8 	bl	8003240 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80048f0:	480c      	ldr	r0, [pc, #48]	@ (8004924 <prvInitialiseTaskLists+0x6c>)
 80048f2:	f7fe fca5 	bl	8003240 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80048f6:	480c      	ldr	r0, [pc, #48]	@ (8004928 <prvInitialiseTaskLists+0x70>)
 80048f8:	f7fe fca2 	bl	8003240 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80048fc:	480b      	ldr	r0, [pc, #44]	@ (800492c <prvInitialiseTaskLists+0x74>)
 80048fe:	f7fe fc9f 	bl	8003240 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004902:	4b0b      	ldr	r3, [pc, #44]	@ (8004930 <prvInitialiseTaskLists+0x78>)
 8004904:	4a05      	ldr	r2, [pc, #20]	@ (800491c <prvInitialiseTaskLists+0x64>)
 8004906:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004908:	4b0a      	ldr	r3, [pc, #40]	@ (8004934 <prvInitialiseTaskLists+0x7c>)
 800490a:	4a05      	ldr	r2, [pc, #20]	@ (8004920 <prvInitialiseTaskLists+0x68>)
 800490c:	601a      	str	r2, [r3, #0]
}
 800490e:	bf00      	nop
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	200008fc 	.word	0x200008fc
 800491c:	20000d5c 	.word	0x20000d5c
 8004920:	20000d70 	.word	0x20000d70
 8004924:	20000d8c 	.word	0x20000d8c
 8004928:	20000da0 	.word	0x20000da0
 800492c:	20000db8 	.word	0x20000db8
 8004930:	20000d84 	.word	0x20000d84
 8004934:	20000d88 	.word	0x20000d88

08004938 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800493e:	e019      	b.n	8004974 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004940:	f000 fdba 	bl	80054b8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004944:	4b10      	ldr	r3, [pc, #64]	@ (8004988 <prvCheckTasksWaitingTermination+0x50>)
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3304      	adds	r3, #4
 8004950:	4618      	mov	r0, r3
 8004952:	f7fe fcff 	bl	8003354 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004956:	4b0d      	ldr	r3, [pc, #52]	@ (800498c <prvCheckTasksWaitingTermination+0x54>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3b01      	subs	r3, #1
 800495c:	4a0b      	ldr	r2, [pc, #44]	@ (800498c <prvCheckTasksWaitingTermination+0x54>)
 800495e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004960:	4b0b      	ldr	r3, [pc, #44]	@ (8004990 <prvCheckTasksWaitingTermination+0x58>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3b01      	subs	r3, #1
 8004966:	4a0a      	ldr	r2, [pc, #40]	@ (8004990 <prvCheckTasksWaitingTermination+0x58>)
 8004968:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800496a:	f000 fdd7 	bl	800551c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f810 	bl	8004994 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004974:	4b06      	ldr	r3, [pc, #24]	@ (8004990 <prvCheckTasksWaitingTermination+0x58>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1e1      	bne.n	8004940 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800497c:	bf00      	nop
 800497e:	bf00      	nop
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20000da0 	.word	0x20000da0
 800498c:	20000dcc 	.word	0x20000dcc
 8004990:	20000db4 	.word	0x20000db4

08004994 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3354      	adds	r3, #84	@ 0x54
 80049a0:	4618      	mov	r0, r3
 80049a2:	f001 f893 	bl	8005acc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d108      	bne.n	80049c2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 ff69 	bl	800588c <vPortFree>
				vPortFree( pxTCB );
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 ff66 	bl	800588c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049c0:	e019      	b.n	80049f6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d103      	bne.n	80049d4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 ff5d 	bl	800588c <vPortFree>
	}
 80049d2:	e010      	b.n	80049f6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d00b      	beq.n	80049f6 <prvDeleteTCB+0x62>
	__asm volatile
 80049de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e2:	f383 8811 	msr	BASEPRI, r3
 80049e6:	f3bf 8f6f 	isb	sy
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	60fb      	str	r3, [r7, #12]
}
 80049f0:	bf00      	nop
 80049f2:	bf00      	nop
 80049f4:	e7fd      	b.n	80049f2 <prvDeleteTCB+0x5e>
	}
 80049f6:	bf00      	nop
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a06:	4b0f      	ldr	r3, [pc, #60]	@ (8004a44 <prvResetNextTaskUnblockTime+0x44>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <prvResetNextTaskUnblockTime+0x14>
 8004a10:	2301      	movs	r3, #1
 8004a12:	e000      	b.n	8004a16 <prvResetNextTaskUnblockTime+0x16>
 8004a14:	2300      	movs	r3, #0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d004      	beq.n	8004a24 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a48 <prvResetNextTaskUnblockTime+0x48>)
 8004a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a20:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a22:	e008      	b.n	8004a36 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a24:	4b07      	ldr	r3, [pc, #28]	@ (8004a44 <prvResetNextTaskUnblockTime+0x44>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	4a05      	ldr	r2, [pc, #20]	@ (8004a48 <prvResetNextTaskUnblockTime+0x48>)
 8004a34:	6013      	str	r3, [r2, #0]
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	20000d84 	.word	0x20000d84
 8004a48:	20000dec 	.word	0x20000dec

08004a4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004a52:	4b0b      	ldr	r3, [pc, #44]	@ (8004a80 <xTaskGetSchedulerState+0x34>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d102      	bne.n	8004a60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	607b      	str	r3, [r7, #4]
 8004a5e:	e008      	b.n	8004a72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a60:	4b08      	ldr	r3, [pc, #32]	@ (8004a84 <xTaskGetSchedulerState+0x38>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d102      	bne.n	8004a6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004a68:	2302      	movs	r3, #2
 8004a6a:	607b      	str	r3, [r7, #4]
 8004a6c:	e001      	b.n	8004a72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004a72:	687b      	ldr	r3, [r7, #4]
	}
 8004a74:	4618      	mov	r0, r3
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	20000dd8 	.word	0x20000dd8
 8004a84:	20000df4 	.word	0x20000df4

08004a88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004a94:	2300      	movs	r3, #0
 8004a96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d058      	beq.n	8004b50 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004a9e:	4b2f      	ldr	r3, [pc, #188]	@ (8004b5c <xTaskPriorityDisinherit+0xd4>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d00b      	beq.n	8004ac0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	60fb      	str	r3, [r7, #12]
}
 8004aba:	bf00      	nop
 8004abc:	bf00      	nop
 8004abe:	e7fd      	b.n	8004abc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10b      	bne.n	8004ae0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004acc:	f383 8811 	msr	BASEPRI, r3
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	60bb      	str	r3, [r7, #8]
}
 8004ada:	bf00      	nop
 8004adc:	bf00      	nop
 8004ade:	e7fd      	b.n	8004adc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ae4:	1e5a      	subs	r2, r3, #1
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d02c      	beq.n	8004b50 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d128      	bne.n	8004b50 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	3304      	adds	r3, #4
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fe fc26 	bl	8003354 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b14:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b20:	4b0f      	ldr	r3, [pc, #60]	@ (8004b60 <xTaskPriorityDisinherit+0xd8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d903      	bls.n	8004b30 <xTaskPriorityDisinherit+0xa8>
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2c:	4a0c      	ldr	r2, [pc, #48]	@ (8004b60 <xTaskPriorityDisinherit+0xd8>)
 8004b2e:	6013      	str	r3, [r2, #0]
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b34:	4613      	mov	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4a09      	ldr	r2, [pc, #36]	@ (8004b64 <xTaskPriorityDisinherit+0xdc>)
 8004b3e:	441a      	add	r2, r3
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	3304      	adds	r3, #4
 8004b44:	4619      	mov	r1, r3
 8004b46:	4610      	mov	r0, r2
 8004b48:	f7fe fba7 	bl	800329a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b50:	697b      	ldr	r3, [r7, #20]
	}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	200008f8 	.word	0x200008f8
 8004b60:	20000dd4 	.word	0x20000dd4
 8004b64:	200008fc 	.word	0x200008fc

08004b68 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b72:	4b21      	ldr	r3, [pc, #132]	@ (8004bf8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b78:	4b20      	ldr	r3, [pc, #128]	@ (8004bfc <prvAddCurrentTaskToDelayedList+0x94>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fe fbe8 	bl	8003354 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8a:	d10a      	bne.n	8004ba2 <prvAddCurrentTaskToDelayedList+0x3a>
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d007      	beq.n	8004ba2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b92:	4b1a      	ldr	r3, [pc, #104]	@ (8004bfc <prvAddCurrentTaskToDelayedList+0x94>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	3304      	adds	r3, #4
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4819      	ldr	r0, [pc, #100]	@ (8004c00 <prvAddCurrentTaskToDelayedList+0x98>)
 8004b9c:	f7fe fb7d 	bl	800329a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ba0:	e026      	b.n	8004bf0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004baa:	4b14      	ldr	r3, [pc, #80]	@ (8004bfc <prvAddCurrentTaskToDelayedList+0x94>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d209      	bcs.n	8004bce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bba:	4b12      	ldr	r3, [pc, #72]	@ (8004c04 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8004bfc <prvAddCurrentTaskToDelayedList+0x94>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4610      	mov	r0, r2
 8004bc8:	f7fe fb8b 	bl	80032e2 <vListInsert>
}
 8004bcc:	e010      	b.n	8004bf0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bce:	4b0e      	ldr	r3, [pc, #56]	@ (8004c08 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8004bfc <prvAddCurrentTaskToDelayedList+0x94>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4610      	mov	r0, r2
 8004bdc:	f7fe fb81 	bl	80032e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004be0:	4b0a      	ldr	r3, [pc, #40]	@ (8004c0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d202      	bcs.n	8004bf0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004bea:	4a08      	ldr	r2, [pc, #32]	@ (8004c0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	6013      	str	r3, [r2, #0]
}
 8004bf0:	bf00      	nop
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	20000dd0 	.word	0x20000dd0
 8004bfc:	200008f8 	.word	0x200008f8
 8004c00:	20000db8 	.word	0x20000db8
 8004c04:	20000d88 	.word	0x20000d88
 8004c08:	20000d84 	.word	0x20000d84
 8004c0c:	20000dec 	.word	0x20000dec

08004c10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08a      	sub	sp, #40	@ 0x28
 8004c14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004c16:	2300      	movs	r3, #0
 8004c18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004c1a:	f000 fad9 	bl	80051d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8004c94 <xTimerCreateTimerTask+0x84>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d021      	beq.n	8004c6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004c26:	2300      	movs	r3, #0
 8004c28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004c2e:	1d3a      	adds	r2, r7, #4
 8004c30:	f107 0108 	add.w	r1, r7, #8
 8004c34:	f107 030c 	add.w	r3, r7, #12
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7fe fae7 	bl	800320c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	9202      	str	r2, [sp, #8]
 8004c46:	9301      	str	r3, [sp, #4]
 8004c48:	2302      	movs	r3, #2
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	460a      	mov	r2, r1
 8004c50:	4911      	ldr	r1, [pc, #68]	@ (8004c98 <xTimerCreateTimerTask+0x88>)
 8004c52:	4812      	ldr	r0, [pc, #72]	@ (8004c9c <xTimerCreateTimerTask+0x8c>)
 8004c54:	f7ff f8a0 	bl	8003d98 <xTaskCreateStatic>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	4a11      	ldr	r2, [pc, #68]	@ (8004ca0 <xTimerCreateTimerTask+0x90>)
 8004c5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004c5e:	4b10      	ldr	r3, [pc, #64]	@ (8004ca0 <xTimerCreateTimerTask+0x90>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004c66:	2301      	movs	r3, #1
 8004c68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10b      	bne.n	8004c88 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	613b      	str	r3, [r7, #16]
}
 8004c82:	bf00      	nop
 8004c84:	bf00      	nop
 8004c86:	e7fd      	b.n	8004c84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004c88:	697b      	ldr	r3, [r7, #20]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	20000e28 	.word	0x20000e28
 8004c98:	08005ce8 	.word	0x08005ce8
 8004c9c:	08004dc5 	.word	0x08004dc5
 8004ca0:	20000e2c 	.word	0x20000e2c

08004ca4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b08a      	sub	sp, #40	@ 0x28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
 8004cb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10b      	bne.n	8004cd4 <xTimerGenericCommand+0x30>
	__asm volatile
 8004cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc0:	f383 8811 	msr	BASEPRI, r3
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	623b      	str	r3, [r7, #32]
}
 8004cce:	bf00      	nop
 8004cd0:	bf00      	nop
 8004cd2:	e7fd      	b.n	8004cd0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004cd4:	4b19      	ldr	r3, [pc, #100]	@ (8004d3c <xTimerGenericCommand+0x98>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d02a      	beq.n	8004d32 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2b05      	cmp	r3, #5
 8004cec:	dc18      	bgt.n	8004d20 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004cee:	f7ff fead 	bl	8004a4c <xTaskGetSchedulerState>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d109      	bne.n	8004d0c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004cf8:	4b10      	ldr	r3, [pc, #64]	@ (8004d3c <xTimerGenericCommand+0x98>)
 8004cfa:	6818      	ldr	r0, [r3, #0]
 8004cfc:	f107 0110 	add.w	r1, r7, #16
 8004d00:	2300      	movs	r3, #0
 8004d02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d04:	f7fe fc5a 	bl	80035bc <xQueueGenericSend>
 8004d08:	6278      	str	r0, [r7, #36]	@ 0x24
 8004d0a:	e012      	b.n	8004d32 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d3c <xTimerGenericCommand+0x98>)
 8004d0e:	6818      	ldr	r0, [r3, #0]
 8004d10:	f107 0110 	add.w	r1, r7, #16
 8004d14:	2300      	movs	r3, #0
 8004d16:	2200      	movs	r2, #0
 8004d18:	f7fe fc50 	bl	80035bc <xQueueGenericSend>
 8004d1c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004d1e:	e008      	b.n	8004d32 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004d20:	4b06      	ldr	r3, [pc, #24]	@ (8004d3c <xTimerGenericCommand+0x98>)
 8004d22:	6818      	ldr	r0, [r3, #0]
 8004d24:	f107 0110 	add.w	r1, r7, #16
 8004d28:	2300      	movs	r3, #0
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	f7fe fd48 	bl	80037c0 <xQueueGenericSendFromISR>
 8004d30:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3728      	adds	r7, #40	@ 0x28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	20000e28 	.word	0x20000e28

08004d40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b088      	sub	sp, #32
 8004d44:	af02      	add	r7, sp, #8
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8004dc0 <prvProcessExpiredTimer+0x80>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	3304      	adds	r3, #4
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7fe fafb 	bl	8003354 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d123      	bne.n	8004dae <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	699a      	ldr	r2, [r3, #24]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	18d1      	adds	r1, r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	6978      	ldr	r0, [r7, #20]
 8004d74:	f000 f8cc 	bl	8004f10 <prvInsertTimerInActiveList>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d017      	beq.n	8004dae <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d7e:	2300      	movs	r3, #0
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	2300      	movs	r3, #0
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	2100      	movs	r1, #0
 8004d88:	6978      	ldr	r0, [r7, #20]
 8004d8a:	f7ff ff8b 	bl	8004ca4 <xTimerGenericCommand>
 8004d8e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10b      	bne.n	8004dae <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8004d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	60fb      	str	r3, [r7, #12]
}
 8004da8:	bf00      	nop
 8004daa:	bf00      	nop
 8004dac:	e7fd      	b.n	8004daa <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db2:	6978      	ldr	r0, [r7, #20]
 8004db4:	4798      	blx	r3
}
 8004db6:	bf00      	nop
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	20000e20 	.word	0x20000e20

08004dc4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004dcc:	f107 0308 	add.w	r3, r7, #8
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f000 f859 	bl	8004e88 <prvGetNextExpireTime>
 8004dd6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4619      	mov	r1, r3
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 f805 	bl	8004dec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004de2:	f000 f8d7 	bl	8004f94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004de6:	bf00      	nop
 8004de8:	e7f0      	b.n	8004dcc <prvTimerTask+0x8>
	...

08004dec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004df6:	f7ff fa29 	bl	800424c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004dfa:	f107 0308 	add.w	r3, r7, #8
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 f866 	bl	8004ed0 <prvSampleTimeNow>
 8004e04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d130      	bne.n	8004e6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10a      	bne.n	8004e28 <prvProcessTimerOrBlockTask+0x3c>
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d806      	bhi.n	8004e28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004e1a:	f7ff fa25 	bl	8004268 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e1e:	68f9      	ldr	r1, [r7, #12]
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f7ff ff8d 	bl	8004d40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004e26:	e024      	b.n	8004e72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d008      	beq.n	8004e40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e2e:	4b13      	ldr	r3, [pc, #76]	@ (8004e7c <prvProcessTimerOrBlockTask+0x90>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	bf0c      	ite	eq
 8004e38:	2301      	moveq	r3, #1
 8004e3a:	2300      	movne	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e40:	4b0f      	ldr	r3, [pc, #60]	@ (8004e80 <prvProcessTimerOrBlockTask+0x94>)
 8004e42:	6818      	ldr	r0, [r3, #0]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	f7fe ff6f 	bl	8003d30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004e52:	f7ff fa09 	bl	8004268 <xTaskResumeAll>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10a      	bne.n	8004e72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004e5c:	4b09      	ldr	r3, [pc, #36]	@ (8004e84 <prvProcessTimerOrBlockTask+0x98>)
 8004e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	f3bf 8f6f 	isb	sy
}
 8004e6c:	e001      	b.n	8004e72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004e6e:	f7ff f9fb 	bl	8004268 <xTaskResumeAll>
}
 8004e72:	bf00      	nop
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20000e24 	.word	0x20000e24
 8004e80:	20000e28 	.word	0x20000e28
 8004e84:	e000ed04 	.word	0xe000ed04

08004e88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004e90:	4b0e      	ldr	r3, [pc, #56]	@ (8004ecc <prvGetNextExpireTime+0x44>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	bf0c      	ite	eq
 8004e9a:	2301      	moveq	r3, #1
 8004e9c:	2300      	movne	r3, #0
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d105      	bne.n	8004eba <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004eae:	4b07      	ldr	r3, [pc, #28]	@ (8004ecc <prvGetNextExpireTime+0x44>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	e001      	b.n	8004ebe <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	20000e20 	.word	0x20000e20

08004ed0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004ed8:	f7ff fa64 	bl	80043a4 <xTaskGetTickCount>
 8004edc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004ede:	4b0b      	ldr	r3, [pc, #44]	@ (8004f0c <prvSampleTimeNow+0x3c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d205      	bcs.n	8004ef4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ee8:	f000 f910 	bl	800510c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	e002      	b.n	8004efa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004efa:	4a04      	ldr	r2, [pc, #16]	@ (8004f0c <prvSampleTimeNow+0x3c>)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004f00:	68fb      	ldr	r3, [r7, #12]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20000e30 	.word	0x20000e30

08004f10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d812      	bhi.n	8004f5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	1ad2      	subs	r2, r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d302      	bcc.n	8004f4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004f44:	2301      	movs	r3, #1
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	e01b      	b.n	8004f82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f4a:	4b10      	ldr	r3, [pc, #64]	@ (8004f8c <prvInsertTimerInActiveList+0x7c>)
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	3304      	adds	r3, #4
 8004f52:	4619      	mov	r1, r3
 8004f54:	4610      	mov	r0, r2
 8004f56:	f7fe f9c4 	bl	80032e2 <vListInsert>
 8004f5a:	e012      	b.n	8004f82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d206      	bcs.n	8004f72 <prvInsertTimerInActiveList+0x62>
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d302      	bcc.n	8004f72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	e007      	b.n	8004f82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f72:	4b07      	ldr	r3, [pc, #28]	@ (8004f90 <prvInsertTimerInActiveList+0x80>)
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	3304      	adds	r3, #4
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	f7fe f9b0 	bl	80032e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004f82:	697b      	ldr	r3, [r7, #20]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	20000e24 	.word	0x20000e24
 8004f90:	20000e20 	.word	0x20000e20

08004f94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b08e      	sub	sp, #56	@ 0x38
 8004f98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f9a:	e0a5      	b.n	80050e8 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	da19      	bge.n	8004fd6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004fa2:	1d3b      	adds	r3, r7, #4
 8004fa4:	3304      	adds	r3, #4
 8004fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10b      	bne.n	8004fc6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	61fb      	str	r3, [r7, #28]
}
 8004fc0:	bf00      	nop
 8004fc2:	bf00      	nop
 8004fc4:	e7fd      	b.n	8004fc2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fcc:	6850      	ldr	r0, [r2, #4]
 8004fce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fd0:	6892      	ldr	r2, [r2, #8]
 8004fd2:	4611      	mov	r1, r2
 8004fd4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f2c0 8085 	blt.w	80050e8 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d004      	beq.n	8004ff4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fec:	3304      	adds	r3, #4
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fe f9b0 	bl	8003354 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ff4:	463b      	mov	r3, r7
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7ff ff6a 	bl	8004ed0 <prvSampleTimeNow>
 8004ffc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b09      	cmp	r3, #9
 8005002:	d86c      	bhi.n	80050de <prvProcessReceivedCommands+0x14a>
 8005004:	a201      	add	r2, pc, #4	@ (adr r2, 800500c <prvProcessReceivedCommands+0x78>)
 8005006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500a:	bf00      	nop
 800500c:	08005035 	.word	0x08005035
 8005010:	08005035 	.word	0x08005035
 8005014:	08005035 	.word	0x08005035
 8005018:	080050df 	.word	0x080050df
 800501c:	08005093 	.word	0x08005093
 8005020:	080050cd 	.word	0x080050cd
 8005024:	08005035 	.word	0x08005035
 8005028:	08005035 	.word	0x08005035
 800502c:	080050df 	.word	0x080050df
 8005030:	08005093 	.word	0x08005093
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	18d1      	adds	r1, r2, r3
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005040:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005042:	f7ff ff65 	bl	8004f10 <prvInsertTimerInActiveList>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d04a      	beq.n	80050e2 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800504c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005050:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005052:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005056:	69db      	ldr	r3, [r3, #28]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d142      	bne.n	80050e2 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	441a      	add	r2, r3
 8005064:	2300      	movs	r3, #0
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	2300      	movs	r3, #0
 800506a:	2100      	movs	r1, #0
 800506c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800506e:	f7ff fe19 	bl	8004ca4 <xTimerGenericCommand>
 8005072:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d133      	bne.n	80050e2 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 800507a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800507e:	f383 8811 	msr	BASEPRI, r3
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	61bb      	str	r3, [r7, #24]
}
 800508c:	bf00      	nop
 800508e:	bf00      	nop
 8005090:	e7fd      	b.n	800508e <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005096:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10b      	bne.n	80050b8 <prvProcessReceivedCommands+0x124>
	__asm volatile
 80050a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	617b      	str	r3, [r7, #20]
}
 80050b2:	bf00      	nop
 80050b4:	bf00      	nop
 80050b6:	e7fd      	b.n	80050b4 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80050b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ba:	699a      	ldr	r2, [r3, #24]
 80050bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050be:	18d1      	adds	r1, r2, r3
 80050c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050c6:	f7ff ff23 	bl	8004f10 <prvInsertTimerInActiveList>
					break;
 80050ca:	e00d      	b.n	80050e8 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80050cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d107      	bne.n	80050e6 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 80050d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050d8:	f000 fbd8 	bl	800588c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80050dc:	e003      	b.n	80050e6 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 80050de:	bf00      	nop
 80050e0:	e002      	b.n	80050e8 <prvProcessReceivedCommands+0x154>
					break;
 80050e2:	bf00      	nop
 80050e4:	e000      	b.n	80050e8 <prvProcessReceivedCommands+0x154>
					break;
 80050e6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050e8:	4b07      	ldr	r3, [pc, #28]	@ (8005108 <prvProcessReceivedCommands+0x174>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	1d39      	adds	r1, r7, #4
 80050ee:	2200      	movs	r2, #0
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7fe fc01 	bl	80038f8 <xQueueReceive>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f47f af4f 	bne.w	8004f9c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80050fe:	bf00      	nop
 8005100:	bf00      	nop
 8005102:	3730      	adds	r7, #48	@ 0x30
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	20000e28 	.word	0x20000e28

0800510c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b088      	sub	sp, #32
 8005110:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005112:	e046      	b.n	80051a2 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005114:	4b2c      	ldr	r3, [pc, #176]	@ (80051c8 <prvSwitchTimerLists+0xbc>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800511e:	4b2a      	ldr	r3, [pc, #168]	@ (80051c8 <prvSwitchTimerLists+0xbc>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	3304      	adds	r3, #4
 800512c:	4618      	mov	r0, r3
 800512e:	f7fe f911 	bl	8003354 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d12f      	bne.n	80051a2 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	4413      	add	r3, r2
 800514a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	429a      	cmp	r2, r3
 8005152:	d90e      	bls.n	8005172 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005160:	4b19      	ldr	r3, [pc, #100]	@ (80051c8 <prvSwitchTimerLists+0xbc>)
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	3304      	adds	r3, #4
 8005168:	4619      	mov	r1, r3
 800516a:	4610      	mov	r0, r2
 800516c:	f7fe f8b9 	bl	80032e2 <vListInsert>
 8005170:	e017      	b.n	80051a2 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005172:	2300      	movs	r3, #0
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	2300      	movs	r3, #0
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	2100      	movs	r1, #0
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f7ff fd91 	bl	8004ca4 <xTimerGenericCommand>
 8005182:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10b      	bne.n	80051a2 <prvSwitchTimerLists+0x96>
	__asm volatile
 800518a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518e:	f383 8811 	msr	BASEPRI, r3
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	603b      	str	r3, [r7, #0]
}
 800519c:	bf00      	nop
 800519e:	bf00      	nop
 80051a0:	e7fd      	b.n	800519e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051a2:	4b09      	ldr	r3, [pc, #36]	@ (80051c8 <prvSwitchTimerLists+0xbc>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1b3      	bne.n	8005114 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80051ac:	4b06      	ldr	r3, [pc, #24]	@ (80051c8 <prvSwitchTimerLists+0xbc>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80051b2:	4b06      	ldr	r3, [pc, #24]	@ (80051cc <prvSwitchTimerLists+0xc0>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a04      	ldr	r2, [pc, #16]	@ (80051c8 <prvSwitchTimerLists+0xbc>)
 80051b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80051ba:	4a04      	ldr	r2, [pc, #16]	@ (80051cc <prvSwitchTimerLists+0xc0>)
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	6013      	str	r3, [r2, #0]
}
 80051c0:	bf00      	nop
 80051c2:	3718      	adds	r7, #24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	20000e20 	.word	0x20000e20
 80051cc:	20000e24 	.word	0x20000e24

080051d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80051d6:	f000 f96f 	bl	80054b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80051da:	4b15      	ldr	r3, [pc, #84]	@ (8005230 <prvCheckForValidListAndQueue+0x60>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d120      	bne.n	8005224 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80051e2:	4814      	ldr	r0, [pc, #80]	@ (8005234 <prvCheckForValidListAndQueue+0x64>)
 80051e4:	f7fe f82c 	bl	8003240 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80051e8:	4813      	ldr	r0, [pc, #76]	@ (8005238 <prvCheckForValidListAndQueue+0x68>)
 80051ea:	f7fe f829 	bl	8003240 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80051ee:	4b13      	ldr	r3, [pc, #76]	@ (800523c <prvCheckForValidListAndQueue+0x6c>)
 80051f0:	4a10      	ldr	r2, [pc, #64]	@ (8005234 <prvCheckForValidListAndQueue+0x64>)
 80051f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80051f4:	4b12      	ldr	r3, [pc, #72]	@ (8005240 <prvCheckForValidListAndQueue+0x70>)
 80051f6:	4a10      	ldr	r2, [pc, #64]	@ (8005238 <prvCheckForValidListAndQueue+0x68>)
 80051f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80051fa:	2300      	movs	r3, #0
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	4b11      	ldr	r3, [pc, #68]	@ (8005244 <prvCheckForValidListAndQueue+0x74>)
 8005200:	4a11      	ldr	r2, [pc, #68]	@ (8005248 <prvCheckForValidListAndQueue+0x78>)
 8005202:	2110      	movs	r1, #16
 8005204:	200a      	movs	r0, #10
 8005206:	f7fe f939 	bl	800347c <xQueueGenericCreateStatic>
 800520a:	4603      	mov	r3, r0
 800520c:	4a08      	ldr	r2, [pc, #32]	@ (8005230 <prvCheckForValidListAndQueue+0x60>)
 800520e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005210:	4b07      	ldr	r3, [pc, #28]	@ (8005230 <prvCheckForValidListAndQueue+0x60>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d005      	beq.n	8005224 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005218:	4b05      	ldr	r3, [pc, #20]	@ (8005230 <prvCheckForValidListAndQueue+0x60>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	490b      	ldr	r1, [pc, #44]	@ (800524c <prvCheckForValidListAndQueue+0x7c>)
 800521e:	4618      	mov	r0, r3
 8005220:	f7fe fd5c 	bl	8003cdc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005224:	f000 f97a 	bl	800551c <vPortExitCritical>
}
 8005228:	bf00      	nop
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	20000e28 	.word	0x20000e28
 8005234:	20000df8 	.word	0x20000df8
 8005238:	20000e0c 	.word	0x20000e0c
 800523c:	20000e20 	.word	0x20000e20
 8005240:	20000e24 	.word	0x20000e24
 8005244:	20000ed4 	.word	0x20000ed4
 8005248:	20000e34 	.word	0x20000e34
 800524c:	08005cf0 	.word	0x08005cf0

08005250 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	3b04      	subs	r3, #4
 8005260:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005268:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	3b04      	subs	r3, #4
 800526e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	f023 0201 	bic.w	r2, r3, #1
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	3b04      	subs	r3, #4
 800527e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005280:	4a0c      	ldr	r2, [pc, #48]	@ (80052b4 <pxPortInitialiseStack+0x64>)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	3b14      	subs	r3, #20
 800528a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	3b04      	subs	r3, #4
 8005296:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f06f 0202 	mvn.w	r2, #2
 800529e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	3b20      	subs	r3, #32
 80052a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80052a6:	68fb      	ldr	r3, [r7, #12]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	080052b9 	.word	0x080052b9

080052b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80052be:	2300      	movs	r3, #0
 80052c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80052c2:	4b13      	ldr	r3, [pc, #76]	@ (8005310 <prvTaskExitError+0x58>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ca:	d00b      	beq.n	80052e4 <prvTaskExitError+0x2c>
	__asm volatile
 80052cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d0:	f383 8811 	msr	BASEPRI, r3
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	60fb      	str	r3, [r7, #12]
}
 80052de:	bf00      	nop
 80052e0:	bf00      	nop
 80052e2:	e7fd      	b.n	80052e0 <prvTaskExitError+0x28>
	__asm volatile
 80052e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e8:	f383 8811 	msr	BASEPRI, r3
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	60bb      	str	r3, [r7, #8]
}
 80052f6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80052f8:	bf00      	nop
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d0fc      	beq.n	80052fa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005300:	bf00      	nop
 8005302:	bf00      	nop
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	2000000c 	.word	0x2000000c
	...

08005320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005320:	4b07      	ldr	r3, [pc, #28]	@ (8005340 <pxCurrentTCBConst2>)
 8005322:	6819      	ldr	r1, [r3, #0]
 8005324:	6808      	ldr	r0, [r1, #0]
 8005326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800532a:	f380 8809 	msr	PSP, r0
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f04f 0000 	mov.w	r0, #0
 8005336:	f380 8811 	msr	BASEPRI, r0
 800533a:	4770      	bx	lr
 800533c:	f3af 8000 	nop.w

08005340 <pxCurrentTCBConst2>:
 8005340:	200008f8 	.word	0x200008f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005344:	bf00      	nop
 8005346:	bf00      	nop

08005348 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005348:	4808      	ldr	r0, [pc, #32]	@ (800536c <prvPortStartFirstTask+0x24>)
 800534a:	6800      	ldr	r0, [r0, #0]
 800534c:	6800      	ldr	r0, [r0, #0]
 800534e:	f380 8808 	msr	MSP, r0
 8005352:	f04f 0000 	mov.w	r0, #0
 8005356:	f380 8814 	msr	CONTROL, r0
 800535a:	b662      	cpsie	i
 800535c:	b661      	cpsie	f
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	f3bf 8f6f 	isb	sy
 8005366:	df00      	svc	0
 8005368:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800536a:	bf00      	nop
 800536c:	e000ed08 	.word	0xe000ed08

08005370 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005376:	4b47      	ldr	r3, [pc, #284]	@ (8005494 <xPortStartScheduler+0x124>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a47      	ldr	r2, [pc, #284]	@ (8005498 <xPortStartScheduler+0x128>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d10b      	bne.n	8005398 <xPortStartScheduler+0x28>
	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	613b      	str	r3, [r7, #16]
}
 8005392:	bf00      	nop
 8005394:	bf00      	nop
 8005396:	e7fd      	b.n	8005394 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005398:	4b3e      	ldr	r3, [pc, #248]	@ (8005494 <xPortStartScheduler+0x124>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a3f      	ldr	r2, [pc, #252]	@ (800549c <xPortStartScheduler+0x12c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d10b      	bne.n	80053ba <xPortStartScheduler+0x4a>
	__asm volatile
 80053a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	60fb      	str	r3, [r7, #12]
}
 80053b4:	bf00      	nop
 80053b6:	bf00      	nop
 80053b8:	e7fd      	b.n	80053b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80053ba:	4b39      	ldr	r3, [pc, #228]	@ (80054a0 <xPortStartScheduler+0x130>)
 80053bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	22ff      	movs	r2, #255	@ 0xff
 80053ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80053d4:	78fb      	ldrb	r3, [r7, #3]
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	4b31      	ldr	r3, [pc, #196]	@ (80054a4 <xPortStartScheduler+0x134>)
 80053e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80053e2:	4b31      	ldr	r3, [pc, #196]	@ (80054a8 <xPortStartScheduler+0x138>)
 80053e4:	2207      	movs	r2, #7
 80053e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053e8:	e009      	b.n	80053fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80053ea:	4b2f      	ldr	r3, [pc, #188]	@ (80054a8 <xPortStartScheduler+0x138>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3b01      	subs	r3, #1
 80053f0:	4a2d      	ldr	r2, [pc, #180]	@ (80054a8 <xPortStartScheduler+0x138>)
 80053f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80053f4:	78fb      	ldrb	r3, [r7, #3]
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053fe:	78fb      	ldrb	r3, [r7, #3]
 8005400:	b2db      	uxtb	r3, r3
 8005402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005406:	2b80      	cmp	r3, #128	@ 0x80
 8005408:	d0ef      	beq.n	80053ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800540a:	4b27      	ldr	r3, [pc, #156]	@ (80054a8 <xPortStartScheduler+0x138>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f1c3 0307 	rsb	r3, r3, #7
 8005412:	2b04      	cmp	r3, #4
 8005414:	d00b      	beq.n	800542e <xPortStartScheduler+0xbe>
	__asm volatile
 8005416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541a:	f383 8811 	msr	BASEPRI, r3
 800541e:	f3bf 8f6f 	isb	sy
 8005422:	f3bf 8f4f 	dsb	sy
 8005426:	60bb      	str	r3, [r7, #8]
}
 8005428:	bf00      	nop
 800542a:	bf00      	nop
 800542c:	e7fd      	b.n	800542a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800542e:	4b1e      	ldr	r3, [pc, #120]	@ (80054a8 <xPortStartScheduler+0x138>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	021b      	lsls	r3, r3, #8
 8005434:	4a1c      	ldr	r2, [pc, #112]	@ (80054a8 <xPortStartScheduler+0x138>)
 8005436:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005438:	4b1b      	ldr	r3, [pc, #108]	@ (80054a8 <xPortStartScheduler+0x138>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005440:	4a19      	ldr	r2, [pc, #100]	@ (80054a8 <xPortStartScheduler+0x138>)
 8005442:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	b2da      	uxtb	r2, r3
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800544c:	4b17      	ldr	r3, [pc, #92]	@ (80054ac <xPortStartScheduler+0x13c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a16      	ldr	r2, [pc, #88]	@ (80054ac <xPortStartScheduler+0x13c>)
 8005452:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005456:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005458:	4b14      	ldr	r3, [pc, #80]	@ (80054ac <xPortStartScheduler+0x13c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a13      	ldr	r2, [pc, #76]	@ (80054ac <xPortStartScheduler+0x13c>)
 800545e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005462:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005464:	f000 f8da 	bl	800561c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005468:	4b11      	ldr	r3, [pc, #68]	@ (80054b0 <xPortStartScheduler+0x140>)
 800546a:	2200      	movs	r2, #0
 800546c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800546e:	f000 f8f9 	bl	8005664 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005472:	4b10      	ldr	r3, [pc, #64]	@ (80054b4 <xPortStartScheduler+0x144>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a0f      	ldr	r2, [pc, #60]	@ (80054b4 <xPortStartScheduler+0x144>)
 8005478:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800547c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800547e:	f7ff ff63 	bl	8005348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005482:	f7ff f85f 	bl	8004544 <vTaskSwitchContext>
	prvTaskExitError();
 8005486:	f7ff ff17 	bl	80052b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3718      	adds	r7, #24
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	e000ed00 	.word	0xe000ed00
 8005498:	410fc271 	.word	0x410fc271
 800549c:	410fc270 	.word	0x410fc270
 80054a0:	e000e400 	.word	0xe000e400
 80054a4:	20000f24 	.word	0x20000f24
 80054a8:	20000f28 	.word	0x20000f28
 80054ac:	e000ed20 	.word	0xe000ed20
 80054b0:	2000000c 	.word	0x2000000c
 80054b4:	e000ef34 	.word	0xe000ef34

080054b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
	__asm volatile
 80054be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c2:	f383 8811 	msr	BASEPRI, r3
 80054c6:	f3bf 8f6f 	isb	sy
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	607b      	str	r3, [r7, #4]
}
 80054d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80054d2:	4b10      	ldr	r3, [pc, #64]	@ (8005514 <vPortEnterCritical+0x5c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	3301      	adds	r3, #1
 80054d8:	4a0e      	ldr	r2, [pc, #56]	@ (8005514 <vPortEnterCritical+0x5c>)
 80054da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80054dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005514 <vPortEnterCritical+0x5c>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d110      	bne.n	8005506 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80054e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005518 <vPortEnterCritical+0x60>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00b      	beq.n	8005506 <vPortEnterCritical+0x4e>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	603b      	str	r3, [r7, #0]
}
 8005500:	bf00      	nop
 8005502:	bf00      	nop
 8005504:	e7fd      	b.n	8005502 <vPortEnterCritical+0x4a>
	}
}
 8005506:	bf00      	nop
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	2000000c 	.word	0x2000000c
 8005518:	e000ed04 	.word	0xe000ed04

0800551c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005522:	4b12      	ldr	r3, [pc, #72]	@ (800556c <vPortExitCritical+0x50>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10b      	bne.n	8005542 <vPortExitCritical+0x26>
	__asm volatile
 800552a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800552e:	f383 8811 	msr	BASEPRI, r3
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	607b      	str	r3, [r7, #4]
}
 800553c:	bf00      	nop
 800553e:	bf00      	nop
 8005540:	e7fd      	b.n	800553e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005542:	4b0a      	ldr	r3, [pc, #40]	@ (800556c <vPortExitCritical+0x50>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3b01      	subs	r3, #1
 8005548:	4a08      	ldr	r2, [pc, #32]	@ (800556c <vPortExitCritical+0x50>)
 800554a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800554c:	4b07      	ldr	r3, [pc, #28]	@ (800556c <vPortExitCritical+0x50>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d105      	bne.n	8005560 <vPortExitCritical+0x44>
 8005554:	2300      	movs	r3, #0
 8005556:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	f383 8811 	msr	BASEPRI, r3
}
 800555e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	2000000c 	.word	0x2000000c

08005570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005570:	f3ef 8009 	mrs	r0, PSP
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	4b15      	ldr	r3, [pc, #84]	@ (80055d0 <pxCurrentTCBConst>)
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	f01e 0f10 	tst.w	lr, #16
 8005580:	bf08      	it	eq
 8005582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800558a:	6010      	str	r0, [r2, #0]
 800558c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005590:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005594:	f380 8811 	msr	BASEPRI, r0
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f7fe ffd0 	bl	8004544 <vTaskSwitchContext>
 80055a4:	f04f 0000 	mov.w	r0, #0
 80055a8:	f380 8811 	msr	BASEPRI, r0
 80055ac:	bc09      	pop	{r0, r3}
 80055ae:	6819      	ldr	r1, [r3, #0]
 80055b0:	6808      	ldr	r0, [r1, #0]
 80055b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055b6:	f01e 0f10 	tst.w	lr, #16
 80055ba:	bf08      	it	eq
 80055bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80055c0:	f380 8809 	msr	PSP, r0
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	f3af 8000 	nop.w

080055d0 <pxCurrentTCBConst>:
 80055d0:	200008f8 	.word	0x200008f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80055d4:	bf00      	nop
 80055d6:	bf00      	nop

080055d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
	__asm volatile
 80055de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	607b      	str	r3, [r7, #4]
}
 80055f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80055f2:	f7fe fee7 	bl	80043c4 <xTaskIncrementTick>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80055fc:	4b06      	ldr	r3, [pc, #24]	@ (8005618 <SysTick_Handler+0x40>)
 80055fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	2300      	movs	r3, #0
 8005606:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	f383 8811 	msr	BASEPRI, r3
}
 800560e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005610:	bf00      	nop
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	e000ed04 	.word	0xe000ed04

0800561c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005620:	4b0b      	ldr	r3, [pc, #44]	@ (8005650 <vPortSetupTimerInterrupt+0x34>)
 8005622:	2200      	movs	r2, #0
 8005624:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005626:	4b0b      	ldr	r3, [pc, #44]	@ (8005654 <vPortSetupTimerInterrupt+0x38>)
 8005628:	2200      	movs	r2, #0
 800562a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800562c:	4b0a      	ldr	r3, [pc, #40]	@ (8005658 <vPortSetupTimerInterrupt+0x3c>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a0a      	ldr	r2, [pc, #40]	@ (800565c <vPortSetupTimerInterrupt+0x40>)
 8005632:	fba2 2303 	umull	r2, r3, r2, r3
 8005636:	099b      	lsrs	r3, r3, #6
 8005638:	4a09      	ldr	r2, [pc, #36]	@ (8005660 <vPortSetupTimerInterrupt+0x44>)
 800563a:	3b01      	subs	r3, #1
 800563c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800563e:	4b04      	ldr	r3, [pc, #16]	@ (8005650 <vPortSetupTimerInterrupt+0x34>)
 8005640:	2207      	movs	r2, #7
 8005642:	601a      	str	r2, [r3, #0]
}
 8005644:	bf00      	nop
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	e000e010 	.word	0xe000e010
 8005654:	e000e018 	.word	0xe000e018
 8005658:	20000000 	.word	0x20000000
 800565c:	10624dd3 	.word	0x10624dd3
 8005660:	e000e014 	.word	0xe000e014

08005664 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005664:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005674 <vPortEnableVFP+0x10>
 8005668:	6801      	ldr	r1, [r0, #0]
 800566a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800566e:	6001      	str	r1, [r0, #0]
 8005670:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005672:	bf00      	nop
 8005674:	e000ed88 	.word	0xe000ed88

08005678 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800567e:	f3ef 8305 	mrs	r3, IPSR
 8005682:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2b0f      	cmp	r3, #15
 8005688:	d915      	bls.n	80056b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800568a:	4a18      	ldr	r2, [pc, #96]	@ (80056ec <vPortValidateInterruptPriority+0x74>)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4413      	add	r3, r2
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005694:	4b16      	ldr	r3, [pc, #88]	@ (80056f0 <vPortValidateInterruptPriority+0x78>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	7afa      	ldrb	r2, [r7, #11]
 800569a:	429a      	cmp	r2, r3
 800569c:	d20b      	bcs.n	80056b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800569e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a2:	f383 8811 	msr	BASEPRI, r3
 80056a6:	f3bf 8f6f 	isb	sy
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	607b      	str	r3, [r7, #4]
}
 80056b0:	bf00      	nop
 80056b2:	bf00      	nop
 80056b4:	e7fd      	b.n	80056b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80056b6:	4b0f      	ldr	r3, [pc, #60]	@ (80056f4 <vPortValidateInterruptPriority+0x7c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80056be:	4b0e      	ldr	r3, [pc, #56]	@ (80056f8 <vPortValidateInterruptPriority+0x80>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d90b      	bls.n	80056de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80056c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ca:	f383 8811 	msr	BASEPRI, r3
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	603b      	str	r3, [r7, #0]
}
 80056d8:	bf00      	nop
 80056da:	bf00      	nop
 80056dc:	e7fd      	b.n	80056da <vPortValidateInterruptPriority+0x62>
	}
 80056de:	bf00      	nop
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	e000e3f0 	.word	0xe000e3f0
 80056f0:	20000f24 	.word	0x20000f24
 80056f4:	e000ed0c 	.word	0xe000ed0c
 80056f8:	20000f28 	.word	0x20000f28

080056fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08a      	sub	sp, #40	@ 0x28
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005704:	2300      	movs	r3, #0
 8005706:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005708:	f7fe fda0 	bl	800424c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800570c:	4b5a      	ldr	r3, [pc, #360]	@ (8005878 <pvPortMalloc+0x17c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005714:	f000 f916 	bl	8005944 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005718:	4b58      	ldr	r3, [pc, #352]	@ (800587c <pvPortMalloc+0x180>)
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4013      	ands	r3, r2
 8005720:	2b00      	cmp	r3, #0
 8005722:	f040 8090 	bne.w	8005846 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d01e      	beq.n	800576a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800572c:	2208      	movs	r2, #8
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4413      	add	r3, r2
 8005732:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f003 0307 	and.w	r3, r3, #7
 800573a:	2b00      	cmp	r3, #0
 800573c:	d015      	beq.n	800576a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f023 0307 	bic.w	r3, r3, #7
 8005744:	3308      	adds	r3, #8
 8005746:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f003 0307 	and.w	r3, r3, #7
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00b      	beq.n	800576a <pvPortMalloc+0x6e>
	__asm volatile
 8005752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	617b      	str	r3, [r7, #20]
}
 8005764:	bf00      	nop
 8005766:	bf00      	nop
 8005768:	e7fd      	b.n	8005766 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d06a      	beq.n	8005846 <pvPortMalloc+0x14a>
 8005770:	4b43      	ldr	r3, [pc, #268]	@ (8005880 <pvPortMalloc+0x184>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	429a      	cmp	r2, r3
 8005778:	d865      	bhi.n	8005846 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800577a:	4b42      	ldr	r3, [pc, #264]	@ (8005884 <pvPortMalloc+0x188>)
 800577c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800577e:	4b41      	ldr	r3, [pc, #260]	@ (8005884 <pvPortMalloc+0x188>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005784:	e004      	b.n	8005790 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005788:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800578a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	429a      	cmp	r2, r3
 8005798:	d903      	bls.n	80057a2 <pvPortMalloc+0xa6>
 800579a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f1      	bne.n	8005786 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80057a2:	4b35      	ldr	r3, [pc, #212]	@ (8005878 <pvPortMalloc+0x17c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d04c      	beq.n	8005846 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2208      	movs	r2, #8
 80057b2:	4413      	add	r3, r2
 80057b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80057b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80057be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	1ad2      	subs	r2, r2, r3
 80057c6:	2308      	movs	r3, #8
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d920      	bls.n	8005810 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80057ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4413      	add	r3, r2
 80057d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	f003 0307 	and.w	r3, r3, #7
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00b      	beq.n	80057f8 <pvPortMalloc+0xfc>
	__asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e4:	f383 8811 	msr	BASEPRI, r3
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	613b      	str	r3, [r7, #16]
}
 80057f2:	bf00      	nop
 80057f4:	bf00      	nop
 80057f6:	e7fd      	b.n	80057f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80057f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	1ad2      	subs	r2, r2, r3
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800580a:	69b8      	ldr	r0, [r7, #24]
 800580c:	f000 f8fc 	bl	8005a08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005810:	4b1b      	ldr	r3, [pc, #108]	@ (8005880 <pvPortMalloc+0x184>)
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	4a19      	ldr	r2, [pc, #100]	@ (8005880 <pvPortMalloc+0x184>)
 800581c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800581e:	4b18      	ldr	r3, [pc, #96]	@ (8005880 <pvPortMalloc+0x184>)
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	4b19      	ldr	r3, [pc, #100]	@ (8005888 <pvPortMalloc+0x18c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	429a      	cmp	r2, r3
 8005828:	d203      	bcs.n	8005832 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800582a:	4b15      	ldr	r3, [pc, #84]	@ (8005880 <pvPortMalloc+0x184>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a16      	ldr	r2, [pc, #88]	@ (8005888 <pvPortMalloc+0x18c>)
 8005830:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	4b11      	ldr	r3, [pc, #68]	@ (800587c <pvPortMalloc+0x180>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	431a      	orrs	r2, r3
 800583c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005842:	2200      	movs	r2, #0
 8005844:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005846:	f7fe fd0f 	bl	8004268 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	f003 0307 	and.w	r3, r3, #7
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00b      	beq.n	800586c <pvPortMalloc+0x170>
	__asm volatile
 8005854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	60fb      	str	r3, [r7, #12]
}
 8005866:	bf00      	nop
 8005868:	bf00      	nop
 800586a:	e7fd      	b.n	8005868 <pvPortMalloc+0x16c>
	return pvReturn;
 800586c:	69fb      	ldr	r3, [r7, #28]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3728      	adds	r7, #40	@ 0x28
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20001b34 	.word	0x20001b34
 800587c:	20001b40 	.word	0x20001b40
 8005880:	20001b38 	.word	0x20001b38
 8005884:	20001b2c 	.word	0x20001b2c
 8005888:	20001b3c 	.word	0x20001b3c

0800588c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d04a      	beq.n	8005934 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800589e:	2308      	movs	r3, #8
 80058a0:	425b      	negs	r3, r3
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	4413      	add	r3, r2
 80058a6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	4b22      	ldr	r3, [pc, #136]	@ (800593c <vPortFree+0xb0>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4013      	ands	r3, r2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10b      	bne.n	80058d2 <vPortFree+0x46>
	__asm volatile
 80058ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	60fb      	str	r3, [r7, #12]
}
 80058cc:	bf00      	nop
 80058ce:	bf00      	nop
 80058d0:	e7fd      	b.n	80058ce <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00b      	beq.n	80058f2 <vPortFree+0x66>
	__asm volatile
 80058da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058de:	f383 8811 	msr	BASEPRI, r3
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	60bb      	str	r3, [r7, #8]
}
 80058ec:	bf00      	nop
 80058ee:	bf00      	nop
 80058f0:	e7fd      	b.n	80058ee <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	4b11      	ldr	r3, [pc, #68]	@ (800593c <vPortFree+0xb0>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4013      	ands	r3, r2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d019      	beq.n	8005934 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d115      	bne.n	8005934 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	4b0b      	ldr	r3, [pc, #44]	@ (800593c <vPortFree+0xb0>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	43db      	mvns	r3, r3
 8005912:	401a      	ands	r2, r3
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005918:	f7fe fc98 	bl	800424c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	4b07      	ldr	r3, [pc, #28]	@ (8005940 <vPortFree+0xb4>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4413      	add	r3, r2
 8005926:	4a06      	ldr	r2, [pc, #24]	@ (8005940 <vPortFree+0xb4>)
 8005928:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800592a:	6938      	ldr	r0, [r7, #16]
 800592c:	f000 f86c 	bl	8005a08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005930:	f7fe fc9a 	bl	8004268 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005934:	bf00      	nop
 8005936:	3718      	adds	r7, #24
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	20001b40 	.word	0x20001b40
 8005940:	20001b38 	.word	0x20001b38

08005944 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800594a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800594e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005950:	4b27      	ldr	r3, [pc, #156]	@ (80059f0 <prvHeapInit+0xac>)
 8005952:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00c      	beq.n	8005978 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	3307      	adds	r3, #7
 8005962:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0307 	bic.w	r3, r3, #7
 800596a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	4a1f      	ldr	r2, [pc, #124]	@ (80059f0 <prvHeapInit+0xac>)
 8005974:	4413      	add	r3, r2
 8005976:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800597c:	4a1d      	ldr	r2, [pc, #116]	@ (80059f4 <prvHeapInit+0xb0>)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005982:	4b1c      	ldr	r3, [pc, #112]	@ (80059f4 <prvHeapInit+0xb0>)
 8005984:	2200      	movs	r2, #0
 8005986:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	4413      	add	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005990:	2208      	movs	r2, #8
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	1a9b      	subs	r3, r3, r2
 8005996:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0307 	bic.w	r3, r3, #7
 800599e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4a15      	ldr	r2, [pc, #84]	@ (80059f8 <prvHeapInit+0xb4>)
 80059a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80059a6:	4b14      	ldr	r3, [pc, #80]	@ (80059f8 <prvHeapInit+0xb4>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2200      	movs	r2, #0
 80059ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80059ae:	4b12      	ldr	r3, [pc, #72]	@ (80059f8 <prvHeapInit+0xb4>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2200      	movs	r2, #0
 80059b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	1ad2      	subs	r2, r2, r3
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80059c4:	4b0c      	ldr	r3, [pc, #48]	@ (80059f8 <prvHeapInit+0xb4>)
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	4a0a      	ldr	r2, [pc, #40]	@ (80059fc <prvHeapInit+0xb8>)
 80059d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	4a09      	ldr	r2, [pc, #36]	@ (8005a00 <prvHeapInit+0xbc>)
 80059da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80059dc:	4b09      	ldr	r3, [pc, #36]	@ (8005a04 <prvHeapInit+0xc0>)
 80059de:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80059e2:	601a      	str	r2, [r3, #0]
}
 80059e4:	bf00      	nop
 80059e6:	3714      	adds	r7, #20
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	20000f2c 	.word	0x20000f2c
 80059f4:	20001b2c 	.word	0x20001b2c
 80059f8:	20001b34 	.word	0x20001b34
 80059fc:	20001b3c 	.word	0x20001b3c
 8005a00:	20001b38 	.word	0x20001b38
 8005a04:	20001b40 	.word	0x20001b40

08005a08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a10:	4b28      	ldr	r3, [pc, #160]	@ (8005ab4 <prvInsertBlockIntoFreeList+0xac>)
 8005a12:	60fb      	str	r3, [r7, #12]
 8005a14:	e002      	b.n	8005a1c <prvInsertBlockIntoFreeList+0x14>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	60fb      	str	r3, [r7, #12]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d8f7      	bhi.n	8005a16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	4413      	add	r3, r2
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d108      	bne.n	8005a4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	441a      	add	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	441a      	add	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d118      	bne.n	8005a90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	4b15      	ldr	r3, [pc, #84]	@ (8005ab8 <prvInsertBlockIntoFreeList+0xb0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d00d      	beq.n	8005a86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	441a      	add	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	e008      	b.n	8005a98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a86:	4b0c      	ldr	r3, [pc, #48]	@ (8005ab8 <prvInsertBlockIntoFreeList+0xb0>)
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	e003      	b.n	8005a98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d002      	beq.n	8005aa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005aa6:	bf00      	nop
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	20001b2c 	.word	0x20001b2c
 8005ab8:	20001b34 	.word	0x20001b34

08005abc <memset>:
 8005abc:	4402      	add	r2, r0
 8005abe:	4603      	mov	r3, r0
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d100      	bne.n	8005ac6 <memset+0xa>
 8005ac4:	4770      	bx	lr
 8005ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8005aca:	e7f9      	b.n	8005ac0 <memset+0x4>

08005acc <_reclaim_reent>:
 8005acc:	4b29      	ldr	r3, [pc, #164]	@ (8005b74 <_reclaim_reent+0xa8>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4283      	cmp	r3, r0
 8005ad2:	b570      	push	{r4, r5, r6, lr}
 8005ad4:	4604      	mov	r4, r0
 8005ad6:	d04b      	beq.n	8005b70 <_reclaim_reent+0xa4>
 8005ad8:	69c3      	ldr	r3, [r0, #28]
 8005ada:	b1ab      	cbz	r3, 8005b08 <_reclaim_reent+0x3c>
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	b16b      	cbz	r3, 8005afc <_reclaim_reent+0x30>
 8005ae0:	2500      	movs	r5, #0
 8005ae2:	69e3      	ldr	r3, [r4, #28]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	5959      	ldr	r1, [r3, r5]
 8005ae8:	2900      	cmp	r1, #0
 8005aea:	d13b      	bne.n	8005b64 <_reclaim_reent+0x98>
 8005aec:	3504      	adds	r5, #4
 8005aee:	2d80      	cmp	r5, #128	@ 0x80
 8005af0:	d1f7      	bne.n	8005ae2 <_reclaim_reent+0x16>
 8005af2:	69e3      	ldr	r3, [r4, #28]
 8005af4:	4620      	mov	r0, r4
 8005af6:	68d9      	ldr	r1, [r3, #12]
 8005af8:	f000 f872 	bl	8005be0 <_free_r>
 8005afc:	69e3      	ldr	r3, [r4, #28]
 8005afe:	6819      	ldr	r1, [r3, #0]
 8005b00:	b111      	cbz	r1, 8005b08 <_reclaim_reent+0x3c>
 8005b02:	4620      	mov	r0, r4
 8005b04:	f000 f86c 	bl	8005be0 <_free_r>
 8005b08:	6961      	ldr	r1, [r4, #20]
 8005b0a:	b111      	cbz	r1, 8005b12 <_reclaim_reent+0x46>
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	f000 f867 	bl	8005be0 <_free_r>
 8005b12:	69e1      	ldr	r1, [r4, #28]
 8005b14:	b111      	cbz	r1, 8005b1c <_reclaim_reent+0x50>
 8005b16:	4620      	mov	r0, r4
 8005b18:	f000 f862 	bl	8005be0 <_free_r>
 8005b1c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005b1e:	b111      	cbz	r1, 8005b26 <_reclaim_reent+0x5a>
 8005b20:	4620      	mov	r0, r4
 8005b22:	f000 f85d 	bl	8005be0 <_free_r>
 8005b26:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b28:	b111      	cbz	r1, 8005b30 <_reclaim_reent+0x64>
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f000 f858 	bl	8005be0 <_free_r>
 8005b30:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005b32:	b111      	cbz	r1, 8005b3a <_reclaim_reent+0x6e>
 8005b34:	4620      	mov	r0, r4
 8005b36:	f000 f853 	bl	8005be0 <_free_r>
 8005b3a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005b3c:	b111      	cbz	r1, 8005b44 <_reclaim_reent+0x78>
 8005b3e:	4620      	mov	r0, r4
 8005b40:	f000 f84e 	bl	8005be0 <_free_r>
 8005b44:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005b46:	b111      	cbz	r1, 8005b4e <_reclaim_reent+0x82>
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f000 f849 	bl	8005be0 <_free_r>
 8005b4e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005b50:	b111      	cbz	r1, 8005b58 <_reclaim_reent+0x8c>
 8005b52:	4620      	mov	r0, r4
 8005b54:	f000 f844 	bl	8005be0 <_free_r>
 8005b58:	6a23      	ldr	r3, [r4, #32]
 8005b5a:	b14b      	cbz	r3, 8005b70 <_reclaim_reent+0xa4>
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005b62:	4718      	bx	r3
 8005b64:	680e      	ldr	r6, [r1, #0]
 8005b66:	4620      	mov	r0, r4
 8005b68:	f000 f83a 	bl	8005be0 <_free_r>
 8005b6c:	4631      	mov	r1, r6
 8005b6e:	e7bb      	b.n	8005ae8 <_reclaim_reent+0x1c>
 8005b70:	bd70      	pop	{r4, r5, r6, pc}
 8005b72:	bf00      	nop
 8005b74:	20000010 	.word	0x20000010

08005b78 <__libc_init_array>:
 8005b78:	b570      	push	{r4, r5, r6, lr}
 8005b7a:	4d0d      	ldr	r5, [pc, #52]	@ (8005bb0 <__libc_init_array+0x38>)
 8005b7c:	4c0d      	ldr	r4, [pc, #52]	@ (8005bb4 <__libc_init_array+0x3c>)
 8005b7e:	1b64      	subs	r4, r4, r5
 8005b80:	10a4      	asrs	r4, r4, #2
 8005b82:	2600      	movs	r6, #0
 8005b84:	42a6      	cmp	r6, r4
 8005b86:	d109      	bne.n	8005b9c <__libc_init_array+0x24>
 8005b88:	4d0b      	ldr	r5, [pc, #44]	@ (8005bb8 <__libc_init_array+0x40>)
 8005b8a:	4c0c      	ldr	r4, [pc, #48]	@ (8005bbc <__libc_init_array+0x44>)
 8005b8c:	f000 f87e 	bl	8005c8c <_init>
 8005b90:	1b64      	subs	r4, r4, r5
 8005b92:	10a4      	asrs	r4, r4, #2
 8005b94:	2600      	movs	r6, #0
 8005b96:	42a6      	cmp	r6, r4
 8005b98:	d105      	bne.n	8005ba6 <__libc_init_array+0x2e>
 8005b9a:	bd70      	pop	{r4, r5, r6, pc}
 8005b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ba0:	4798      	blx	r3
 8005ba2:	3601      	adds	r6, #1
 8005ba4:	e7ee      	b.n	8005b84 <__libc_init_array+0xc>
 8005ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005baa:	4798      	blx	r3
 8005bac:	3601      	adds	r6, #1
 8005bae:	e7f2      	b.n	8005b96 <__libc_init_array+0x1e>
 8005bb0:	08005dc8 	.word	0x08005dc8
 8005bb4:	08005dc8 	.word	0x08005dc8
 8005bb8:	08005dc8 	.word	0x08005dc8
 8005bbc:	08005dcc 	.word	0x08005dcc

08005bc0 <__retarget_lock_acquire_recursive>:
 8005bc0:	4770      	bx	lr

08005bc2 <__retarget_lock_release_recursive>:
 8005bc2:	4770      	bx	lr

08005bc4 <memcpy>:
 8005bc4:	440a      	add	r2, r1
 8005bc6:	4291      	cmp	r1, r2
 8005bc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bcc:	d100      	bne.n	8005bd0 <memcpy+0xc>
 8005bce:	4770      	bx	lr
 8005bd0:	b510      	push	{r4, lr}
 8005bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bda:	4291      	cmp	r1, r2
 8005bdc:	d1f9      	bne.n	8005bd2 <memcpy+0xe>
 8005bde:	bd10      	pop	{r4, pc}

08005be0 <_free_r>:
 8005be0:	b538      	push	{r3, r4, r5, lr}
 8005be2:	4605      	mov	r5, r0
 8005be4:	2900      	cmp	r1, #0
 8005be6:	d041      	beq.n	8005c6c <_free_r+0x8c>
 8005be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bec:	1f0c      	subs	r4, r1, #4
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	bfb8      	it	lt
 8005bf2:	18e4      	addlt	r4, r4, r3
 8005bf4:	f000 f83e 	bl	8005c74 <__malloc_lock>
 8005bf8:	4a1d      	ldr	r2, [pc, #116]	@ (8005c70 <_free_r+0x90>)
 8005bfa:	6813      	ldr	r3, [r2, #0]
 8005bfc:	b933      	cbnz	r3, 8005c0c <_free_r+0x2c>
 8005bfe:	6063      	str	r3, [r4, #4]
 8005c00:	6014      	str	r4, [r2, #0]
 8005c02:	4628      	mov	r0, r5
 8005c04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c08:	f000 b83a 	b.w	8005c80 <__malloc_unlock>
 8005c0c:	42a3      	cmp	r3, r4
 8005c0e:	d908      	bls.n	8005c22 <_free_r+0x42>
 8005c10:	6820      	ldr	r0, [r4, #0]
 8005c12:	1821      	adds	r1, r4, r0
 8005c14:	428b      	cmp	r3, r1
 8005c16:	bf01      	itttt	eq
 8005c18:	6819      	ldreq	r1, [r3, #0]
 8005c1a:	685b      	ldreq	r3, [r3, #4]
 8005c1c:	1809      	addeq	r1, r1, r0
 8005c1e:	6021      	streq	r1, [r4, #0]
 8005c20:	e7ed      	b.n	8005bfe <_free_r+0x1e>
 8005c22:	461a      	mov	r2, r3
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	b10b      	cbz	r3, 8005c2c <_free_r+0x4c>
 8005c28:	42a3      	cmp	r3, r4
 8005c2a:	d9fa      	bls.n	8005c22 <_free_r+0x42>
 8005c2c:	6811      	ldr	r1, [r2, #0]
 8005c2e:	1850      	adds	r0, r2, r1
 8005c30:	42a0      	cmp	r0, r4
 8005c32:	d10b      	bne.n	8005c4c <_free_r+0x6c>
 8005c34:	6820      	ldr	r0, [r4, #0]
 8005c36:	4401      	add	r1, r0
 8005c38:	1850      	adds	r0, r2, r1
 8005c3a:	4283      	cmp	r3, r0
 8005c3c:	6011      	str	r1, [r2, #0]
 8005c3e:	d1e0      	bne.n	8005c02 <_free_r+0x22>
 8005c40:	6818      	ldr	r0, [r3, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	6053      	str	r3, [r2, #4]
 8005c46:	4408      	add	r0, r1
 8005c48:	6010      	str	r0, [r2, #0]
 8005c4a:	e7da      	b.n	8005c02 <_free_r+0x22>
 8005c4c:	d902      	bls.n	8005c54 <_free_r+0x74>
 8005c4e:	230c      	movs	r3, #12
 8005c50:	602b      	str	r3, [r5, #0]
 8005c52:	e7d6      	b.n	8005c02 <_free_r+0x22>
 8005c54:	6820      	ldr	r0, [r4, #0]
 8005c56:	1821      	adds	r1, r4, r0
 8005c58:	428b      	cmp	r3, r1
 8005c5a:	bf04      	itt	eq
 8005c5c:	6819      	ldreq	r1, [r3, #0]
 8005c5e:	685b      	ldreq	r3, [r3, #4]
 8005c60:	6063      	str	r3, [r4, #4]
 8005c62:	bf04      	itt	eq
 8005c64:	1809      	addeq	r1, r1, r0
 8005c66:	6021      	streq	r1, [r4, #0]
 8005c68:	6054      	str	r4, [r2, #4]
 8005c6a:	e7ca      	b.n	8005c02 <_free_r+0x22>
 8005c6c:	bd38      	pop	{r3, r4, r5, pc}
 8005c6e:	bf00      	nop
 8005c70:	20001c80 	.word	0x20001c80

08005c74 <__malloc_lock>:
 8005c74:	4801      	ldr	r0, [pc, #4]	@ (8005c7c <__malloc_lock+0x8>)
 8005c76:	f7ff bfa3 	b.w	8005bc0 <__retarget_lock_acquire_recursive>
 8005c7a:	bf00      	nop
 8005c7c:	20001c7c 	.word	0x20001c7c

08005c80 <__malloc_unlock>:
 8005c80:	4801      	ldr	r0, [pc, #4]	@ (8005c88 <__malloc_unlock+0x8>)
 8005c82:	f7ff bf9e 	b.w	8005bc2 <__retarget_lock_release_recursive>
 8005c86:	bf00      	nop
 8005c88:	20001c7c 	.word	0x20001c7c

08005c8c <_init>:
 8005c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8e:	bf00      	nop
 8005c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c92:	bc08      	pop	{r3}
 8005c94:	469e      	mov	lr, r3
 8005c96:	4770      	bx	lr

08005c98 <_fini>:
 8005c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9a:	bf00      	nop
 8005c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c9e:	bc08      	pop	{r3}
 8005ca0:	469e      	mov	lr, r3
 8005ca2:	4770      	bx	lr
